Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> np_program_0 program_class MAIN np_program_1 class_block np_program_2
Rule 2     program_class -> CLASS ID np_program_1 prog_inh class_block program_class
Rule 3     program_class -> empty
Rule 4     prog_inh -> INHERITS ID
Rule 5     prog_inh -> empty
Rule 6     np_program_0 -> <empty>
Rule 7     np_program_1 -> <empty>
Rule 8     np_program_2 -> <empty>
Rule 9     var_decl -> vars
Rule 10    var_decl -> vector
Rule 11    var_decl -> matrix
Rule 12    class_block -> { class_blck_body }
Rule 13    class_blck_body -> class_vars class_asgs class_func
Rule 14    class_blck_body -> class_func
Rule 15    class_vars -> access var_decl more_class_vars
Rule 16    more_class_vars -> class_vars
Rule 17    more_class_vars -> empty
Rule 18    class_asgs -> assignment class_asgs
Rule 19    class_asgs -> empty
Rule 20    class_func -> method class_func
Rule 21    class_func -> empty
Rule 22    access -> acc_scope np_access_1 acc_dependent
Rule 23    acc_scope -> PUBLIC
Rule 24    acc_scope -> PRIVATE
Rule 25    acc_dependent -> INDEPENDENT np_access_2
Rule 26    acc_dependent -> np_access_3
Rule 27    np_access_1 -> <empty>
Rule 28    np_access_2 -> <empty>
Rule 29    np_access_3 -> <empty>
Rule 30    method_access -> met_acc_scope np_method_access_1 met_acc_dependent
Rule 31    met_acc_scope -> PUBLIC_FUNC
Rule 32    met_acc_scope -> PRIVATE_FUNC
Rule 33    met_acc_dependent -> INDEPENDENT np_method_access_2
Rule 34    met_acc_dependent -> np_method_access_3
Rule 35    np_method_access_1 -> <empty>
Rule 36    np_method_access_2 -> <empty>
Rule 37    np_method_access_3 -> <empty>
Rule 38    ids -> ID np_ids_1 m_ids
Rule 39    m_ids -> , ids
Rule 40    m_ids -> empty
Rule 41    np_ids_1 -> <empty>
Rule 42    vars -> VAR ids : vars_type ; np_vars_3
Rule 43    vars_type -> type np_vars_1 vars_tp_a
Rule 44    vars_type -> ID np_vars_2 vars_tp_b
Rule 45    vars_tp_a -> = np_vars_4 expression np_vars_5
Rule 46    vars_tp_a -> empty
Rule 47    vars_tp_b -> = vars_assgn
Rule 48    vars_tp_b -> empty
Rule 49    vars_assgn -> create_obj
Rule 50    vars_assgn -> expression
Rule 51    np_vars_1 -> <empty>
Rule 52    np_vars_2 -> <empty>
Rule 53    np_vars_3 -> <empty>
Rule 54    np_vars_4 -> <empty>
Rule 55    np_vars_5 -> <empty>
Rule 56    vec_mat_type -> type
Rule 57    vec_mat_type -> ID np_vec_mat_type_1
Rule 58    np_vec_mat_type_1 -> <empty>
Rule 59    vector -> VEC ids : vec_mat_type [ CONST_I ] np_vector_1 vec_assgn ; np_vector_2
Rule 60    vec_assgn -> = vector_exp
Rule 61    vec_assgn -> empty
Rule 62    np_vector_1 -> <empty>
Rule 63    np_vector_2 -> <empty>
Rule 64    matrix -> MAT ids : vec_mat_type [ CONST_I , CONST_I ] np_matrix_1 mat_assgn ; np_matrix_2
Rule 65    mat_assgn -> = matrix_exp
Rule 66    mat_assgn -> empty
Rule 67    np_matrix_1 -> <empty>
Rule 68    np_matrix_2 -> <empty>
Rule 69    id_access -> id_mat_acc id_var_acc
Rule 70    id_mat_acc -> mat_vec_access
Rule 71    id_mat_acc -> empty
Rule 72    id_var_acc -> . np_id_access_1 ID id_mat_acc
Rule 73    id_var_acc -> empty
Rule 74    np_id_access_1 -> <empty>
Rule 75    assignment -> this ID np_assignment_1 id_access = np_assignment_2 ass_value ;
Rule 76    ass_value -> create_obj
Rule 77    ass_value -> expression np_assignment_3
Rule 78    ass_value -> matrix_exp
Rule 79    ass_value -> vector_exp
Rule 80    np_assignment_1 -> <empty>
Rule 81    np_assignment_2 -> <empty>
Rule 82    np_assignment_3 -> <empty>
Rule 83    this -> THIS np_this_1 .
Rule 84    this -> np_this_2
Rule 85    np_this_1 -> <empty>
Rule 86    np_this_2 -> <empty>
Rule 87    vector_exp -> [ vec_elem ]
Rule 88    vec_elem -> vec_object vec_more
Rule 89    vec_object -> create_obj
Rule 90    vec_object -> expression
Rule 91    vec_more -> , vec_elem
Rule 92    vec_more -> empty
Rule 93    matrix_exp -> { mat_elem }
Rule 94    mat_elem -> vector_exp mat_more
Rule 95    mat_more -> , mat_elem
Rule 96    mat_more -> empty
Rule 97    mat_vec_access -> [ mat_vec_index mat_access ]
Rule 98    mat_vec_index -> _
Rule 99    mat_vec_index -> expression
Rule 100   mat_access -> , mat_vec_index
Rule 101   mat_access -> empty
Rule 102   method -> func_spec ( np_method_5 opt_method_param ) np_method_6 block np_method_7
Rule 103   func_spec -> method_access func_type ID np_method_4
Rule 104   func_spec -> CONSTRUCTOR np_method_1
Rule 105   func_type -> VOID np_method_2
Rule 106   func_type -> type
Rule 107   func_type -> ID np_method_3
Rule 108   np_method_1 -> <empty>
Rule 109   np_method_2 -> <empty>
Rule 110   np_method_3 -> <empty>
Rule 111   np_method_4 -> <empty>
Rule 112   np_method_5 -> <empty>
Rule 113   np_method_6 -> <empty>
Rule 114   np_method_7 -> <empty>
Rule 115   opt_method_param -> method_param
Rule 116   opt_method_param -> empty
Rule 117   method_param -> ID np_method_param_1 : param_type param_mat_vec np_method_param_6 more_params
Rule 118   more_params -> , method_param
Rule 119   more_params -> empty
Rule 120   param_type -> type
Rule 121   param_type -> ID np_method_param_2
Rule 122   param_mat_vec -> [ param_mat ]
Rule 123   param_mat_vec -> np_method_param_3
Rule 124   param_mat -> CONST_I , CONST_I np_method_param_5
Rule 125   param_mat -> CONST_I np_method_param_4
Rule 126   np_method_param_1 -> <empty>
Rule 127   np_method_param_2 -> <empty>
Rule 128   np_method_param_3 -> <empty>
Rule 129   np_method_param_4 -> <empty>
Rule 130   np_method_param_5 -> <empty>
Rule 131   np_method_param_6 -> <empty>
Rule 132   create_obj -> NEW func_call
Rule 133   func_call -> np_func_call_1 ( func_param np_func_call_3 ) np_func_call_4
Rule 134   func_param -> expression np_func_call_2 more_fpar
Rule 135   more_fpar -> , func_param
Rule 136   more_fpar -> empty
Rule 137   np_func_call_1 -> <empty>
Rule 138   np_func_call_2 -> <empty>
Rule 139   np_func_call_3 -> <empty>
Rule 140   np_func_call_4 -> <empty>
Rule 141   block -> { bstmt }
Rule 142   bstmt -> statement bstmt
Rule 143   bstmt -> empty
Rule 144   statement -> assignment
Rule 145   statement -> condition
Rule 146   statement -> loop
Rule 147   statement -> in_out
Rule 148   statement -> return
Rule 149   statement -> this ID np_statement_1 func_call ;
Rule 150   statement -> var_decl
Rule 151   np_statement_1 -> <empty>
Rule 152   condition -> IF cond_body np_condition_4
Rule 153   cond_body -> ( expression ) np_condition_1 block cond_else
Rule 154   cond_else -> np_condition_2 ELSE block
Rule 155   cond_else -> np_condition_2 ELSEIF cond_body
Rule 156   cond_else -> np_condition_3
Rule 157   np_condition_1 -> <empty>
Rule 158   np_condition_2 -> <empty>
Rule 159   np_condition_3 -> <empty>
Rule 160   np_condition_4 -> <empty>
Rule 161   loop -> for_loop
Rule 162   loop -> while_loop
Rule 163   for_loop -> FOR ( assignment np_for_loop_1 expression np_for_loop_2 ; ID = expression np_for_loop_3 ) block np_for_loop_4
Rule 164   np_for_loop_1 -> <empty>
Rule 165   np_for_loop_2 -> <empty>
Rule 166   np_for_loop_3 -> <empty>
Rule 167   np_for_loop_4 -> <empty>
Rule 168   while_loop -> WHILE np_while_loop_1 ( expression ) np_while_loop_2 block np_while_loop_3
Rule 169   np_while_loop_1 -> <empty>
Rule 170   np_while_loop_2 -> <empty>
Rule 171   np_while_loop_3 -> <empty>
Rule 172   in_out -> PRINT ( print_exp ) ;
Rule 173   in_out -> SCAN ( ID np_in_out_2 id_access ) ;
Rule 174   print_exp -> expression np_in_out_1 print_more
Rule 175   print_more -> , print_exp
Rule 176   print_more -> empty
Rule 177   np_in_out_1 -> <empty>
Rule 178   np_in_out_2 -> <empty>
Rule 179   return -> RETURN ret_val ;
Rule 180   ret_val -> expression np_return_1
Rule 181   ret_val -> np_return_2
Rule 182   np_return_1 -> <empty>
Rule 183   np_return_2 -> <empty>
Rule 184   expression -> rel_expression np_expression_1 expression_op
Rule 185   expression_op -> AND np_expression_2 expression
Rule 186   expression_op -> OR np_expression_2 expression
Rule 187   expression_op -> XOR np_expression_2 expression
Rule 188   expression_op -> empty
Rule 189   np_expression_1 -> <empty>
Rule 190   np_expression_2 -> <empty>
Rule 191   rel_expression -> rel_expression_1 np_rel_expression_1 rel_exp_op
Rule 192   rel_exp_op -> EQUAL np_rel_expression_2 rel_expression
Rule 193   rel_exp_op -> NOT_EQUAL np_rel_expression_2 rel_expression
Rule 194   rel_exp_op -> empty
Rule 195   np_rel_expression_1 -> <empty>
Rule 196   np_rel_expression_2 -> <empty>
Rule 197   rel_expression_1 -> exp np_rel_expression_1_1 rel_exp_1_op
Rule 198   rel_exp_1_op -> < np_rel_expression_1_2 rel_expression_1
Rule 199   rel_exp_1_op -> LESS_EQUAL_THAN np_rel_expression_1_2 rel_expression_1
Rule 200   rel_exp_1_op -> > np_rel_expression_1_2 rel_expression_1
Rule 201   rel_exp_1_op -> GREATER_EQUAL_THAN np_rel_expression_1_2 rel_expression_1
Rule 202   rel_exp_1_op -> empty
Rule 203   np_rel_expression_1_1 -> <empty>
Rule 204   np_rel_expression_1_2 -> <empty>
Rule 205   exp -> term np_exp_1 exp_op
Rule 206   exp_op -> + np_exp_2 exp
Rule 207   exp_op -> - np_exp_2 exp
Rule 208   exp_op -> empty
Rule 209   np_exp_1 -> <empty>
Rule 210   np_exp_2 -> <empty>
Rule 211   term -> factor np_term_1 term_op
Rule 212   term_op -> * np_term_2 term
Rule 213   term_op -> / np_term_2 term
Rule 214   term_op -> % np_term_2 term
Rule 215   term_op -> empty
Rule 216   np_term_1 -> <empty>
Rule 217   np_term_2 -> <empty>
Rule 218   type -> INT np_type_1
Rule 219   type -> DOUBLE np_type_1
Rule 220   type -> CHAR np_type_1
Rule 221   type -> BOOL np_type_1
Rule 222   np_type_1 -> <empty>
Rule 223   var_cte -> CONST_I np_var_cte_1
Rule 224   var_cte -> CONST_F np_var_cte_2
Rule 225   var_cte -> CONST_CHAR np_var_cte_3
Rule 226   var_cte -> CONST_STRING np_var_cte_4
Rule 227   var_cte -> CONST_BOOL np_var_cte_5
Rule 228   np_var_cte_1 -> <empty>
Rule 229   np_var_cte_2 -> <empty>
Rule 230   np_var_cte_3 -> <empty>
Rule 231   np_var_cte_4 -> <empty>
Rule 232   np_var_cte_5 -> <empty>
Rule 233   factor -> fact_neg fact_body np_factor_7
Rule 234   fact_neg -> - np_factor_2
Rule 235   fact_neg -> ~ np_factor_3
Rule 236   fact_neg -> empty
Rule 237   fact_body -> ( np_factor_4 expression ) np_factor_5
Rule 238   fact_body -> var_cte np_factor_6
Rule 239   fact_body -> this ID np_factor_1 fact_id
Rule 240   fact_id -> np_factor_9 func_call
Rule 241   fact_id -> np_factor_8 id_access
Rule 242   np_factor_1 -> <empty>
Rule 243   np_factor_2 -> <empty>
Rule 244   np_factor_3 -> <empty>
Rule 245   np_factor_4 -> <empty>
Rule 246   np_factor_5 -> <empty>
Rule 247   np_factor_6 -> <empty>
Rule 248   np_factor_7 -> <empty>
Rule 249   np_factor_8 -> <empty>
Rule 250   np_factor_9 -> <empty>
Rule 251   empty -> <empty>

Terminals, with rules where they appear

%                    : 214
(                    : 102 133 153 163 168 172 173 237
)                    : 102 133 153 163 168 172 173 237
*                    : 212
+                    : 206
,                    : 39 64 91 95 100 118 124 135 175
-                    : 207 234
.                    : 72 83
/                    : 213
:                    : 42 59 64 117
;                    : 42 59 64 75 149 163 172 173 179
<                    : 198
=                    : 45 47 60 65 75 163
>                    : 200
AND                  : 185
BOOL                 : 221
CHAR                 : 220
CLASS                : 2
CONSTRUCTOR          : 104
CONST_BOOL           : 227
CONST_CHAR           : 225
CONST_F              : 224
CONST_I              : 59 64 64 124 124 125 223
CONST_STRING         : 226
DOUBLE               : 219
ELSE                 : 154
ELSEIF               : 155
EQUAL                : 192
FOR                  : 163
GREATER_EQUAL_THAN   : 201
ID                   : 2 4 38 44 57 72 75 103 107 117 121 149 163 173 239
IF                   : 152
INDEPENDENT          : 25 33
INHERITS             : 4
INT                  : 218
LESS_EQUAL_THAN      : 199
MAIN                 : 1
MAT                  : 64
NEW                  : 132
NOT_EQUAL            : 193
OR                   : 186
PRINT                : 172
PRIVATE              : 24
PRIVATE_FUNC         : 32
PUBLIC               : 23
PUBLIC_FUNC          : 31
RETURN               : 179
SCAN                 : 173
THIS                 : 83
VAR                  : 42
VEC                  : 59
VOID                 : 105
WHILE                : 168
XOR                  : 187
[                    : 59 64 87 97 122
]                    : 59 64 87 97 122
_                    : 98
error                : 
{                    : 12 93 141
}                    : 12 93 141
~                    : 235

Nonterminals, with rules where they appear

acc_dependent        : 22
acc_scope            : 22
access               : 15
ass_value            : 75
assignment           : 18 144 163
block                : 102 153 154 163 168
bstmt                : 141 142
class_asgs           : 13 18
class_blck_body      : 12
class_block          : 1 2
class_func           : 13 14 20
class_vars           : 13 16
cond_body            : 152 155
cond_else            : 153
condition            : 145
create_obj           : 49 76 89
empty                : 3 5 17 19 21 40 46 48 61 66 71 73 92 96 101 116 119 136 143 176 188 194 202 208 215 236
exp                  : 197 206 207
exp_op               : 205
expression           : 45 50 77 90 99 134 153 163 163 168 174 180 185 186 187 237
expression_op        : 184
fact_body            : 233
fact_id              : 239
fact_neg             : 233
factor               : 211
for_loop             : 161
func_call            : 132 149 240
func_param           : 133 135
func_spec            : 102
func_type            : 103
id_access            : 75 173 241
id_mat_acc           : 69 72
id_var_acc           : 69
ids                  : 39 42 59 64
in_out               : 147
loop                 : 146
m_ids                : 38
mat_access           : 97
mat_assgn            : 64
mat_elem             : 93 95
mat_more             : 94
mat_vec_access       : 70
mat_vec_index        : 97 100
matrix               : 11
matrix_exp           : 65 78
met_acc_dependent    : 30
met_acc_scope        : 30
method               : 20
method_access        : 103
method_param         : 115 118
more_class_vars      : 15
more_fpar            : 134
more_params          : 117
np_access_1          : 22
np_access_2          : 25
np_access_3          : 26
np_assignment_1      : 75
np_assignment_2      : 75
np_assignment_3      : 77
np_condition_1       : 153
np_condition_2       : 154 155
np_condition_3       : 156
np_condition_4       : 152
np_exp_1             : 205
np_exp_2             : 206 207
np_expression_1      : 184
np_expression_2      : 185 186 187
np_factor_1          : 239
np_factor_2          : 234
np_factor_3          : 235
np_factor_4          : 237
np_factor_5          : 237
np_factor_6          : 238
np_factor_7          : 233
np_factor_8          : 241
np_factor_9          : 240
np_for_loop_1        : 163
np_for_loop_2        : 163
np_for_loop_3        : 163
np_for_loop_4        : 163
np_func_call_1       : 133
np_func_call_2       : 134
np_func_call_3       : 133
np_func_call_4       : 133
np_id_access_1       : 72
np_ids_1             : 38
np_in_out_1          : 174
np_in_out_2          : 173
np_matrix_1          : 64
np_matrix_2          : 64
np_method_1          : 104
np_method_2          : 105
np_method_3          : 107
np_method_4          : 103
np_method_5          : 102
np_method_6          : 102
np_method_7          : 102
np_method_access_1   : 30
np_method_access_2   : 33
np_method_access_3   : 34
np_method_param_1    : 117
np_method_param_2    : 121
np_method_param_3    : 123
np_method_param_4    : 125
np_method_param_5    : 124
np_method_param_6    : 117
np_program_0         : 1
np_program_1         : 1 2
np_program_2         : 1
np_rel_expression_1  : 191
np_rel_expression_1_1 : 197
np_rel_expression_1_2 : 198 199 200 201
np_rel_expression_2  : 192 193
np_return_1          : 180
np_return_2          : 181
np_statement_1       : 149
np_term_1            : 211
np_term_2            : 212 213 214
np_this_1            : 83
np_this_2            : 84
np_type_1            : 218 219 220 221
np_var_cte_1         : 223
np_var_cte_2         : 224
np_var_cte_3         : 225
np_var_cte_4         : 226
np_var_cte_5         : 227
np_vars_1            : 43
np_vars_2            : 44
np_vars_3            : 42
np_vars_4            : 45
np_vars_5            : 45
np_vec_mat_type_1    : 57
np_vector_1          : 59
np_vector_2          : 59
np_while_loop_1      : 168
np_while_loop_2      : 168
np_while_loop_3      : 168
opt_method_param     : 102
param_mat            : 122
param_mat_vec        : 117
param_type           : 117
print_exp            : 172 175
print_more           : 174
prog_inh             : 2
program              : 0
program_class        : 1 2
rel_exp_1_op         : 197
rel_exp_op           : 191
rel_expression       : 184 192 193
rel_expression_1     : 191 198 199 200 201
ret_val              : 179
return               : 148
statement            : 142
term                 : 205 212 213 214
term_op              : 211
this                 : 75 149 239
type                 : 43 56 106 120
var_cte              : 238
var_decl             : 15 150
vars                 : 9
vars_assgn           : 47
vars_tp_a            : 43
vars_tp_b            : 44
vars_type            : 42
vec_assgn            : 59
vec_elem             : 87 91
vec_mat_type         : 59 64
vec_more             : 88
vec_object           : 88
vector               : 10
vector_exp           : 60 79 94
while_loop           : 162

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . np_program_0 program_class MAIN np_program_1 class_block np_program_2
    (6) np_program_0 -> .

    CLASS           reduce using rule 6 (np_program_0 -> .)
    MAIN            reduce using rule 6 (np_program_0 -> .)

    np_program_0                   shift and go to state 1
    program                        shift and go to state 2

state 1

    (1) program -> np_program_0 . program_class MAIN np_program_1 class_block np_program_2
    (2) program_class -> . CLASS ID np_program_1 prog_inh class_block program_class
    (3) program_class -> . empty
    (251) empty -> .

    CLASS           shift and go to state 3
    MAIN            reduce using rule 251 (empty -> .)

    program_class                  shift and go to state 4
    empty                          shift and go to state 5

state 2

    (0) S' -> program .



state 3

    (2) program_class -> CLASS . ID np_program_1 prog_inh class_block program_class

    ID              shift and go to state 6


state 4

    (1) program -> np_program_0 program_class . MAIN np_program_1 class_block np_program_2

    MAIN            shift and go to state 7


state 5

    (3) program_class -> empty .

    MAIN            reduce using rule 3 (program_class -> empty .)


state 6

    (2) program_class -> CLASS ID . np_program_1 prog_inh class_block program_class
    (7) np_program_1 -> .

    INHERITS        reduce using rule 7 (np_program_1 -> .)
    {               reduce using rule 7 (np_program_1 -> .)

    np_program_1                   shift and go to state 8

state 7

    (1) program -> np_program_0 program_class MAIN . np_program_1 class_block np_program_2
    (7) np_program_1 -> .

    {               reduce using rule 7 (np_program_1 -> .)

    np_program_1                   shift and go to state 9

state 8

    (2) program_class -> CLASS ID np_program_1 . prog_inh class_block program_class
    (4) prog_inh -> . INHERITS ID
    (5) prog_inh -> . empty
    (251) empty -> .

    INHERITS        shift and go to state 12
    {               reduce using rule 251 (empty -> .)

    empty                          shift and go to state 10
    prog_inh                       shift and go to state 11

state 9

    (1) program -> np_program_0 program_class MAIN np_program_1 . class_block np_program_2
    (12) class_block -> . { class_blck_body }

    {               shift and go to state 13

    class_block                    shift and go to state 14

state 10

    (5) prog_inh -> empty .

    {               reduce using rule 5 (prog_inh -> empty .)


state 11

    (2) program_class -> CLASS ID np_program_1 prog_inh . class_block program_class
    (12) class_block -> . { class_blck_body }

    {               shift and go to state 13

    class_block                    shift and go to state 15

state 12

    (4) prog_inh -> INHERITS . ID

    ID              shift and go to state 16


state 13

    (12) class_block -> { . class_blck_body }
    (13) class_blck_body -> . class_vars class_asgs class_func
    (14) class_blck_body -> . class_func
    (15) class_vars -> . access var_decl more_class_vars
    (20) class_func -> . method class_func
    (21) class_func -> . empty
    (22) access -> . acc_scope np_access_1 acc_dependent
    (102) method -> . func_spec ( np_method_5 opt_method_param ) np_method_6 block np_method_7
    (251) empty -> .
    (23) acc_scope -> . PUBLIC
    (24) acc_scope -> . PRIVATE
    (103) func_spec -> . method_access func_type ID np_method_4
    (104) func_spec -> . CONSTRUCTOR np_method_1
    (30) method_access -> . met_acc_scope np_method_access_1 met_acc_dependent
    (31) met_acc_scope -> . PUBLIC_FUNC
    (32) met_acc_scope -> . PRIVATE_FUNC

    }               reduce using rule 251 (empty -> .)
    PUBLIC          shift and go to state 17
    PRIVATE         shift and go to state 24
    CONSTRUCTOR     shift and go to state 18
    PUBLIC_FUNC     shift and go to state 25
    PRIVATE_FUNC    shift and go to state 31

    method                         shift and go to state 19
    empty                          shift and go to state 20
    class_func                     shift and go to state 21
    class_blck_body                shift and go to state 22
    access                         shift and go to state 23
    met_acc_scope                  shift and go to state 26
    method_access                  shift and go to state 27
    class_vars                     shift and go to state 28
    func_spec                      shift and go to state 29
    acc_scope                      shift and go to state 30

state 14

    (1) program -> np_program_0 program_class MAIN np_program_1 class_block . np_program_2
    (8) np_program_2 -> .

    $end            reduce using rule 8 (np_program_2 -> .)

    np_program_2                   shift and go to state 32

state 15

    (2) program_class -> CLASS ID np_program_1 prog_inh class_block . program_class
    (2) program_class -> . CLASS ID np_program_1 prog_inh class_block program_class
    (3) program_class -> . empty
    (251) empty -> .

    CLASS           shift and go to state 3
    MAIN            reduce using rule 251 (empty -> .)

    program_class                  shift and go to state 33
    empty                          shift and go to state 5

state 16

    (4) prog_inh -> INHERITS ID .

    {               reduce using rule 4 (prog_inh -> INHERITS ID .)


state 17

    (23) acc_scope -> PUBLIC .

    INDEPENDENT     reduce using rule 23 (acc_scope -> PUBLIC .)
    VAR             reduce using rule 23 (acc_scope -> PUBLIC .)
    VEC             reduce using rule 23 (acc_scope -> PUBLIC .)
    MAT             reduce using rule 23 (acc_scope -> PUBLIC .)


state 18

    (104) func_spec -> CONSTRUCTOR . np_method_1
    (108) np_method_1 -> .

    (               reduce using rule 108 (np_method_1 -> .)

    np_method_1                    shift and go to state 34

state 19

    (20) class_func -> method . class_func
    (20) class_func -> . method class_func
    (21) class_func -> . empty
    (102) method -> . func_spec ( np_method_5 opt_method_param ) np_method_6 block np_method_7
    (251) empty -> .
    (103) func_spec -> . method_access func_type ID np_method_4
    (104) func_spec -> . CONSTRUCTOR np_method_1
    (30) method_access -> . met_acc_scope np_method_access_1 met_acc_dependent
    (31) met_acc_scope -> . PUBLIC_FUNC
    (32) met_acc_scope -> . PRIVATE_FUNC

    }               reduce using rule 251 (empty -> .)
    CONSTRUCTOR     shift and go to state 18
    PUBLIC_FUNC     shift and go to state 25
    PRIVATE_FUNC    shift and go to state 31

    empty                          shift and go to state 20
    method                         shift and go to state 19
    class_func                     shift and go to state 35
    method_access                  shift and go to state 27
    func_spec                      shift and go to state 29
    met_acc_scope                  shift and go to state 26

state 20

    (21) class_func -> empty .

    }               reduce using rule 21 (class_func -> empty .)


state 21

    (14) class_blck_body -> class_func .

    }               reduce using rule 14 (class_blck_body -> class_func .)


state 22

    (12) class_block -> { class_blck_body . }

    }               shift and go to state 36


state 23

    (15) class_vars -> access . var_decl more_class_vars
    (9) var_decl -> . vars
    (10) var_decl -> . vector
    (11) var_decl -> . matrix
    (42) vars -> . VAR ids : vars_type ; np_vars_3
    (59) vector -> . VEC ids : vec_mat_type [ CONST_I ] np_vector_1 vec_assgn ; np_vector_2
    (64) matrix -> . MAT ids : vec_mat_type [ CONST_I , CONST_I ] np_matrix_1 mat_assgn ; np_matrix_2

    VAR             shift and go to state 41
    VEC             shift and go to state 37
    MAT             shift and go to state 42

    vector                         shift and go to state 40
    matrix                         shift and go to state 38
    var_decl                       shift and go to state 39
    vars                           shift and go to state 43

state 24

    (24) acc_scope -> PRIVATE .

    INDEPENDENT     reduce using rule 24 (acc_scope -> PRIVATE .)
    VAR             reduce using rule 24 (acc_scope -> PRIVATE .)
    VEC             reduce using rule 24 (acc_scope -> PRIVATE .)
    MAT             reduce using rule 24 (acc_scope -> PRIVATE .)


state 25

    (31) met_acc_scope -> PUBLIC_FUNC .

    INDEPENDENT     reduce using rule 31 (met_acc_scope -> PUBLIC_FUNC .)
    VOID            reduce using rule 31 (met_acc_scope -> PUBLIC_FUNC .)
    ID              reduce using rule 31 (met_acc_scope -> PUBLIC_FUNC .)
    INT             reduce using rule 31 (met_acc_scope -> PUBLIC_FUNC .)
    DOUBLE          reduce using rule 31 (met_acc_scope -> PUBLIC_FUNC .)
    CHAR            reduce using rule 31 (met_acc_scope -> PUBLIC_FUNC .)
    BOOL            reduce using rule 31 (met_acc_scope -> PUBLIC_FUNC .)


state 26

    (30) method_access -> met_acc_scope . np_method_access_1 met_acc_dependent
    (35) np_method_access_1 -> .

    INDEPENDENT     reduce using rule 35 (np_method_access_1 -> .)
    VOID            reduce using rule 35 (np_method_access_1 -> .)
    ID              reduce using rule 35 (np_method_access_1 -> .)
    INT             reduce using rule 35 (np_method_access_1 -> .)
    DOUBLE          reduce using rule 35 (np_method_access_1 -> .)
    CHAR            reduce using rule 35 (np_method_access_1 -> .)
    BOOL            reduce using rule 35 (np_method_access_1 -> .)

    np_method_access_1             shift and go to state 44

state 27

    (103) func_spec -> method_access . func_type ID np_method_4
    (105) func_type -> . VOID np_method_2
    (106) func_type -> . type
    (107) func_type -> . ID np_method_3
    (218) type -> . INT np_type_1
    (219) type -> . DOUBLE np_type_1
    (220) type -> . CHAR np_type_1
    (221) type -> . BOOL np_type_1

    VOID            shift and go to state 50
    ID              shift and go to state 52
    INT             shift and go to state 46
    DOUBLE          shift and go to state 47
    CHAR            shift and go to state 45
    BOOL            shift and go to state 48

    type                           shift and go to state 49
    func_type                      shift and go to state 51

state 28

    (13) class_blck_body -> class_vars . class_asgs class_func
    (18) class_asgs -> . assignment class_asgs
    (19) class_asgs -> . empty
    (75) assignment -> . this ID np_assignment_1 id_access = np_assignment_2 ass_value ;
    (251) empty -> .
    (83) this -> . THIS np_this_1 .
    (84) this -> . np_this_2
    (86) np_this_2 -> .

    CONSTRUCTOR     reduce using rule 251 (empty -> .)
    PUBLIC_FUNC     reduce using rule 251 (empty -> .)
    PRIVATE_FUNC    reduce using rule 251 (empty -> .)
    }               reduce using rule 251 (empty -> .)
    THIS            shift and go to state 54
    ID              reduce using rule 86 (np_this_2 -> .)

    assignment                     shift and go to state 53
    this                           shift and go to state 55
    np_this_2                      shift and go to state 56
    empty                          shift and go to state 57
    class_asgs                     shift and go to state 58

state 29

    (102) method -> func_spec . ( np_method_5 opt_method_param ) np_method_6 block np_method_7

    (               shift and go to state 59


state 30

    (22) access -> acc_scope . np_access_1 acc_dependent
    (27) np_access_1 -> .

    INDEPENDENT     reduce using rule 27 (np_access_1 -> .)
    VAR             reduce using rule 27 (np_access_1 -> .)
    VEC             reduce using rule 27 (np_access_1 -> .)
    MAT             reduce using rule 27 (np_access_1 -> .)

    np_access_1                    shift and go to state 60

state 31

    (32) met_acc_scope -> PRIVATE_FUNC .

    INDEPENDENT     reduce using rule 32 (met_acc_scope -> PRIVATE_FUNC .)
    VOID            reduce using rule 32 (met_acc_scope -> PRIVATE_FUNC .)
    ID              reduce using rule 32 (met_acc_scope -> PRIVATE_FUNC .)
    INT             reduce using rule 32 (met_acc_scope -> PRIVATE_FUNC .)
    DOUBLE          reduce using rule 32 (met_acc_scope -> PRIVATE_FUNC .)
    CHAR            reduce using rule 32 (met_acc_scope -> PRIVATE_FUNC .)
    BOOL            reduce using rule 32 (met_acc_scope -> PRIVATE_FUNC .)


state 32

    (1) program -> np_program_0 program_class MAIN np_program_1 class_block np_program_2 .

    $end            reduce using rule 1 (program -> np_program_0 program_class MAIN np_program_1 class_block np_program_2 .)


state 33

    (2) program_class -> CLASS ID np_program_1 prog_inh class_block program_class .

    MAIN            reduce using rule 2 (program_class -> CLASS ID np_program_1 prog_inh class_block program_class .)


state 34

    (104) func_spec -> CONSTRUCTOR np_method_1 .

    (               reduce using rule 104 (func_spec -> CONSTRUCTOR np_method_1 .)


state 35

    (20) class_func -> method class_func .

    }               reduce using rule 20 (class_func -> method class_func .)


state 36

    (12) class_block -> { class_blck_body } .

    CLASS           reduce using rule 12 (class_block -> { class_blck_body } .)
    MAIN            reduce using rule 12 (class_block -> { class_blck_body } .)
    $end            reduce using rule 12 (class_block -> { class_blck_body } .)


state 37

    (59) vector -> VEC . ids : vec_mat_type [ CONST_I ] np_vector_1 vec_assgn ; np_vector_2
    (38) ids -> . ID np_ids_1 m_ids

    ID              shift and go to state 62

    ids                            shift and go to state 61

state 38

    (11) var_decl -> matrix .

    PUBLIC          reduce using rule 11 (var_decl -> matrix .)
    PRIVATE         reduce using rule 11 (var_decl -> matrix .)
    THIS            reduce using rule 11 (var_decl -> matrix .)
    CONSTRUCTOR     reduce using rule 11 (var_decl -> matrix .)
    PUBLIC_FUNC     reduce using rule 11 (var_decl -> matrix .)
    PRIVATE_FUNC    reduce using rule 11 (var_decl -> matrix .)
    ID              reduce using rule 11 (var_decl -> matrix .)
    }               reduce using rule 11 (var_decl -> matrix .)
    IF              reduce using rule 11 (var_decl -> matrix .)
    PRINT           reduce using rule 11 (var_decl -> matrix .)
    SCAN            reduce using rule 11 (var_decl -> matrix .)
    RETURN          reduce using rule 11 (var_decl -> matrix .)
    FOR             reduce using rule 11 (var_decl -> matrix .)
    WHILE           reduce using rule 11 (var_decl -> matrix .)
    VAR             reduce using rule 11 (var_decl -> matrix .)
    VEC             reduce using rule 11 (var_decl -> matrix .)
    MAT             reduce using rule 11 (var_decl -> matrix .)


state 39

    (15) class_vars -> access var_decl . more_class_vars
    (16) more_class_vars -> . class_vars
    (17) more_class_vars -> . empty
    (15) class_vars -> . access var_decl more_class_vars
    (251) empty -> .
    (22) access -> . acc_scope np_access_1 acc_dependent
    (23) acc_scope -> . PUBLIC
    (24) acc_scope -> . PRIVATE

    THIS            reduce using rule 251 (empty -> .)
    CONSTRUCTOR     reduce using rule 251 (empty -> .)
    PUBLIC_FUNC     reduce using rule 251 (empty -> .)
    PRIVATE_FUNC    reduce using rule 251 (empty -> .)
    ID              reduce using rule 251 (empty -> .)
    }               reduce using rule 251 (empty -> .)
    PUBLIC          shift and go to state 17
    PRIVATE         shift and go to state 24

    access                         shift and go to state 23
    class_vars                     shift and go to state 63
    empty                          shift and go to state 64
    acc_scope                      shift and go to state 30
    more_class_vars                shift and go to state 65

state 40

    (10) var_decl -> vector .

    PUBLIC          reduce using rule 10 (var_decl -> vector .)
    PRIVATE         reduce using rule 10 (var_decl -> vector .)
    THIS            reduce using rule 10 (var_decl -> vector .)
    CONSTRUCTOR     reduce using rule 10 (var_decl -> vector .)
    PUBLIC_FUNC     reduce using rule 10 (var_decl -> vector .)
    PRIVATE_FUNC    reduce using rule 10 (var_decl -> vector .)
    ID              reduce using rule 10 (var_decl -> vector .)
    }               reduce using rule 10 (var_decl -> vector .)
    IF              reduce using rule 10 (var_decl -> vector .)
    PRINT           reduce using rule 10 (var_decl -> vector .)
    SCAN            reduce using rule 10 (var_decl -> vector .)
    RETURN          reduce using rule 10 (var_decl -> vector .)
    FOR             reduce using rule 10 (var_decl -> vector .)
    WHILE           reduce using rule 10 (var_decl -> vector .)
    VAR             reduce using rule 10 (var_decl -> vector .)
    VEC             reduce using rule 10 (var_decl -> vector .)
    MAT             reduce using rule 10 (var_decl -> vector .)


state 41

    (42) vars -> VAR . ids : vars_type ; np_vars_3
    (38) ids -> . ID np_ids_1 m_ids

    ID              shift and go to state 62

    ids                            shift and go to state 66

state 42

    (64) matrix -> MAT . ids : vec_mat_type [ CONST_I , CONST_I ] np_matrix_1 mat_assgn ; np_matrix_2
    (38) ids -> . ID np_ids_1 m_ids

    ID              shift and go to state 62

    ids                            shift and go to state 67

state 43

    (9) var_decl -> vars .

    PUBLIC          reduce using rule 9 (var_decl -> vars .)
    PRIVATE         reduce using rule 9 (var_decl -> vars .)
    THIS            reduce using rule 9 (var_decl -> vars .)
    CONSTRUCTOR     reduce using rule 9 (var_decl -> vars .)
    PUBLIC_FUNC     reduce using rule 9 (var_decl -> vars .)
    PRIVATE_FUNC    reduce using rule 9 (var_decl -> vars .)
    ID              reduce using rule 9 (var_decl -> vars .)
    }               reduce using rule 9 (var_decl -> vars .)
    IF              reduce using rule 9 (var_decl -> vars .)
    PRINT           reduce using rule 9 (var_decl -> vars .)
    SCAN            reduce using rule 9 (var_decl -> vars .)
    RETURN          reduce using rule 9 (var_decl -> vars .)
    FOR             reduce using rule 9 (var_decl -> vars .)
    WHILE           reduce using rule 9 (var_decl -> vars .)
    VAR             reduce using rule 9 (var_decl -> vars .)
    VEC             reduce using rule 9 (var_decl -> vars .)
    MAT             reduce using rule 9 (var_decl -> vars .)


state 44

    (30) method_access -> met_acc_scope np_method_access_1 . met_acc_dependent
    (33) met_acc_dependent -> . INDEPENDENT np_method_access_2
    (34) met_acc_dependent -> . np_method_access_3
    (37) np_method_access_3 -> .

    INDEPENDENT     shift and go to state 69
    VOID            reduce using rule 37 (np_method_access_3 -> .)
    ID              reduce using rule 37 (np_method_access_3 -> .)
    INT             reduce using rule 37 (np_method_access_3 -> .)
    DOUBLE          reduce using rule 37 (np_method_access_3 -> .)
    CHAR            reduce using rule 37 (np_method_access_3 -> .)
    BOOL            reduce using rule 37 (np_method_access_3 -> .)

    met_acc_dependent              shift and go to state 68
    np_method_access_3             shift and go to state 70

state 45

    (220) type -> CHAR . np_type_1
    (222) np_type_1 -> .

    ID              reduce using rule 222 (np_type_1 -> .)
    [               reduce using rule 222 (np_type_1 -> .)
    =               reduce using rule 222 (np_type_1 -> .)
    ;               reduce using rule 222 (np_type_1 -> .)
    ,               reduce using rule 222 (np_type_1 -> .)
    )               reduce using rule 222 (np_type_1 -> .)

    np_type_1                      shift and go to state 71

state 46

    (218) type -> INT . np_type_1
    (222) np_type_1 -> .

    ID              reduce using rule 222 (np_type_1 -> .)
    [               reduce using rule 222 (np_type_1 -> .)
    =               reduce using rule 222 (np_type_1 -> .)
    ;               reduce using rule 222 (np_type_1 -> .)
    ,               reduce using rule 222 (np_type_1 -> .)
    )               reduce using rule 222 (np_type_1 -> .)

    np_type_1                      shift and go to state 72

state 47

    (219) type -> DOUBLE . np_type_1
    (222) np_type_1 -> .

    ID              reduce using rule 222 (np_type_1 -> .)
    [               reduce using rule 222 (np_type_1 -> .)
    =               reduce using rule 222 (np_type_1 -> .)
    ;               reduce using rule 222 (np_type_1 -> .)
    ,               reduce using rule 222 (np_type_1 -> .)
    )               reduce using rule 222 (np_type_1 -> .)

    np_type_1                      shift and go to state 73

state 48

    (221) type -> BOOL . np_type_1
    (222) np_type_1 -> .

    ID              reduce using rule 222 (np_type_1 -> .)
    [               reduce using rule 222 (np_type_1 -> .)
    =               reduce using rule 222 (np_type_1 -> .)
    ;               reduce using rule 222 (np_type_1 -> .)
    ,               reduce using rule 222 (np_type_1 -> .)
    )               reduce using rule 222 (np_type_1 -> .)

    np_type_1                      shift and go to state 74

state 49

    (106) func_type -> type .

    ID              reduce using rule 106 (func_type -> type .)


state 50

    (105) func_type -> VOID . np_method_2
    (109) np_method_2 -> .

    ID              reduce using rule 109 (np_method_2 -> .)

    np_method_2                    shift and go to state 75

state 51

    (103) func_spec -> method_access func_type . ID np_method_4

    ID              shift and go to state 76


state 52

    (107) func_type -> ID . np_method_3
    (110) np_method_3 -> .

    ID              reduce using rule 110 (np_method_3 -> .)

    np_method_3                    shift and go to state 77

state 53

    (18) class_asgs -> assignment . class_asgs
    (18) class_asgs -> . assignment class_asgs
    (19) class_asgs -> . empty
    (75) assignment -> . this ID np_assignment_1 id_access = np_assignment_2 ass_value ;
    (251) empty -> .
    (83) this -> . THIS np_this_1 .
    (84) this -> . np_this_2
    (86) np_this_2 -> .

    CONSTRUCTOR     reduce using rule 251 (empty -> .)
    PUBLIC_FUNC     reduce using rule 251 (empty -> .)
    PRIVATE_FUNC    reduce using rule 251 (empty -> .)
    }               reduce using rule 251 (empty -> .)
    THIS            shift and go to state 54
    ID              reduce using rule 86 (np_this_2 -> .)

    np_this_2                      shift and go to state 56
    assignment                     shift and go to state 53
    class_asgs                     shift and go to state 78
    this                           shift and go to state 55
    empty                          shift and go to state 57

state 54

    (83) this -> THIS . np_this_1 .
    (85) np_this_1 -> .

    .               reduce using rule 85 (np_this_1 -> .)

    np_this_1                      shift and go to state 79

state 55

    (75) assignment -> this . ID np_assignment_1 id_access = np_assignment_2 ass_value ;

    ID              shift and go to state 80


state 56

    (84) this -> np_this_2 .

    ID              reduce using rule 84 (this -> np_this_2 .)


state 57

    (19) class_asgs -> empty .

    CONSTRUCTOR     reduce using rule 19 (class_asgs -> empty .)
    PUBLIC_FUNC     reduce using rule 19 (class_asgs -> empty .)
    PRIVATE_FUNC    reduce using rule 19 (class_asgs -> empty .)
    }               reduce using rule 19 (class_asgs -> empty .)


state 58

    (13) class_blck_body -> class_vars class_asgs . class_func
    (20) class_func -> . method class_func
    (21) class_func -> . empty
    (102) method -> . func_spec ( np_method_5 opt_method_param ) np_method_6 block np_method_7
    (251) empty -> .
    (103) func_spec -> . method_access func_type ID np_method_4
    (104) func_spec -> . CONSTRUCTOR np_method_1
    (30) method_access -> . met_acc_scope np_method_access_1 met_acc_dependent
    (31) met_acc_scope -> . PUBLIC_FUNC
    (32) met_acc_scope -> . PRIVATE_FUNC

    }               reduce using rule 251 (empty -> .)
    CONSTRUCTOR     shift and go to state 18
    PUBLIC_FUNC     shift and go to state 25
    PRIVATE_FUNC    shift and go to state 31

    empty                          shift and go to state 20
    method                         shift and go to state 19
    class_func                     shift and go to state 81
    method_access                  shift and go to state 27
    func_spec                      shift and go to state 29
    met_acc_scope                  shift and go to state 26

state 59

    (102) method -> func_spec ( . np_method_5 opt_method_param ) np_method_6 block np_method_7
    (112) np_method_5 -> .

    ID              reduce using rule 112 (np_method_5 -> .)
    )               reduce using rule 112 (np_method_5 -> .)

    np_method_5                    shift and go to state 82

state 60

    (22) access -> acc_scope np_access_1 . acc_dependent
    (25) acc_dependent -> . INDEPENDENT np_access_2
    (26) acc_dependent -> . np_access_3
    (29) np_access_3 -> .

    INDEPENDENT     shift and go to state 84
    VAR             reduce using rule 29 (np_access_3 -> .)
    VEC             reduce using rule 29 (np_access_3 -> .)
    MAT             reduce using rule 29 (np_access_3 -> .)

    np_access_3                    shift and go to state 85
    acc_dependent                  shift and go to state 83

state 61

    (59) vector -> VEC ids . : vec_mat_type [ CONST_I ] np_vector_1 vec_assgn ; np_vector_2

    :               shift and go to state 86


state 62

    (38) ids -> ID . np_ids_1 m_ids
    (41) np_ids_1 -> .

    ,               reduce using rule 41 (np_ids_1 -> .)
    :               reduce using rule 41 (np_ids_1 -> .)

    np_ids_1                       shift and go to state 87

state 63

    (16) more_class_vars -> class_vars .

    THIS            reduce using rule 16 (more_class_vars -> class_vars .)
    CONSTRUCTOR     reduce using rule 16 (more_class_vars -> class_vars .)
    PUBLIC_FUNC     reduce using rule 16 (more_class_vars -> class_vars .)
    PRIVATE_FUNC    reduce using rule 16 (more_class_vars -> class_vars .)
    ID              reduce using rule 16 (more_class_vars -> class_vars .)
    }               reduce using rule 16 (more_class_vars -> class_vars .)


state 64

    (17) more_class_vars -> empty .

    THIS            reduce using rule 17 (more_class_vars -> empty .)
    CONSTRUCTOR     reduce using rule 17 (more_class_vars -> empty .)
    PUBLIC_FUNC     reduce using rule 17 (more_class_vars -> empty .)
    PRIVATE_FUNC    reduce using rule 17 (more_class_vars -> empty .)
    ID              reduce using rule 17 (more_class_vars -> empty .)
    }               reduce using rule 17 (more_class_vars -> empty .)


state 65

    (15) class_vars -> access var_decl more_class_vars .

    THIS            reduce using rule 15 (class_vars -> access var_decl more_class_vars .)
    CONSTRUCTOR     reduce using rule 15 (class_vars -> access var_decl more_class_vars .)
    PUBLIC_FUNC     reduce using rule 15 (class_vars -> access var_decl more_class_vars .)
    PRIVATE_FUNC    reduce using rule 15 (class_vars -> access var_decl more_class_vars .)
    ID              reduce using rule 15 (class_vars -> access var_decl more_class_vars .)
    }               reduce using rule 15 (class_vars -> access var_decl more_class_vars .)


state 66

    (42) vars -> VAR ids . : vars_type ; np_vars_3

    :               shift and go to state 88


state 67

    (64) matrix -> MAT ids . : vec_mat_type [ CONST_I , CONST_I ] np_matrix_1 mat_assgn ; np_matrix_2

    :               shift and go to state 89


state 68

    (30) method_access -> met_acc_scope np_method_access_1 met_acc_dependent .

    VOID            reduce using rule 30 (method_access -> met_acc_scope np_method_access_1 met_acc_dependent .)
    ID              reduce using rule 30 (method_access -> met_acc_scope np_method_access_1 met_acc_dependent .)
    INT             reduce using rule 30 (method_access -> met_acc_scope np_method_access_1 met_acc_dependent .)
    DOUBLE          reduce using rule 30 (method_access -> met_acc_scope np_method_access_1 met_acc_dependent .)
    CHAR            reduce using rule 30 (method_access -> met_acc_scope np_method_access_1 met_acc_dependent .)
    BOOL            reduce using rule 30 (method_access -> met_acc_scope np_method_access_1 met_acc_dependent .)


state 69

    (33) met_acc_dependent -> INDEPENDENT . np_method_access_2
    (36) np_method_access_2 -> .

    VOID            reduce using rule 36 (np_method_access_2 -> .)
    ID              reduce using rule 36 (np_method_access_2 -> .)
    INT             reduce using rule 36 (np_method_access_2 -> .)
    DOUBLE          reduce using rule 36 (np_method_access_2 -> .)
    CHAR            reduce using rule 36 (np_method_access_2 -> .)
    BOOL            reduce using rule 36 (np_method_access_2 -> .)

    np_method_access_2             shift and go to state 90

state 70

    (34) met_acc_dependent -> np_method_access_3 .

    VOID            reduce using rule 34 (met_acc_dependent -> np_method_access_3 .)
    ID              reduce using rule 34 (met_acc_dependent -> np_method_access_3 .)
    INT             reduce using rule 34 (met_acc_dependent -> np_method_access_3 .)
    DOUBLE          reduce using rule 34 (met_acc_dependent -> np_method_access_3 .)
    CHAR            reduce using rule 34 (met_acc_dependent -> np_method_access_3 .)
    BOOL            reduce using rule 34 (met_acc_dependent -> np_method_access_3 .)


state 71

    (220) type -> CHAR np_type_1 .

    =               reduce using rule 220 (type -> CHAR np_type_1 .)
    ;               reduce using rule 220 (type -> CHAR np_type_1 .)
    [               reduce using rule 220 (type -> CHAR np_type_1 .)
    ID              reduce using rule 220 (type -> CHAR np_type_1 .)
    ,               reduce using rule 220 (type -> CHAR np_type_1 .)
    )               reduce using rule 220 (type -> CHAR np_type_1 .)


state 72

    (218) type -> INT np_type_1 .

    =               reduce using rule 218 (type -> INT np_type_1 .)
    ;               reduce using rule 218 (type -> INT np_type_1 .)
    [               reduce using rule 218 (type -> INT np_type_1 .)
    ID              reduce using rule 218 (type -> INT np_type_1 .)
    ,               reduce using rule 218 (type -> INT np_type_1 .)
    )               reduce using rule 218 (type -> INT np_type_1 .)


state 73

    (219) type -> DOUBLE np_type_1 .

    =               reduce using rule 219 (type -> DOUBLE np_type_1 .)
    ;               reduce using rule 219 (type -> DOUBLE np_type_1 .)
    [               reduce using rule 219 (type -> DOUBLE np_type_1 .)
    ID              reduce using rule 219 (type -> DOUBLE np_type_1 .)
    ,               reduce using rule 219 (type -> DOUBLE np_type_1 .)
    )               reduce using rule 219 (type -> DOUBLE np_type_1 .)


state 74

    (221) type -> BOOL np_type_1 .

    =               reduce using rule 221 (type -> BOOL np_type_1 .)
    ;               reduce using rule 221 (type -> BOOL np_type_1 .)
    [               reduce using rule 221 (type -> BOOL np_type_1 .)
    ID              reduce using rule 221 (type -> BOOL np_type_1 .)
    ,               reduce using rule 221 (type -> BOOL np_type_1 .)
    )               reduce using rule 221 (type -> BOOL np_type_1 .)


state 75

    (105) func_type -> VOID np_method_2 .

    ID              reduce using rule 105 (func_type -> VOID np_method_2 .)


state 76

    (103) func_spec -> method_access func_type ID . np_method_4
    (111) np_method_4 -> .

    (               reduce using rule 111 (np_method_4 -> .)

    np_method_4                    shift and go to state 91

state 77

    (107) func_type -> ID np_method_3 .

    ID              reduce using rule 107 (func_type -> ID np_method_3 .)


state 78

    (18) class_asgs -> assignment class_asgs .

    CONSTRUCTOR     reduce using rule 18 (class_asgs -> assignment class_asgs .)
    PUBLIC_FUNC     reduce using rule 18 (class_asgs -> assignment class_asgs .)
    PRIVATE_FUNC    reduce using rule 18 (class_asgs -> assignment class_asgs .)
    }               reduce using rule 18 (class_asgs -> assignment class_asgs .)


state 79

    (83) this -> THIS np_this_1 . .

    .               shift and go to state 92


state 80

    (75) assignment -> this ID . np_assignment_1 id_access = np_assignment_2 ass_value ;
    (80) np_assignment_1 -> .

    [               reduce using rule 80 (np_assignment_1 -> .)
    =               reduce using rule 80 (np_assignment_1 -> .)
    .               reduce using rule 80 (np_assignment_1 -> .)

    np_assignment_1                shift and go to state 93

state 81

    (13) class_blck_body -> class_vars class_asgs class_func .

    }               reduce using rule 13 (class_blck_body -> class_vars class_asgs class_func .)


state 82

    (102) method -> func_spec ( np_method_5 . opt_method_param ) np_method_6 block np_method_7
    (115) opt_method_param -> . method_param
    (116) opt_method_param -> . empty
    (117) method_param -> . ID np_method_param_1 : param_type param_mat_vec np_method_param_6 more_params
    (251) empty -> .

    ID              shift and go to state 97
    )               reduce using rule 251 (empty -> .)

    empty                          shift and go to state 95
    method_param                   shift and go to state 96
    opt_method_param               shift and go to state 94

state 83

    (22) access -> acc_scope np_access_1 acc_dependent .

    VAR             reduce using rule 22 (access -> acc_scope np_access_1 acc_dependent .)
    VEC             reduce using rule 22 (access -> acc_scope np_access_1 acc_dependent .)
    MAT             reduce using rule 22 (access -> acc_scope np_access_1 acc_dependent .)


state 84

    (25) acc_dependent -> INDEPENDENT . np_access_2
    (28) np_access_2 -> .

    VAR             reduce using rule 28 (np_access_2 -> .)
    VEC             reduce using rule 28 (np_access_2 -> .)
    MAT             reduce using rule 28 (np_access_2 -> .)

    np_access_2                    shift and go to state 98

state 85

    (26) acc_dependent -> np_access_3 .

    VAR             reduce using rule 26 (acc_dependent -> np_access_3 .)
    VEC             reduce using rule 26 (acc_dependent -> np_access_3 .)
    MAT             reduce using rule 26 (acc_dependent -> np_access_3 .)


state 86

    (59) vector -> VEC ids : . vec_mat_type [ CONST_I ] np_vector_1 vec_assgn ; np_vector_2
    (56) vec_mat_type -> . type
    (57) vec_mat_type -> . ID np_vec_mat_type_1
    (218) type -> . INT np_type_1
    (219) type -> . DOUBLE np_type_1
    (220) type -> . CHAR np_type_1
    (221) type -> . BOOL np_type_1

    ID              shift and go to state 101
    INT             shift and go to state 46
    DOUBLE          shift and go to state 47
    CHAR            shift and go to state 45
    BOOL            shift and go to state 48

    type                           shift and go to state 100
    vec_mat_type                   shift and go to state 99

state 87

    (38) ids -> ID np_ids_1 . m_ids
    (39) m_ids -> . , ids
    (40) m_ids -> . empty
    (251) empty -> .

    ,               shift and go to state 104
    :               reduce using rule 251 (empty -> .)

    empty                          shift and go to state 102
    m_ids                          shift and go to state 103

state 88

    (42) vars -> VAR ids : . vars_type ; np_vars_3
    (43) vars_type -> . type np_vars_1 vars_tp_a
    (44) vars_type -> . ID np_vars_2 vars_tp_b
    (218) type -> . INT np_type_1
    (219) type -> . DOUBLE np_type_1
    (220) type -> . CHAR np_type_1
    (221) type -> . BOOL np_type_1

    ID              shift and go to state 107
    INT             shift and go to state 46
    DOUBLE          shift and go to state 47
    CHAR            shift and go to state 45
    BOOL            shift and go to state 48

    type                           shift and go to state 106
    vars_type                      shift and go to state 105

state 89

    (64) matrix -> MAT ids : . vec_mat_type [ CONST_I , CONST_I ] np_matrix_1 mat_assgn ; np_matrix_2
    (56) vec_mat_type -> . type
    (57) vec_mat_type -> . ID np_vec_mat_type_1
    (218) type -> . INT np_type_1
    (219) type -> . DOUBLE np_type_1
    (220) type -> . CHAR np_type_1
    (221) type -> . BOOL np_type_1

    ID              shift and go to state 101
    INT             shift and go to state 46
    DOUBLE          shift and go to state 47
    CHAR            shift and go to state 45
    BOOL            shift and go to state 48

    type                           shift and go to state 100
    vec_mat_type                   shift and go to state 108

state 90

    (33) met_acc_dependent -> INDEPENDENT np_method_access_2 .

    VOID            reduce using rule 33 (met_acc_dependent -> INDEPENDENT np_method_access_2 .)
    ID              reduce using rule 33 (met_acc_dependent -> INDEPENDENT np_method_access_2 .)
    INT             reduce using rule 33 (met_acc_dependent -> INDEPENDENT np_method_access_2 .)
    DOUBLE          reduce using rule 33 (met_acc_dependent -> INDEPENDENT np_method_access_2 .)
    CHAR            reduce using rule 33 (met_acc_dependent -> INDEPENDENT np_method_access_2 .)
    BOOL            reduce using rule 33 (met_acc_dependent -> INDEPENDENT np_method_access_2 .)


state 91

    (103) func_spec -> method_access func_type ID np_method_4 .

    (               reduce using rule 103 (func_spec -> method_access func_type ID np_method_4 .)


state 92

    (83) this -> THIS np_this_1 . .

    ID              reduce using rule 83 (this -> THIS np_this_1 . .)


state 93

    (75) assignment -> this ID np_assignment_1 . id_access = np_assignment_2 ass_value ;
    (69) id_access -> . id_mat_acc id_var_acc
    (70) id_mat_acc -> . mat_vec_access
    (71) id_mat_acc -> . empty
    (97) mat_vec_access -> . [ mat_vec_index mat_access ]
    (251) empty -> .

    [               shift and go to state 109
    .               reduce using rule 251 (empty -> .)
    =               reduce using rule 251 (empty -> .)

    mat_vec_access                 shift and go to state 111
    id_mat_acc                     shift and go to state 112
    empty                          shift and go to state 110
    id_access                      shift and go to state 113

state 94

    (102) method -> func_spec ( np_method_5 opt_method_param . ) np_method_6 block np_method_7

    )               shift and go to state 114


state 95

    (116) opt_method_param -> empty .

    )               reduce using rule 116 (opt_method_param -> empty .)


state 96

    (115) opt_method_param -> method_param .

    )               reduce using rule 115 (opt_method_param -> method_param .)


state 97

    (117) method_param -> ID . np_method_param_1 : param_type param_mat_vec np_method_param_6 more_params
    (126) np_method_param_1 -> .

    :               reduce using rule 126 (np_method_param_1 -> .)

    np_method_param_1              shift and go to state 115

state 98

    (25) acc_dependent -> INDEPENDENT np_access_2 .

    VAR             reduce using rule 25 (acc_dependent -> INDEPENDENT np_access_2 .)
    VEC             reduce using rule 25 (acc_dependent -> INDEPENDENT np_access_2 .)
    MAT             reduce using rule 25 (acc_dependent -> INDEPENDENT np_access_2 .)


state 99

    (59) vector -> VEC ids : vec_mat_type . [ CONST_I ] np_vector_1 vec_assgn ; np_vector_2

    [               shift and go to state 116


state 100

    (56) vec_mat_type -> type .

    [               reduce using rule 56 (vec_mat_type -> type .)


state 101

    (57) vec_mat_type -> ID . np_vec_mat_type_1
    (58) np_vec_mat_type_1 -> .

    [               reduce using rule 58 (np_vec_mat_type_1 -> .)

    np_vec_mat_type_1              shift and go to state 117

state 102

    (40) m_ids -> empty .

    :               reduce using rule 40 (m_ids -> empty .)


state 103

    (38) ids -> ID np_ids_1 m_ids .

    :               reduce using rule 38 (ids -> ID np_ids_1 m_ids .)


state 104

    (39) m_ids -> , . ids
    (38) ids -> . ID np_ids_1 m_ids

    ID              shift and go to state 62

    ids                            shift and go to state 118

state 105

    (42) vars -> VAR ids : vars_type . ; np_vars_3

    ;               shift and go to state 119


state 106

    (43) vars_type -> type . np_vars_1 vars_tp_a
    (51) np_vars_1 -> .

    =               reduce using rule 51 (np_vars_1 -> .)
    ;               reduce using rule 51 (np_vars_1 -> .)

    np_vars_1                      shift and go to state 120

state 107

    (44) vars_type -> ID . np_vars_2 vars_tp_b
    (52) np_vars_2 -> .

    =               reduce using rule 52 (np_vars_2 -> .)
    ;               reduce using rule 52 (np_vars_2 -> .)

    np_vars_2                      shift and go to state 121

state 108

    (64) matrix -> MAT ids : vec_mat_type . [ CONST_I , CONST_I ] np_matrix_1 mat_assgn ; np_matrix_2

    [               shift and go to state 122


state 109

    (97) mat_vec_access -> [ . mat_vec_index mat_access ]
    (98) mat_vec_index -> . _
    (99) mat_vec_index -> . expression
    (184) expression -> . rel_expression np_expression_1 expression_op
    (191) rel_expression -> . rel_expression_1 np_rel_expression_1 rel_exp_op
    (197) rel_expression_1 -> . exp np_rel_expression_1_1 rel_exp_1_op
    (205) exp -> . term np_exp_1 exp_op
    (211) term -> . factor np_term_1 term_op
    (233) factor -> . fact_neg fact_body np_factor_7
    (234) fact_neg -> . - np_factor_2
    (235) fact_neg -> . ~ np_factor_3
    (236) fact_neg -> . empty
    (251) empty -> .

    _               shift and go to state 133
    -               shift and go to state 130
    ~               shift and go to state 123
    (               reduce using rule 251 (empty -> .)
    CONST_I         reduce using rule 251 (empty -> .)
    CONST_F         reduce using rule 251 (empty -> .)
    CONST_CHAR      reduce using rule 251 (empty -> .)
    CONST_STRING    reduce using rule 251 (empty -> .)
    CONST_BOOL      reduce using rule 251 (empty -> .)
    THIS            reduce using rule 251 (empty -> .)
    ID              reduce using rule 251 (empty -> .)

    expression                     shift and go to state 124
    empty                          shift and go to state 125
    mat_vec_index                  shift and go to state 126
    term                           shift and go to state 127
    fact_neg                       shift and go to state 129
    factor                         shift and go to state 134
    rel_expression                 shift and go to state 131
    exp                            shift and go to state 132
    rel_expression_1               shift and go to state 128

state 110

    (71) id_mat_acc -> empty .

    .               reduce using rule 71 (id_mat_acc -> empty .)
    )               reduce using rule 71 (id_mat_acc -> empty .)
    *               reduce using rule 71 (id_mat_acc -> empty .)
    /               reduce using rule 71 (id_mat_acc -> empty .)
    %               reduce using rule 71 (id_mat_acc -> empty .)
    +               reduce using rule 71 (id_mat_acc -> empty .)
    -               reduce using rule 71 (id_mat_acc -> empty .)
    <               reduce using rule 71 (id_mat_acc -> empty .)
    LESS_EQUAL_THAN reduce using rule 71 (id_mat_acc -> empty .)
    >               reduce using rule 71 (id_mat_acc -> empty .)
    GREATER_EQUAL_THAN reduce using rule 71 (id_mat_acc -> empty .)
    EQUAL           reduce using rule 71 (id_mat_acc -> empty .)
    NOT_EQUAL       reduce using rule 71 (id_mat_acc -> empty .)
    AND             reduce using rule 71 (id_mat_acc -> empty .)
    OR              reduce using rule 71 (id_mat_acc -> empty .)
    XOR             reduce using rule 71 (id_mat_acc -> empty .)
    ,               reduce using rule 71 (id_mat_acc -> empty .)
    ]               reduce using rule 71 (id_mat_acc -> empty .)
    ;               reduce using rule 71 (id_mat_acc -> empty .)
    =               reduce using rule 71 (id_mat_acc -> empty .)


state 111

    (70) id_mat_acc -> mat_vec_access .

    .               reduce using rule 70 (id_mat_acc -> mat_vec_access .)
    )               reduce using rule 70 (id_mat_acc -> mat_vec_access .)
    *               reduce using rule 70 (id_mat_acc -> mat_vec_access .)
    /               reduce using rule 70 (id_mat_acc -> mat_vec_access .)
    %               reduce using rule 70 (id_mat_acc -> mat_vec_access .)
    +               reduce using rule 70 (id_mat_acc -> mat_vec_access .)
    -               reduce using rule 70 (id_mat_acc -> mat_vec_access .)
    <               reduce using rule 70 (id_mat_acc -> mat_vec_access .)
    LESS_EQUAL_THAN reduce using rule 70 (id_mat_acc -> mat_vec_access .)
    >               reduce using rule 70 (id_mat_acc -> mat_vec_access .)
    GREATER_EQUAL_THAN reduce using rule 70 (id_mat_acc -> mat_vec_access .)
    EQUAL           reduce using rule 70 (id_mat_acc -> mat_vec_access .)
    NOT_EQUAL       reduce using rule 70 (id_mat_acc -> mat_vec_access .)
    AND             reduce using rule 70 (id_mat_acc -> mat_vec_access .)
    OR              reduce using rule 70 (id_mat_acc -> mat_vec_access .)
    XOR             reduce using rule 70 (id_mat_acc -> mat_vec_access .)
    ,               reduce using rule 70 (id_mat_acc -> mat_vec_access .)
    ]               reduce using rule 70 (id_mat_acc -> mat_vec_access .)
    ;               reduce using rule 70 (id_mat_acc -> mat_vec_access .)
    =               reduce using rule 70 (id_mat_acc -> mat_vec_access .)


state 112

    (69) id_access -> id_mat_acc . id_var_acc
    (72) id_var_acc -> . . np_id_access_1 ID id_mat_acc
    (73) id_var_acc -> . empty
    (251) empty -> .

    .               shift and go to state 137
    =               reduce using rule 251 (empty -> .)
    *               reduce using rule 251 (empty -> .)
    /               reduce using rule 251 (empty -> .)
    %               reduce using rule 251 (empty -> .)
    +               reduce using rule 251 (empty -> .)
    -               reduce using rule 251 (empty -> .)
    <               reduce using rule 251 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 251 (empty -> .)
    >               reduce using rule 251 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 251 (empty -> .)
    EQUAL           reduce using rule 251 (empty -> .)
    NOT_EQUAL       reduce using rule 251 (empty -> .)
    AND             reduce using rule 251 (empty -> .)
    OR              reduce using rule 251 (empty -> .)
    XOR             reduce using rule 251 (empty -> .)
    ,               reduce using rule 251 (empty -> .)
    ]               reduce using rule 251 (empty -> .)
    ;               reduce using rule 251 (empty -> .)
    )               reduce using rule 251 (empty -> .)

    empty                          shift and go to state 136
    id_var_acc                     shift and go to state 135

state 113

    (75) assignment -> this ID np_assignment_1 id_access . = np_assignment_2 ass_value ;

    =               shift and go to state 138


state 114

    (102) method -> func_spec ( np_method_5 opt_method_param ) . np_method_6 block np_method_7
    (113) np_method_6 -> .

    {               reduce using rule 113 (np_method_6 -> .)

    np_method_6                    shift and go to state 139

state 115

    (117) method_param -> ID np_method_param_1 . : param_type param_mat_vec np_method_param_6 more_params

    :               shift and go to state 140


state 116

    (59) vector -> VEC ids : vec_mat_type [ . CONST_I ] np_vector_1 vec_assgn ; np_vector_2

    CONST_I         shift and go to state 141


state 117

    (57) vec_mat_type -> ID np_vec_mat_type_1 .

    [               reduce using rule 57 (vec_mat_type -> ID np_vec_mat_type_1 .)


state 118

    (39) m_ids -> , ids .

    :               reduce using rule 39 (m_ids -> , ids .)


state 119

    (42) vars -> VAR ids : vars_type ; . np_vars_3
    (53) np_vars_3 -> .

    PUBLIC          reduce using rule 53 (np_vars_3 -> .)
    PRIVATE         reduce using rule 53 (np_vars_3 -> .)
    THIS            reduce using rule 53 (np_vars_3 -> .)
    CONSTRUCTOR     reduce using rule 53 (np_vars_3 -> .)
    PUBLIC_FUNC     reduce using rule 53 (np_vars_3 -> .)
    PRIVATE_FUNC    reduce using rule 53 (np_vars_3 -> .)
    ID              reduce using rule 53 (np_vars_3 -> .)
    }               reduce using rule 53 (np_vars_3 -> .)
    IF              reduce using rule 53 (np_vars_3 -> .)
    PRINT           reduce using rule 53 (np_vars_3 -> .)
    SCAN            reduce using rule 53 (np_vars_3 -> .)
    RETURN          reduce using rule 53 (np_vars_3 -> .)
    FOR             reduce using rule 53 (np_vars_3 -> .)
    WHILE           reduce using rule 53 (np_vars_3 -> .)
    VAR             reduce using rule 53 (np_vars_3 -> .)
    VEC             reduce using rule 53 (np_vars_3 -> .)
    MAT             reduce using rule 53 (np_vars_3 -> .)

    np_vars_3                      shift and go to state 142

state 120

    (43) vars_type -> type np_vars_1 . vars_tp_a
    (45) vars_tp_a -> . = np_vars_4 expression np_vars_5
    (46) vars_tp_a -> . empty
    (251) empty -> .

    =               shift and go to state 144
    ;               reduce using rule 251 (empty -> .)

    vars_tp_a                      shift and go to state 143
    empty                          shift and go to state 145

state 121

    (44) vars_type -> ID np_vars_2 . vars_tp_b
    (47) vars_tp_b -> . = vars_assgn
    (48) vars_tp_b -> . empty
    (251) empty -> .

    =               shift and go to state 148
    ;               reduce using rule 251 (empty -> .)

    vars_tp_b                      shift and go to state 147
    empty                          shift and go to state 146

state 122

    (64) matrix -> MAT ids : vec_mat_type [ . CONST_I , CONST_I ] np_matrix_1 mat_assgn ; np_matrix_2

    CONST_I         shift and go to state 149


state 123

    (235) fact_neg -> ~ . np_factor_3
    (244) np_factor_3 -> .

    (               reduce using rule 244 (np_factor_3 -> .)
    CONST_I         reduce using rule 244 (np_factor_3 -> .)
    CONST_F         reduce using rule 244 (np_factor_3 -> .)
    CONST_CHAR      reduce using rule 244 (np_factor_3 -> .)
    CONST_STRING    reduce using rule 244 (np_factor_3 -> .)
    CONST_BOOL      reduce using rule 244 (np_factor_3 -> .)
    THIS            reduce using rule 244 (np_factor_3 -> .)
    ID              reduce using rule 244 (np_factor_3 -> .)

    np_factor_3                    shift and go to state 150

state 124

    (99) mat_vec_index -> expression .

    ,               reduce using rule 99 (mat_vec_index -> expression .)
    ]               reduce using rule 99 (mat_vec_index -> expression .)


state 125

    (236) fact_neg -> empty .

    (               reduce using rule 236 (fact_neg -> empty .)
    CONST_I         reduce using rule 236 (fact_neg -> empty .)
    CONST_F         reduce using rule 236 (fact_neg -> empty .)
    CONST_CHAR      reduce using rule 236 (fact_neg -> empty .)
    CONST_STRING    reduce using rule 236 (fact_neg -> empty .)
    CONST_BOOL      reduce using rule 236 (fact_neg -> empty .)
    THIS            reduce using rule 236 (fact_neg -> empty .)
    ID              reduce using rule 236 (fact_neg -> empty .)


state 126

    (97) mat_vec_access -> [ mat_vec_index . mat_access ]
    (100) mat_access -> . , mat_vec_index
    (101) mat_access -> . empty
    (251) empty -> .

    ,               shift and go to state 153
    ]               reduce using rule 251 (empty -> .)

    empty                          shift and go to state 151
    mat_access                     shift and go to state 152

state 127

    (205) exp -> term . np_exp_1 exp_op
    (209) np_exp_1 -> .

    +               reduce using rule 209 (np_exp_1 -> .)
    -               reduce using rule 209 (np_exp_1 -> .)
    <               reduce using rule 209 (np_exp_1 -> .)
    LESS_EQUAL_THAN reduce using rule 209 (np_exp_1 -> .)
    >               reduce using rule 209 (np_exp_1 -> .)
    GREATER_EQUAL_THAN reduce using rule 209 (np_exp_1 -> .)
    EQUAL           reduce using rule 209 (np_exp_1 -> .)
    NOT_EQUAL       reduce using rule 209 (np_exp_1 -> .)
    AND             reduce using rule 209 (np_exp_1 -> .)
    OR              reduce using rule 209 (np_exp_1 -> .)
    XOR             reduce using rule 209 (np_exp_1 -> .)
    ,               reduce using rule 209 (np_exp_1 -> .)
    ]               reduce using rule 209 (np_exp_1 -> .)
    ;               reduce using rule 209 (np_exp_1 -> .)
    )               reduce using rule 209 (np_exp_1 -> .)

    np_exp_1                       shift and go to state 154

state 128

    (191) rel_expression -> rel_expression_1 . np_rel_expression_1 rel_exp_op
    (195) np_rel_expression_1 -> .

    EQUAL           reduce using rule 195 (np_rel_expression_1 -> .)
    NOT_EQUAL       reduce using rule 195 (np_rel_expression_1 -> .)
    AND             reduce using rule 195 (np_rel_expression_1 -> .)
    OR              reduce using rule 195 (np_rel_expression_1 -> .)
    XOR             reduce using rule 195 (np_rel_expression_1 -> .)
    ,               reduce using rule 195 (np_rel_expression_1 -> .)
    ]               reduce using rule 195 (np_rel_expression_1 -> .)
    ;               reduce using rule 195 (np_rel_expression_1 -> .)
    )               reduce using rule 195 (np_rel_expression_1 -> .)

    np_rel_expression_1            shift and go to state 155

state 129

    (233) factor -> fact_neg . fact_body np_factor_7
    (237) fact_body -> . ( np_factor_4 expression ) np_factor_5
    (238) fact_body -> . var_cte np_factor_6
    (239) fact_body -> . this ID np_factor_1 fact_id
    (223) var_cte -> . CONST_I np_var_cte_1
    (224) var_cte -> . CONST_F np_var_cte_2
    (225) var_cte -> . CONST_CHAR np_var_cte_3
    (226) var_cte -> . CONST_STRING np_var_cte_4
    (227) var_cte -> . CONST_BOOL np_var_cte_5
    (83) this -> . THIS np_this_1 .
    (84) this -> . np_this_2
    (86) np_this_2 -> .

    (               shift and go to state 164
    CONST_I         shift and go to state 156
    CONST_F         shift and go to state 162
    CONST_CHAR      shift and go to state 160
    CONST_STRING    shift and go to state 163
    CONST_BOOL      shift and go to state 157
    THIS            shift and go to state 54
    ID              reduce using rule 86 (np_this_2 -> .)

    fact_body                      shift and go to state 158
    this                           shift and go to state 161
    np_this_2                      shift and go to state 56
    var_cte                        shift and go to state 159

state 130

    (234) fact_neg -> - . np_factor_2
    (243) np_factor_2 -> .

    (               reduce using rule 243 (np_factor_2 -> .)
    CONST_I         reduce using rule 243 (np_factor_2 -> .)
    CONST_F         reduce using rule 243 (np_factor_2 -> .)
    CONST_CHAR      reduce using rule 243 (np_factor_2 -> .)
    CONST_STRING    reduce using rule 243 (np_factor_2 -> .)
    CONST_BOOL      reduce using rule 243 (np_factor_2 -> .)
    THIS            reduce using rule 243 (np_factor_2 -> .)
    ID              reduce using rule 243 (np_factor_2 -> .)

    np_factor_2                    shift and go to state 165

state 131

    (184) expression -> rel_expression . np_expression_1 expression_op
    (189) np_expression_1 -> .

    AND             reduce using rule 189 (np_expression_1 -> .)
    OR              reduce using rule 189 (np_expression_1 -> .)
    XOR             reduce using rule 189 (np_expression_1 -> .)
    ,               reduce using rule 189 (np_expression_1 -> .)
    ]               reduce using rule 189 (np_expression_1 -> .)
    ;               reduce using rule 189 (np_expression_1 -> .)
    )               reduce using rule 189 (np_expression_1 -> .)

    np_expression_1                shift and go to state 166

state 132

    (197) rel_expression_1 -> exp . np_rel_expression_1_1 rel_exp_1_op
    (203) np_rel_expression_1_1 -> .

    <               reduce using rule 203 (np_rel_expression_1_1 -> .)
    LESS_EQUAL_THAN reduce using rule 203 (np_rel_expression_1_1 -> .)
    >               reduce using rule 203 (np_rel_expression_1_1 -> .)
    GREATER_EQUAL_THAN reduce using rule 203 (np_rel_expression_1_1 -> .)
    EQUAL           reduce using rule 203 (np_rel_expression_1_1 -> .)
    NOT_EQUAL       reduce using rule 203 (np_rel_expression_1_1 -> .)
    AND             reduce using rule 203 (np_rel_expression_1_1 -> .)
    OR              reduce using rule 203 (np_rel_expression_1_1 -> .)
    XOR             reduce using rule 203 (np_rel_expression_1_1 -> .)
    ,               reduce using rule 203 (np_rel_expression_1_1 -> .)
    ]               reduce using rule 203 (np_rel_expression_1_1 -> .)
    ;               reduce using rule 203 (np_rel_expression_1_1 -> .)
    )               reduce using rule 203 (np_rel_expression_1_1 -> .)

    np_rel_expression_1_1          shift and go to state 167

state 133

    (98) mat_vec_index -> _ .

    ,               reduce using rule 98 (mat_vec_index -> _ .)
    ]               reduce using rule 98 (mat_vec_index -> _ .)


state 134

    (211) term -> factor . np_term_1 term_op
    (216) np_term_1 -> .

    *               reduce using rule 216 (np_term_1 -> .)
    /               reduce using rule 216 (np_term_1 -> .)
    %               reduce using rule 216 (np_term_1 -> .)
    +               reduce using rule 216 (np_term_1 -> .)
    -               reduce using rule 216 (np_term_1 -> .)
    <               reduce using rule 216 (np_term_1 -> .)
    LESS_EQUAL_THAN reduce using rule 216 (np_term_1 -> .)
    >               reduce using rule 216 (np_term_1 -> .)
    GREATER_EQUAL_THAN reduce using rule 216 (np_term_1 -> .)
    EQUAL           reduce using rule 216 (np_term_1 -> .)
    NOT_EQUAL       reduce using rule 216 (np_term_1 -> .)
    AND             reduce using rule 216 (np_term_1 -> .)
    OR              reduce using rule 216 (np_term_1 -> .)
    XOR             reduce using rule 216 (np_term_1 -> .)
    ,               reduce using rule 216 (np_term_1 -> .)
    ]               reduce using rule 216 (np_term_1 -> .)
    ;               reduce using rule 216 (np_term_1 -> .)
    )               reduce using rule 216 (np_term_1 -> .)

    np_term_1                      shift and go to state 168

state 135

    (69) id_access -> id_mat_acc id_var_acc .

    )               reduce using rule 69 (id_access -> id_mat_acc id_var_acc .)
    =               reduce using rule 69 (id_access -> id_mat_acc id_var_acc .)
    *               reduce using rule 69 (id_access -> id_mat_acc id_var_acc .)
    /               reduce using rule 69 (id_access -> id_mat_acc id_var_acc .)
    %               reduce using rule 69 (id_access -> id_mat_acc id_var_acc .)
    +               reduce using rule 69 (id_access -> id_mat_acc id_var_acc .)
    -               reduce using rule 69 (id_access -> id_mat_acc id_var_acc .)
    <               reduce using rule 69 (id_access -> id_mat_acc id_var_acc .)
    LESS_EQUAL_THAN reduce using rule 69 (id_access -> id_mat_acc id_var_acc .)
    >               reduce using rule 69 (id_access -> id_mat_acc id_var_acc .)
    GREATER_EQUAL_THAN reduce using rule 69 (id_access -> id_mat_acc id_var_acc .)
    EQUAL           reduce using rule 69 (id_access -> id_mat_acc id_var_acc .)
    NOT_EQUAL       reduce using rule 69 (id_access -> id_mat_acc id_var_acc .)
    AND             reduce using rule 69 (id_access -> id_mat_acc id_var_acc .)
    OR              reduce using rule 69 (id_access -> id_mat_acc id_var_acc .)
    XOR             reduce using rule 69 (id_access -> id_mat_acc id_var_acc .)
    ,               reduce using rule 69 (id_access -> id_mat_acc id_var_acc .)
    ]               reduce using rule 69 (id_access -> id_mat_acc id_var_acc .)
    ;               reduce using rule 69 (id_access -> id_mat_acc id_var_acc .)


state 136

    (73) id_var_acc -> empty .

    =               reduce using rule 73 (id_var_acc -> empty .)
    *               reduce using rule 73 (id_var_acc -> empty .)
    /               reduce using rule 73 (id_var_acc -> empty .)
    %               reduce using rule 73 (id_var_acc -> empty .)
    +               reduce using rule 73 (id_var_acc -> empty .)
    -               reduce using rule 73 (id_var_acc -> empty .)
    <               reduce using rule 73 (id_var_acc -> empty .)
    LESS_EQUAL_THAN reduce using rule 73 (id_var_acc -> empty .)
    >               reduce using rule 73 (id_var_acc -> empty .)
    GREATER_EQUAL_THAN reduce using rule 73 (id_var_acc -> empty .)
    EQUAL           reduce using rule 73 (id_var_acc -> empty .)
    NOT_EQUAL       reduce using rule 73 (id_var_acc -> empty .)
    AND             reduce using rule 73 (id_var_acc -> empty .)
    OR              reduce using rule 73 (id_var_acc -> empty .)
    XOR             reduce using rule 73 (id_var_acc -> empty .)
    ,               reduce using rule 73 (id_var_acc -> empty .)
    ]               reduce using rule 73 (id_var_acc -> empty .)
    ;               reduce using rule 73 (id_var_acc -> empty .)
    )               reduce using rule 73 (id_var_acc -> empty .)


state 137

    (72) id_var_acc -> . . np_id_access_1 ID id_mat_acc
    (74) np_id_access_1 -> .

    ID              reduce using rule 74 (np_id_access_1 -> .)

    np_id_access_1                 shift and go to state 169

state 138

    (75) assignment -> this ID np_assignment_1 id_access = . np_assignment_2 ass_value ;
    (81) np_assignment_2 -> .

    NEW             reduce using rule 81 (np_assignment_2 -> .)
    {               reduce using rule 81 (np_assignment_2 -> .)
    [               reduce using rule 81 (np_assignment_2 -> .)
    -               reduce using rule 81 (np_assignment_2 -> .)
    ~               reduce using rule 81 (np_assignment_2 -> .)
    (               reduce using rule 81 (np_assignment_2 -> .)
    CONST_I         reduce using rule 81 (np_assignment_2 -> .)
    CONST_F         reduce using rule 81 (np_assignment_2 -> .)
    CONST_CHAR      reduce using rule 81 (np_assignment_2 -> .)
    CONST_STRING    reduce using rule 81 (np_assignment_2 -> .)
    CONST_BOOL      reduce using rule 81 (np_assignment_2 -> .)
    THIS            reduce using rule 81 (np_assignment_2 -> .)
    ID              reduce using rule 81 (np_assignment_2 -> .)

    np_assignment_2                shift and go to state 170

state 139

    (102) method -> func_spec ( np_method_5 opt_method_param ) np_method_6 . block np_method_7
    (141) block -> . { bstmt }

    {               shift and go to state 171

    block                          shift and go to state 172

state 140

    (117) method_param -> ID np_method_param_1 : . param_type param_mat_vec np_method_param_6 more_params
    (120) param_type -> . type
    (121) param_type -> . ID np_method_param_2
    (218) type -> . INT np_type_1
    (219) type -> . DOUBLE np_type_1
    (220) type -> . CHAR np_type_1
    (221) type -> . BOOL np_type_1

    ID              shift and go to state 175
    INT             shift and go to state 46
    DOUBLE          shift and go to state 47
    CHAR            shift and go to state 45
    BOOL            shift and go to state 48

    type                           shift and go to state 174
    param_type                     shift and go to state 173

state 141

    (59) vector -> VEC ids : vec_mat_type [ CONST_I . ] np_vector_1 vec_assgn ; np_vector_2

    ]               shift and go to state 176


state 142

    (42) vars -> VAR ids : vars_type ; np_vars_3 .

    IF              reduce using rule 42 (vars -> VAR ids : vars_type ; np_vars_3 .)
    PRINT           reduce using rule 42 (vars -> VAR ids : vars_type ; np_vars_3 .)
    SCAN            reduce using rule 42 (vars -> VAR ids : vars_type ; np_vars_3 .)
    RETURN          reduce using rule 42 (vars -> VAR ids : vars_type ; np_vars_3 .)
    THIS            reduce using rule 42 (vars -> VAR ids : vars_type ; np_vars_3 .)
    FOR             reduce using rule 42 (vars -> VAR ids : vars_type ; np_vars_3 .)
    WHILE           reduce using rule 42 (vars -> VAR ids : vars_type ; np_vars_3 .)
    VAR             reduce using rule 42 (vars -> VAR ids : vars_type ; np_vars_3 .)
    VEC             reduce using rule 42 (vars -> VAR ids : vars_type ; np_vars_3 .)
    MAT             reduce using rule 42 (vars -> VAR ids : vars_type ; np_vars_3 .)
    ID              reduce using rule 42 (vars -> VAR ids : vars_type ; np_vars_3 .)
    }               reduce using rule 42 (vars -> VAR ids : vars_type ; np_vars_3 .)
    PUBLIC          reduce using rule 42 (vars -> VAR ids : vars_type ; np_vars_3 .)
    PRIVATE         reduce using rule 42 (vars -> VAR ids : vars_type ; np_vars_3 .)
    CONSTRUCTOR     reduce using rule 42 (vars -> VAR ids : vars_type ; np_vars_3 .)
    PUBLIC_FUNC     reduce using rule 42 (vars -> VAR ids : vars_type ; np_vars_3 .)
    PRIVATE_FUNC    reduce using rule 42 (vars -> VAR ids : vars_type ; np_vars_3 .)


state 143

    (43) vars_type -> type np_vars_1 vars_tp_a .

    ;               reduce using rule 43 (vars_type -> type np_vars_1 vars_tp_a .)


state 144

    (45) vars_tp_a -> = . np_vars_4 expression np_vars_5
    (54) np_vars_4 -> .

    -               reduce using rule 54 (np_vars_4 -> .)
    ~               reduce using rule 54 (np_vars_4 -> .)
    (               reduce using rule 54 (np_vars_4 -> .)
    CONST_I         reduce using rule 54 (np_vars_4 -> .)
    CONST_F         reduce using rule 54 (np_vars_4 -> .)
    CONST_CHAR      reduce using rule 54 (np_vars_4 -> .)
    CONST_STRING    reduce using rule 54 (np_vars_4 -> .)
    CONST_BOOL      reduce using rule 54 (np_vars_4 -> .)
    THIS            reduce using rule 54 (np_vars_4 -> .)
    ID              reduce using rule 54 (np_vars_4 -> .)

    np_vars_4                      shift and go to state 177

state 145

    (46) vars_tp_a -> empty .

    ;               reduce using rule 46 (vars_tp_a -> empty .)


state 146

    (48) vars_tp_b -> empty .

    ;               reduce using rule 48 (vars_tp_b -> empty .)


state 147

    (44) vars_type -> ID np_vars_2 vars_tp_b .

    ;               reduce using rule 44 (vars_type -> ID np_vars_2 vars_tp_b .)


state 148

    (47) vars_tp_b -> = . vars_assgn
    (49) vars_assgn -> . create_obj
    (50) vars_assgn -> . expression
    (132) create_obj -> . NEW func_call
    (184) expression -> . rel_expression np_expression_1 expression_op
    (191) rel_expression -> . rel_expression_1 np_rel_expression_1 rel_exp_op
    (197) rel_expression_1 -> . exp np_rel_expression_1_1 rel_exp_1_op
    (205) exp -> . term np_exp_1 exp_op
    (211) term -> . factor np_term_1 term_op
    (233) factor -> . fact_neg fact_body np_factor_7
    (234) fact_neg -> . - np_factor_2
    (235) fact_neg -> . ~ np_factor_3
    (236) fact_neg -> . empty
    (251) empty -> .

    NEW             shift and go to state 180
    -               shift and go to state 130
    ~               shift and go to state 123
    (               reduce using rule 251 (empty -> .)
    CONST_I         reduce using rule 251 (empty -> .)
    CONST_F         reduce using rule 251 (empty -> .)
    CONST_CHAR      reduce using rule 251 (empty -> .)
    CONST_STRING    reduce using rule 251 (empty -> .)
    CONST_BOOL      reduce using rule 251 (empty -> .)
    THIS            reduce using rule 251 (empty -> .)
    ID              reduce using rule 251 (empty -> .)

    expression                     shift and go to state 178
    empty                          shift and go to state 125
    term                           shift and go to state 127
    vars_assgn                     shift and go to state 179
    fact_neg                       shift and go to state 129
    exp                            shift and go to state 132
    factor                         shift and go to state 134
    rel_expression                 shift and go to state 131
    create_obj                     shift and go to state 181
    rel_expression_1               shift and go to state 128

state 149

    (64) matrix -> MAT ids : vec_mat_type [ CONST_I . , CONST_I ] np_matrix_1 mat_assgn ; np_matrix_2

    ,               shift and go to state 182


state 150

    (235) fact_neg -> ~ np_factor_3 .

    (               reduce using rule 235 (fact_neg -> ~ np_factor_3 .)
    CONST_I         reduce using rule 235 (fact_neg -> ~ np_factor_3 .)
    CONST_F         reduce using rule 235 (fact_neg -> ~ np_factor_3 .)
    CONST_CHAR      reduce using rule 235 (fact_neg -> ~ np_factor_3 .)
    CONST_STRING    reduce using rule 235 (fact_neg -> ~ np_factor_3 .)
    CONST_BOOL      reduce using rule 235 (fact_neg -> ~ np_factor_3 .)
    THIS            reduce using rule 235 (fact_neg -> ~ np_factor_3 .)
    ID              reduce using rule 235 (fact_neg -> ~ np_factor_3 .)


state 151

    (101) mat_access -> empty .

    ]               reduce using rule 101 (mat_access -> empty .)


state 152

    (97) mat_vec_access -> [ mat_vec_index mat_access . ]

    ]               shift and go to state 183


state 153

    (100) mat_access -> , . mat_vec_index
    (98) mat_vec_index -> . _
    (99) mat_vec_index -> . expression
    (184) expression -> . rel_expression np_expression_1 expression_op
    (191) rel_expression -> . rel_expression_1 np_rel_expression_1 rel_exp_op
    (197) rel_expression_1 -> . exp np_rel_expression_1_1 rel_exp_1_op
    (205) exp -> . term np_exp_1 exp_op
    (211) term -> . factor np_term_1 term_op
    (233) factor -> . fact_neg fact_body np_factor_7
    (234) fact_neg -> . - np_factor_2
    (235) fact_neg -> . ~ np_factor_3
    (236) fact_neg -> . empty
    (251) empty -> .

    _               shift and go to state 133
    -               shift and go to state 130
    ~               shift and go to state 123
    (               reduce using rule 251 (empty -> .)
    CONST_I         reduce using rule 251 (empty -> .)
    CONST_F         reduce using rule 251 (empty -> .)
    CONST_CHAR      reduce using rule 251 (empty -> .)
    CONST_STRING    reduce using rule 251 (empty -> .)
    CONST_BOOL      reduce using rule 251 (empty -> .)
    THIS            reduce using rule 251 (empty -> .)
    ID              reduce using rule 251 (empty -> .)

    expression                     shift and go to state 124
    empty                          shift and go to state 125
    term                           shift and go to state 127
    fact_neg                       shift and go to state 129
    mat_vec_index                  shift and go to state 184
    factor                         shift and go to state 134
    rel_expression                 shift and go to state 131
    exp                            shift and go to state 132
    rel_expression_1               shift and go to state 128

state 154

    (205) exp -> term np_exp_1 . exp_op
    (206) exp_op -> . + np_exp_2 exp
    (207) exp_op -> . - np_exp_2 exp
    (208) exp_op -> . empty
    (251) empty -> .

    +               shift and go to state 185
    -               shift and go to state 188
    <               reduce using rule 251 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 251 (empty -> .)
    >               reduce using rule 251 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 251 (empty -> .)
    EQUAL           reduce using rule 251 (empty -> .)
    NOT_EQUAL       reduce using rule 251 (empty -> .)
    AND             reduce using rule 251 (empty -> .)
    OR              reduce using rule 251 (empty -> .)
    XOR             reduce using rule 251 (empty -> .)
    ,               reduce using rule 251 (empty -> .)
    ]               reduce using rule 251 (empty -> .)
    ;               reduce using rule 251 (empty -> .)
    )               reduce using rule 251 (empty -> .)

    empty                          shift and go to state 186
    exp_op                         shift and go to state 187

state 155

    (191) rel_expression -> rel_expression_1 np_rel_expression_1 . rel_exp_op
    (192) rel_exp_op -> . EQUAL np_rel_expression_2 rel_expression
    (193) rel_exp_op -> . NOT_EQUAL np_rel_expression_2 rel_expression
    (194) rel_exp_op -> . empty
    (251) empty -> .

    EQUAL           shift and go to state 190
    NOT_EQUAL       shift and go to state 191
    AND             reduce using rule 251 (empty -> .)
    OR              reduce using rule 251 (empty -> .)
    XOR             reduce using rule 251 (empty -> .)
    ,               reduce using rule 251 (empty -> .)
    ]               reduce using rule 251 (empty -> .)
    ;               reduce using rule 251 (empty -> .)
    )               reduce using rule 251 (empty -> .)

    empty                          shift and go to state 189
    rel_exp_op                     shift and go to state 192

state 156

    (223) var_cte -> CONST_I . np_var_cte_1
    (228) np_var_cte_1 -> .

    *               reduce using rule 228 (np_var_cte_1 -> .)
    /               reduce using rule 228 (np_var_cte_1 -> .)
    %               reduce using rule 228 (np_var_cte_1 -> .)
    +               reduce using rule 228 (np_var_cte_1 -> .)
    -               reduce using rule 228 (np_var_cte_1 -> .)
    <               reduce using rule 228 (np_var_cte_1 -> .)
    LESS_EQUAL_THAN reduce using rule 228 (np_var_cte_1 -> .)
    >               reduce using rule 228 (np_var_cte_1 -> .)
    GREATER_EQUAL_THAN reduce using rule 228 (np_var_cte_1 -> .)
    EQUAL           reduce using rule 228 (np_var_cte_1 -> .)
    NOT_EQUAL       reduce using rule 228 (np_var_cte_1 -> .)
    AND             reduce using rule 228 (np_var_cte_1 -> .)
    OR              reduce using rule 228 (np_var_cte_1 -> .)
    XOR             reduce using rule 228 (np_var_cte_1 -> .)
    ,               reduce using rule 228 (np_var_cte_1 -> .)
    ]               reduce using rule 228 (np_var_cte_1 -> .)
    ;               reduce using rule 228 (np_var_cte_1 -> .)
    )               reduce using rule 228 (np_var_cte_1 -> .)

    np_var_cte_1                   shift and go to state 193

state 157

    (227) var_cte -> CONST_BOOL . np_var_cte_5
    (232) np_var_cte_5 -> .

    *               reduce using rule 232 (np_var_cte_5 -> .)
    /               reduce using rule 232 (np_var_cte_5 -> .)
    %               reduce using rule 232 (np_var_cte_5 -> .)
    +               reduce using rule 232 (np_var_cte_5 -> .)
    -               reduce using rule 232 (np_var_cte_5 -> .)
    <               reduce using rule 232 (np_var_cte_5 -> .)
    LESS_EQUAL_THAN reduce using rule 232 (np_var_cte_5 -> .)
    >               reduce using rule 232 (np_var_cte_5 -> .)
    GREATER_EQUAL_THAN reduce using rule 232 (np_var_cte_5 -> .)
    EQUAL           reduce using rule 232 (np_var_cte_5 -> .)
    NOT_EQUAL       reduce using rule 232 (np_var_cte_5 -> .)
    AND             reduce using rule 232 (np_var_cte_5 -> .)
    OR              reduce using rule 232 (np_var_cte_5 -> .)
    XOR             reduce using rule 232 (np_var_cte_5 -> .)
    ,               reduce using rule 232 (np_var_cte_5 -> .)
    ]               reduce using rule 232 (np_var_cte_5 -> .)
    ;               reduce using rule 232 (np_var_cte_5 -> .)
    )               reduce using rule 232 (np_var_cte_5 -> .)

    np_var_cte_5                   shift and go to state 194

state 158

    (233) factor -> fact_neg fact_body . np_factor_7
    (248) np_factor_7 -> .

    *               reduce using rule 248 (np_factor_7 -> .)
    /               reduce using rule 248 (np_factor_7 -> .)
    %               reduce using rule 248 (np_factor_7 -> .)
    +               reduce using rule 248 (np_factor_7 -> .)
    -               reduce using rule 248 (np_factor_7 -> .)
    <               reduce using rule 248 (np_factor_7 -> .)
    LESS_EQUAL_THAN reduce using rule 248 (np_factor_7 -> .)
    >               reduce using rule 248 (np_factor_7 -> .)
    GREATER_EQUAL_THAN reduce using rule 248 (np_factor_7 -> .)
    EQUAL           reduce using rule 248 (np_factor_7 -> .)
    NOT_EQUAL       reduce using rule 248 (np_factor_7 -> .)
    AND             reduce using rule 248 (np_factor_7 -> .)
    OR              reduce using rule 248 (np_factor_7 -> .)
    XOR             reduce using rule 248 (np_factor_7 -> .)
    ,               reduce using rule 248 (np_factor_7 -> .)
    ]               reduce using rule 248 (np_factor_7 -> .)
    ;               reduce using rule 248 (np_factor_7 -> .)
    )               reduce using rule 248 (np_factor_7 -> .)

    np_factor_7                    shift and go to state 195

state 159

    (238) fact_body -> var_cte . np_factor_6
    (247) np_factor_6 -> .

    *               reduce using rule 247 (np_factor_6 -> .)
    /               reduce using rule 247 (np_factor_6 -> .)
    %               reduce using rule 247 (np_factor_6 -> .)
    +               reduce using rule 247 (np_factor_6 -> .)
    -               reduce using rule 247 (np_factor_6 -> .)
    <               reduce using rule 247 (np_factor_6 -> .)
    LESS_EQUAL_THAN reduce using rule 247 (np_factor_6 -> .)
    >               reduce using rule 247 (np_factor_6 -> .)
    GREATER_EQUAL_THAN reduce using rule 247 (np_factor_6 -> .)
    EQUAL           reduce using rule 247 (np_factor_6 -> .)
    NOT_EQUAL       reduce using rule 247 (np_factor_6 -> .)
    AND             reduce using rule 247 (np_factor_6 -> .)
    OR              reduce using rule 247 (np_factor_6 -> .)
    XOR             reduce using rule 247 (np_factor_6 -> .)
    ,               reduce using rule 247 (np_factor_6 -> .)
    ]               reduce using rule 247 (np_factor_6 -> .)
    ;               reduce using rule 247 (np_factor_6 -> .)
    )               reduce using rule 247 (np_factor_6 -> .)

    np_factor_6                    shift and go to state 196

state 160

    (225) var_cte -> CONST_CHAR . np_var_cte_3
    (230) np_var_cte_3 -> .

    *               reduce using rule 230 (np_var_cte_3 -> .)
    /               reduce using rule 230 (np_var_cte_3 -> .)
    %               reduce using rule 230 (np_var_cte_3 -> .)
    +               reduce using rule 230 (np_var_cte_3 -> .)
    -               reduce using rule 230 (np_var_cte_3 -> .)
    <               reduce using rule 230 (np_var_cte_3 -> .)
    LESS_EQUAL_THAN reduce using rule 230 (np_var_cte_3 -> .)
    >               reduce using rule 230 (np_var_cte_3 -> .)
    GREATER_EQUAL_THAN reduce using rule 230 (np_var_cte_3 -> .)
    EQUAL           reduce using rule 230 (np_var_cte_3 -> .)
    NOT_EQUAL       reduce using rule 230 (np_var_cte_3 -> .)
    AND             reduce using rule 230 (np_var_cte_3 -> .)
    OR              reduce using rule 230 (np_var_cte_3 -> .)
    XOR             reduce using rule 230 (np_var_cte_3 -> .)
    ,               reduce using rule 230 (np_var_cte_3 -> .)
    ]               reduce using rule 230 (np_var_cte_3 -> .)
    ;               reduce using rule 230 (np_var_cte_3 -> .)
    )               reduce using rule 230 (np_var_cte_3 -> .)

    np_var_cte_3                   shift and go to state 197

state 161

    (239) fact_body -> this . ID np_factor_1 fact_id

    ID              shift and go to state 198


state 162

    (224) var_cte -> CONST_F . np_var_cte_2
    (229) np_var_cte_2 -> .

    *               reduce using rule 229 (np_var_cte_2 -> .)
    /               reduce using rule 229 (np_var_cte_2 -> .)
    %               reduce using rule 229 (np_var_cte_2 -> .)
    +               reduce using rule 229 (np_var_cte_2 -> .)
    -               reduce using rule 229 (np_var_cte_2 -> .)
    <               reduce using rule 229 (np_var_cte_2 -> .)
    LESS_EQUAL_THAN reduce using rule 229 (np_var_cte_2 -> .)
    >               reduce using rule 229 (np_var_cte_2 -> .)
    GREATER_EQUAL_THAN reduce using rule 229 (np_var_cte_2 -> .)
    EQUAL           reduce using rule 229 (np_var_cte_2 -> .)
    NOT_EQUAL       reduce using rule 229 (np_var_cte_2 -> .)
    AND             reduce using rule 229 (np_var_cte_2 -> .)
    OR              reduce using rule 229 (np_var_cte_2 -> .)
    XOR             reduce using rule 229 (np_var_cte_2 -> .)
    ,               reduce using rule 229 (np_var_cte_2 -> .)
    ]               reduce using rule 229 (np_var_cte_2 -> .)
    ;               reduce using rule 229 (np_var_cte_2 -> .)
    )               reduce using rule 229 (np_var_cte_2 -> .)

    np_var_cte_2                   shift and go to state 199

state 163

    (226) var_cte -> CONST_STRING . np_var_cte_4
    (231) np_var_cte_4 -> .

    *               reduce using rule 231 (np_var_cte_4 -> .)
    /               reduce using rule 231 (np_var_cte_4 -> .)
    %               reduce using rule 231 (np_var_cte_4 -> .)
    +               reduce using rule 231 (np_var_cte_4 -> .)
    -               reduce using rule 231 (np_var_cte_4 -> .)
    <               reduce using rule 231 (np_var_cte_4 -> .)
    LESS_EQUAL_THAN reduce using rule 231 (np_var_cte_4 -> .)
    >               reduce using rule 231 (np_var_cte_4 -> .)
    GREATER_EQUAL_THAN reduce using rule 231 (np_var_cte_4 -> .)
    EQUAL           reduce using rule 231 (np_var_cte_4 -> .)
    NOT_EQUAL       reduce using rule 231 (np_var_cte_4 -> .)
    AND             reduce using rule 231 (np_var_cte_4 -> .)
    OR              reduce using rule 231 (np_var_cte_4 -> .)
    XOR             reduce using rule 231 (np_var_cte_4 -> .)
    ,               reduce using rule 231 (np_var_cte_4 -> .)
    ]               reduce using rule 231 (np_var_cte_4 -> .)
    ;               reduce using rule 231 (np_var_cte_4 -> .)
    )               reduce using rule 231 (np_var_cte_4 -> .)

    np_var_cte_4                   shift and go to state 200

state 164

    (237) fact_body -> ( . np_factor_4 expression ) np_factor_5
    (245) np_factor_4 -> .

    -               reduce using rule 245 (np_factor_4 -> .)
    ~               reduce using rule 245 (np_factor_4 -> .)
    (               reduce using rule 245 (np_factor_4 -> .)
    CONST_I         reduce using rule 245 (np_factor_4 -> .)
    CONST_F         reduce using rule 245 (np_factor_4 -> .)
    CONST_CHAR      reduce using rule 245 (np_factor_4 -> .)
    CONST_STRING    reduce using rule 245 (np_factor_4 -> .)
    CONST_BOOL      reduce using rule 245 (np_factor_4 -> .)
    THIS            reduce using rule 245 (np_factor_4 -> .)
    ID              reduce using rule 245 (np_factor_4 -> .)

    np_factor_4                    shift and go to state 201

state 165

    (234) fact_neg -> - np_factor_2 .

    (               reduce using rule 234 (fact_neg -> - np_factor_2 .)
    CONST_I         reduce using rule 234 (fact_neg -> - np_factor_2 .)
    CONST_F         reduce using rule 234 (fact_neg -> - np_factor_2 .)
    CONST_CHAR      reduce using rule 234 (fact_neg -> - np_factor_2 .)
    CONST_STRING    reduce using rule 234 (fact_neg -> - np_factor_2 .)
    CONST_BOOL      reduce using rule 234 (fact_neg -> - np_factor_2 .)
    THIS            reduce using rule 234 (fact_neg -> - np_factor_2 .)
    ID              reduce using rule 234 (fact_neg -> - np_factor_2 .)


state 166

    (184) expression -> rel_expression np_expression_1 . expression_op
    (185) expression_op -> . AND np_expression_2 expression
    (186) expression_op -> . OR np_expression_2 expression
    (187) expression_op -> . XOR np_expression_2 expression
    (188) expression_op -> . empty
    (251) empty -> .

    AND             shift and go to state 206
    OR              shift and go to state 202
    XOR             shift and go to state 203
    ,               reduce using rule 251 (empty -> .)
    ]               reduce using rule 251 (empty -> .)
    ;               reduce using rule 251 (empty -> .)
    )               reduce using rule 251 (empty -> .)

    expression_op                  shift and go to state 204
    empty                          shift and go to state 205

state 167

    (197) rel_expression_1 -> exp np_rel_expression_1_1 . rel_exp_1_op
    (198) rel_exp_1_op -> . < np_rel_expression_1_2 rel_expression_1
    (199) rel_exp_1_op -> . LESS_EQUAL_THAN np_rel_expression_1_2 rel_expression_1
    (200) rel_exp_1_op -> . > np_rel_expression_1_2 rel_expression_1
    (201) rel_exp_1_op -> . GREATER_EQUAL_THAN np_rel_expression_1_2 rel_expression_1
    (202) rel_exp_1_op -> . empty
    (251) empty -> .

    <               shift and go to state 212
    LESS_EQUAL_THAN shift and go to state 207
    >               shift and go to state 208
    GREATER_EQUAL_THAN shift and go to state 209
    EQUAL           reduce using rule 251 (empty -> .)
    NOT_EQUAL       reduce using rule 251 (empty -> .)
    AND             reduce using rule 251 (empty -> .)
    OR              reduce using rule 251 (empty -> .)
    XOR             reduce using rule 251 (empty -> .)
    ,               reduce using rule 251 (empty -> .)
    ]               reduce using rule 251 (empty -> .)
    ;               reduce using rule 251 (empty -> .)
    )               reduce using rule 251 (empty -> .)

    rel_exp_1_op                   shift and go to state 210
    empty                          shift and go to state 211

state 168

    (211) term -> factor np_term_1 . term_op
    (212) term_op -> . * np_term_2 term
    (213) term_op -> . / np_term_2 term
    (214) term_op -> . % np_term_2 term
    (215) term_op -> . empty
    (251) empty -> .

    *               shift and go to state 214
    /               shift and go to state 213
    %               shift and go to state 216
    +               reduce using rule 251 (empty -> .)
    -               reduce using rule 251 (empty -> .)
    <               reduce using rule 251 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 251 (empty -> .)
    >               reduce using rule 251 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 251 (empty -> .)
    EQUAL           reduce using rule 251 (empty -> .)
    NOT_EQUAL       reduce using rule 251 (empty -> .)
    AND             reduce using rule 251 (empty -> .)
    OR              reduce using rule 251 (empty -> .)
    XOR             reduce using rule 251 (empty -> .)
    ,               reduce using rule 251 (empty -> .)
    ]               reduce using rule 251 (empty -> .)
    ;               reduce using rule 251 (empty -> .)
    )               reduce using rule 251 (empty -> .)

    empty                          shift and go to state 215
    term_op                        shift and go to state 217

state 169

    (72) id_var_acc -> . np_id_access_1 . ID id_mat_acc

    ID              shift and go to state 218


state 170

    (75) assignment -> this ID np_assignment_1 id_access = np_assignment_2 . ass_value ;
    (76) ass_value -> . create_obj
    (77) ass_value -> . expression np_assignment_3
    (78) ass_value -> . matrix_exp
    (79) ass_value -> . vector_exp
    (132) create_obj -> . NEW func_call
    (184) expression -> . rel_expression np_expression_1 expression_op
    (93) matrix_exp -> . { mat_elem }
    (87) vector_exp -> . [ vec_elem ]
    (191) rel_expression -> . rel_expression_1 np_rel_expression_1 rel_exp_op
    (197) rel_expression_1 -> . exp np_rel_expression_1_1 rel_exp_1_op
    (205) exp -> . term np_exp_1 exp_op
    (211) term -> . factor np_term_1 term_op
    (233) factor -> . fact_neg fact_body np_factor_7
    (234) fact_neg -> . - np_factor_2
    (235) fact_neg -> . ~ np_factor_3
    (236) fact_neg -> . empty
    (251) empty -> .

    NEW             shift and go to state 180
    {               shift and go to state 222
    [               shift and go to state 219
    -               shift and go to state 130
    ~               shift and go to state 123
    (               reduce using rule 251 (empty -> .)
    CONST_I         reduce using rule 251 (empty -> .)
    CONST_F         reduce using rule 251 (empty -> .)
    CONST_CHAR      reduce using rule 251 (empty -> .)
    CONST_STRING    reduce using rule 251 (empty -> .)
    CONST_BOOL      reduce using rule 251 (empty -> .)
    THIS            reduce using rule 251 (empty -> .)
    ID              reduce using rule 251 (empty -> .)

    expression                     shift and go to state 223
    vector_exp                     shift and go to state 224
    matrix_exp                     shift and go to state 220
    empty                          shift and go to state 125
    term                           shift and go to state 127
    ass_value                      shift and go to state 225
    rel_expression_1               shift and go to state 128
    fact_neg                       shift and go to state 129
    factor                         shift and go to state 134
    rel_expression                 shift and go to state 131
    create_obj                     shift and go to state 221
    exp                            shift and go to state 132

state 171

    (141) block -> { . bstmt }
    (142) bstmt -> . statement bstmt
    (143) bstmt -> . empty
    (144) statement -> . assignment
    (145) statement -> . condition
    (146) statement -> . loop
    (147) statement -> . in_out
    (148) statement -> . return
    (149) statement -> . this ID np_statement_1 func_call ;
    (150) statement -> . var_decl
    (251) empty -> .
    (75) assignment -> . this ID np_assignment_1 id_access = np_assignment_2 ass_value ;
    (152) condition -> . IF cond_body np_condition_4
    (161) loop -> . for_loop
    (162) loop -> . while_loop
    (172) in_out -> . PRINT ( print_exp ) ;
    (173) in_out -> . SCAN ( ID np_in_out_2 id_access ) ;
    (179) return -> . RETURN ret_val ;
    (83) this -> . THIS np_this_1 .
    (84) this -> . np_this_2
    (9) var_decl -> . vars
    (10) var_decl -> . vector
    (11) var_decl -> . matrix
    (163) for_loop -> . FOR ( assignment np_for_loop_1 expression np_for_loop_2 ; ID = expression np_for_loop_3 ) block np_for_loop_4
    (168) while_loop -> . WHILE np_while_loop_1 ( expression ) np_while_loop_2 block np_while_loop_3
    (86) np_this_2 -> .
    (42) vars -> . VAR ids : vars_type ; np_vars_3
    (59) vector -> . VEC ids : vec_mat_type [ CONST_I ] np_vector_1 vec_assgn ; np_vector_2
    (64) matrix -> . MAT ids : vec_mat_type [ CONST_I , CONST_I ] np_matrix_1 mat_assgn ; np_matrix_2

    }               reduce using rule 251 (empty -> .)
    IF              shift and go to state 238
    PRINT           shift and go to state 242
    SCAN            shift and go to state 240
    RETURN          shift and go to state 234
    THIS            shift and go to state 54
    FOR             shift and go to state 235
    WHILE           shift and go to state 229
    ID              reduce using rule 86 (np_this_2 -> .)
    VAR             shift and go to state 41
    VEC             shift and go to state 37
    MAT             shift and go to state 42

    matrix                         shift and go to state 38
    empty                          shift and go to state 226
    var_decl                       shift and go to state 227
    loop                           shift and go to state 228
    np_this_2                      shift and go to state 56
    while_loop                     shift and go to state 230
    in_out                         shift and go to state 231
    condition                      shift and go to state 232
    vars                           shift and go to state 43
    for_loop                       shift and go to state 233
    statement                      shift and go to state 237
    bstmt                          shift and go to state 239
    vector                         shift and go to state 40
    assignment                     shift and go to state 236
    this                           shift and go to state 241
    return                         shift and go to state 243

state 172

    (102) method -> func_spec ( np_method_5 opt_method_param ) np_method_6 block . np_method_7
    (114) np_method_7 -> .

    CONSTRUCTOR     reduce using rule 114 (np_method_7 -> .)
    PUBLIC_FUNC     reduce using rule 114 (np_method_7 -> .)
    PRIVATE_FUNC    reduce using rule 114 (np_method_7 -> .)
    }               reduce using rule 114 (np_method_7 -> .)

    np_method_7                    shift and go to state 244

state 173

    (117) method_param -> ID np_method_param_1 : param_type . param_mat_vec np_method_param_6 more_params
    (122) param_mat_vec -> . [ param_mat ]
    (123) param_mat_vec -> . np_method_param_3
    (128) np_method_param_3 -> .

    [               shift and go to state 247
    ,               reduce using rule 128 (np_method_param_3 -> .)
    )               reduce using rule 128 (np_method_param_3 -> .)

    param_mat_vec                  shift and go to state 245
    np_method_param_3              shift and go to state 246

state 174

    (120) param_type -> type .

    [               reduce using rule 120 (param_type -> type .)
    ,               reduce using rule 120 (param_type -> type .)
    )               reduce using rule 120 (param_type -> type .)


state 175

    (121) param_type -> ID . np_method_param_2
    (127) np_method_param_2 -> .

    [               reduce using rule 127 (np_method_param_2 -> .)
    ,               reduce using rule 127 (np_method_param_2 -> .)
    )               reduce using rule 127 (np_method_param_2 -> .)

    np_method_param_2              shift and go to state 248

state 176

    (59) vector -> VEC ids : vec_mat_type [ CONST_I ] . np_vector_1 vec_assgn ; np_vector_2
    (62) np_vector_1 -> .

    =               reduce using rule 62 (np_vector_1 -> .)
    ;               reduce using rule 62 (np_vector_1 -> .)

    np_vector_1                    shift and go to state 249

state 177

    (45) vars_tp_a -> = np_vars_4 . expression np_vars_5
    (184) expression -> . rel_expression np_expression_1 expression_op
    (191) rel_expression -> . rel_expression_1 np_rel_expression_1 rel_exp_op
    (197) rel_expression_1 -> . exp np_rel_expression_1_1 rel_exp_1_op
    (205) exp -> . term np_exp_1 exp_op
    (211) term -> . factor np_term_1 term_op
    (233) factor -> . fact_neg fact_body np_factor_7
    (234) fact_neg -> . - np_factor_2
    (235) fact_neg -> . ~ np_factor_3
    (236) fact_neg -> . empty
    (251) empty -> .

    -               shift and go to state 130
    ~               shift and go to state 123
    (               reduce using rule 251 (empty -> .)
    CONST_I         reduce using rule 251 (empty -> .)
    CONST_F         reduce using rule 251 (empty -> .)
    CONST_CHAR      reduce using rule 251 (empty -> .)
    CONST_STRING    reduce using rule 251 (empty -> .)
    CONST_BOOL      reduce using rule 251 (empty -> .)
    THIS            reduce using rule 251 (empty -> .)
    ID              reduce using rule 251 (empty -> .)

    expression                     shift and go to state 250
    empty                          shift and go to state 125
    term                           shift and go to state 127
    fact_neg                       shift and go to state 129
    exp                            shift and go to state 132
    factor                         shift and go to state 134
    rel_expression                 shift and go to state 131
    rel_expression_1               shift and go to state 128

state 178

    (50) vars_assgn -> expression .

    ;               reduce using rule 50 (vars_assgn -> expression .)


state 179

    (47) vars_tp_b -> = vars_assgn .

    ;               reduce using rule 47 (vars_tp_b -> = vars_assgn .)


state 180

    (132) create_obj -> NEW . func_call
    (133) func_call -> . np_func_call_1 ( func_param np_func_call_3 ) np_func_call_4
    (137) np_func_call_1 -> .

    (               reduce using rule 137 (np_func_call_1 -> .)

    func_call                      shift and go to state 252
    np_func_call_1                 shift and go to state 251

state 181

    (49) vars_assgn -> create_obj .

    ;               reduce using rule 49 (vars_assgn -> create_obj .)


state 182

    (64) matrix -> MAT ids : vec_mat_type [ CONST_I , . CONST_I ] np_matrix_1 mat_assgn ; np_matrix_2

    CONST_I         shift and go to state 253


state 183

    (97) mat_vec_access -> [ mat_vec_index mat_access ] .

    .               reduce using rule 97 (mat_vec_access -> [ mat_vec_index mat_access ] .)
    *               reduce using rule 97 (mat_vec_access -> [ mat_vec_index mat_access ] .)
    /               reduce using rule 97 (mat_vec_access -> [ mat_vec_index mat_access ] .)
    %               reduce using rule 97 (mat_vec_access -> [ mat_vec_index mat_access ] .)
    +               reduce using rule 97 (mat_vec_access -> [ mat_vec_index mat_access ] .)
    -               reduce using rule 97 (mat_vec_access -> [ mat_vec_index mat_access ] .)
    <               reduce using rule 97 (mat_vec_access -> [ mat_vec_index mat_access ] .)
    LESS_EQUAL_THAN reduce using rule 97 (mat_vec_access -> [ mat_vec_index mat_access ] .)
    >               reduce using rule 97 (mat_vec_access -> [ mat_vec_index mat_access ] .)
    GREATER_EQUAL_THAN reduce using rule 97 (mat_vec_access -> [ mat_vec_index mat_access ] .)
    EQUAL           reduce using rule 97 (mat_vec_access -> [ mat_vec_index mat_access ] .)
    NOT_EQUAL       reduce using rule 97 (mat_vec_access -> [ mat_vec_index mat_access ] .)
    AND             reduce using rule 97 (mat_vec_access -> [ mat_vec_index mat_access ] .)
    OR              reduce using rule 97 (mat_vec_access -> [ mat_vec_index mat_access ] .)
    XOR             reduce using rule 97 (mat_vec_access -> [ mat_vec_index mat_access ] .)
    ,               reduce using rule 97 (mat_vec_access -> [ mat_vec_index mat_access ] .)
    ]               reduce using rule 97 (mat_vec_access -> [ mat_vec_index mat_access ] .)
    ;               reduce using rule 97 (mat_vec_access -> [ mat_vec_index mat_access ] .)
    )               reduce using rule 97 (mat_vec_access -> [ mat_vec_index mat_access ] .)
    =               reduce using rule 97 (mat_vec_access -> [ mat_vec_index mat_access ] .)


state 184

    (100) mat_access -> , mat_vec_index .

    ]               reduce using rule 100 (mat_access -> , mat_vec_index .)


state 185

    (206) exp_op -> + . np_exp_2 exp
    (210) np_exp_2 -> .

    -               reduce using rule 210 (np_exp_2 -> .)
    ~               reduce using rule 210 (np_exp_2 -> .)
    (               reduce using rule 210 (np_exp_2 -> .)
    CONST_I         reduce using rule 210 (np_exp_2 -> .)
    CONST_F         reduce using rule 210 (np_exp_2 -> .)
    CONST_CHAR      reduce using rule 210 (np_exp_2 -> .)
    CONST_STRING    reduce using rule 210 (np_exp_2 -> .)
    CONST_BOOL      reduce using rule 210 (np_exp_2 -> .)
    THIS            reduce using rule 210 (np_exp_2 -> .)
    ID              reduce using rule 210 (np_exp_2 -> .)

    np_exp_2                       shift and go to state 254

state 186

    (208) exp_op -> empty .

    <               reduce using rule 208 (exp_op -> empty .)
    LESS_EQUAL_THAN reduce using rule 208 (exp_op -> empty .)
    >               reduce using rule 208 (exp_op -> empty .)
    GREATER_EQUAL_THAN reduce using rule 208 (exp_op -> empty .)
    EQUAL           reduce using rule 208 (exp_op -> empty .)
    NOT_EQUAL       reduce using rule 208 (exp_op -> empty .)
    AND             reduce using rule 208 (exp_op -> empty .)
    OR              reduce using rule 208 (exp_op -> empty .)
    XOR             reduce using rule 208 (exp_op -> empty .)
    ,               reduce using rule 208 (exp_op -> empty .)
    ]               reduce using rule 208 (exp_op -> empty .)
    ;               reduce using rule 208 (exp_op -> empty .)
    )               reduce using rule 208 (exp_op -> empty .)


state 187

    (205) exp -> term np_exp_1 exp_op .

    <               reduce using rule 205 (exp -> term np_exp_1 exp_op .)
    LESS_EQUAL_THAN reduce using rule 205 (exp -> term np_exp_1 exp_op .)
    >               reduce using rule 205 (exp -> term np_exp_1 exp_op .)
    GREATER_EQUAL_THAN reduce using rule 205 (exp -> term np_exp_1 exp_op .)
    EQUAL           reduce using rule 205 (exp -> term np_exp_1 exp_op .)
    NOT_EQUAL       reduce using rule 205 (exp -> term np_exp_1 exp_op .)
    AND             reduce using rule 205 (exp -> term np_exp_1 exp_op .)
    OR              reduce using rule 205 (exp -> term np_exp_1 exp_op .)
    XOR             reduce using rule 205 (exp -> term np_exp_1 exp_op .)
    ,               reduce using rule 205 (exp -> term np_exp_1 exp_op .)
    ]               reduce using rule 205 (exp -> term np_exp_1 exp_op .)
    ;               reduce using rule 205 (exp -> term np_exp_1 exp_op .)
    )               reduce using rule 205 (exp -> term np_exp_1 exp_op .)


state 188

    (207) exp_op -> - . np_exp_2 exp
    (210) np_exp_2 -> .

    -               reduce using rule 210 (np_exp_2 -> .)
    ~               reduce using rule 210 (np_exp_2 -> .)
    (               reduce using rule 210 (np_exp_2 -> .)
    CONST_I         reduce using rule 210 (np_exp_2 -> .)
    CONST_F         reduce using rule 210 (np_exp_2 -> .)
    CONST_CHAR      reduce using rule 210 (np_exp_2 -> .)
    CONST_STRING    reduce using rule 210 (np_exp_2 -> .)
    CONST_BOOL      reduce using rule 210 (np_exp_2 -> .)
    THIS            reduce using rule 210 (np_exp_2 -> .)
    ID              reduce using rule 210 (np_exp_2 -> .)

    np_exp_2                       shift and go to state 255

state 189

    (194) rel_exp_op -> empty .

    AND             reduce using rule 194 (rel_exp_op -> empty .)
    OR              reduce using rule 194 (rel_exp_op -> empty .)
    XOR             reduce using rule 194 (rel_exp_op -> empty .)
    ,               reduce using rule 194 (rel_exp_op -> empty .)
    ]               reduce using rule 194 (rel_exp_op -> empty .)
    ;               reduce using rule 194 (rel_exp_op -> empty .)
    )               reduce using rule 194 (rel_exp_op -> empty .)


state 190

    (192) rel_exp_op -> EQUAL . np_rel_expression_2 rel_expression
    (196) np_rel_expression_2 -> .

    -               reduce using rule 196 (np_rel_expression_2 -> .)
    ~               reduce using rule 196 (np_rel_expression_2 -> .)
    (               reduce using rule 196 (np_rel_expression_2 -> .)
    CONST_I         reduce using rule 196 (np_rel_expression_2 -> .)
    CONST_F         reduce using rule 196 (np_rel_expression_2 -> .)
    CONST_CHAR      reduce using rule 196 (np_rel_expression_2 -> .)
    CONST_STRING    reduce using rule 196 (np_rel_expression_2 -> .)
    CONST_BOOL      reduce using rule 196 (np_rel_expression_2 -> .)
    THIS            reduce using rule 196 (np_rel_expression_2 -> .)
    ID              reduce using rule 196 (np_rel_expression_2 -> .)

    np_rel_expression_2            shift and go to state 256

state 191

    (193) rel_exp_op -> NOT_EQUAL . np_rel_expression_2 rel_expression
    (196) np_rel_expression_2 -> .

    -               reduce using rule 196 (np_rel_expression_2 -> .)
    ~               reduce using rule 196 (np_rel_expression_2 -> .)
    (               reduce using rule 196 (np_rel_expression_2 -> .)
    CONST_I         reduce using rule 196 (np_rel_expression_2 -> .)
    CONST_F         reduce using rule 196 (np_rel_expression_2 -> .)
    CONST_CHAR      reduce using rule 196 (np_rel_expression_2 -> .)
    CONST_STRING    reduce using rule 196 (np_rel_expression_2 -> .)
    CONST_BOOL      reduce using rule 196 (np_rel_expression_2 -> .)
    THIS            reduce using rule 196 (np_rel_expression_2 -> .)
    ID              reduce using rule 196 (np_rel_expression_2 -> .)

    np_rel_expression_2            shift and go to state 257

state 192

    (191) rel_expression -> rel_expression_1 np_rel_expression_1 rel_exp_op .

    AND             reduce using rule 191 (rel_expression -> rel_expression_1 np_rel_expression_1 rel_exp_op .)
    OR              reduce using rule 191 (rel_expression -> rel_expression_1 np_rel_expression_1 rel_exp_op .)
    XOR             reduce using rule 191 (rel_expression -> rel_expression_1 np_rel_expression_1 rel_exp_op .)
    ;               reduce using rule 191 (rel_expression -> rel_expression_1 np_rel_expression_1 rel_exp_op .)
    )               reduce using rule 191 (rel_expression -> rel_expression_1 np_rel_expression_1 rel_exp_op .)
    ]               reduce using rule 191 (rel_expression -> rel_expression_1 np_rel_expression_1 rel_exp_op .)
    ,               reduce using rule 191 (rel_expression -> rel_expression_1 np_rel_expression_1 rel_exp_op .)


state 193

    (223) var_cte -> CONST_I np_var_cte_1 .

    *               reduce using rule 223 (var_cte -> CONST_I np_var_cte_1 .)
    /               reduce using rule 223 (var_cte -> CONST_I np_var_cte_1 .)
    %               reduce using rule 223 (var_cte -> CONST_I np_var_cte_1 .)
    +               reduce using rule 223 (var_cte -> CONST_I np_var_cte_1 .)
    -               reduce using rule 223 (var_cte -> CONST_I np_var_cte_1 .)
    <               reduce using rule 223 (var_cte -> CONST_I np_var_cte_1 .)
    LESS_EQUAL_THAN reduce using rule 223 (var_cte -> CONST_I np_var_cte_1 .)
    >               reduce using rule 223 (var_cte -> CONST_I np_var_cte_1 .)
    GREATER_EQUAL_THAN reduce using rule 223 (var_cte -> CONST_I np_var_cte_1 .)
    EQUAL           reduce using rule 223 (var_cte -> CONST_I np_var_cte_1 .)
    NOT_EQUAL       reduce using rule 223 (var_cte -> CONST_I np_var_cte_1 .)
    AND             reduce using rule 223 (var_cte -> CONST_I np_var_cte_1 .)
    OR              reduce using rule 223 (var_cte -> CONST_I np_var_cte_1 .)
    XOR             reduce using rule 223 (var_cte -> CONST_I np_var_cte_1 .)
    ,               reduce using rule 223 (var_cte -> CONST_I np_var_cte_1 .)
    ]               reduce using rule 223 (var_cte -> CONST_I np_var_cte_1 .)
    ;               reduce using rule 223 (var_cte -> CONST_I np_var_cte_1 .)
    )               reduce using rule 223 (var_cte -> CONST_I np_var_cte_1 .)


state 194

    (227) var_cte -> CONST_BOOL np_var_cte_5 .

    *               reduce using rule 227 (var_cte -> CONST_BOOL np_var_cte_5 .)
    /               reduce using rule 227 (var_cte -> CONST_BOOL np_var_cte_5 .)
    %               reduce using rule 227 (var_cte -> CONST_BOOL np_var_cte_5 .)
    +               reduce using rule 227 (var_cte -> CONST_BOOL np_var_cte_5 .)
    -               reduce using rule 227 (var_cte -> CONST_BOOL np_var_cte_5 .)
    <               reduce using rule 227 (var_cte -> CONST_BOOL np_var_cte_5 .)
    LESS_EQUAL_THAN reduce using rule 227 (var_cte -> CONST_BOOL np_var_cte_5 .)
    >               reduce using rule 227 (var_cte -> CONST_BOOL np_var_cte_5 .)
    GREATER_EQUAL_THAN reduce using rule 227 (var_cte -> CONST_BOOL np_var_cte_5 .)
    EQUAL           reduce using rule 227 (var_cte -> CONST_BOOL np_var_cte_5 .)
    NOT_EQUAL       reduce using rule 227 (var_cte -> CONST_BOOL np_var_cte_5 .)
    AND             reduce using rule 227 (var_cte -> CONST_BOOL np_var_cte_5 .)
    OR              reduce using rule 227 (var_cte -> CONST_BOOL np_var_cte_5 .)
    XOR             reduce using rule 227 (var_cte -> CONST_BOOL np_var_cte_5 .)
    ,               reduce using rule 227 (var_cte -> CONST_BOOL np_var_cte_5 .)
    ]               reduce using rule 227 (var_cte -> CONST_BOOL np_var_cte_5 .)
    ;               reduce using rule 227 (var_cte -> CONST_BOOL np_var_cte_5 .)
    )               reduce using rule 227 (var_cte -> CONST_BOOL np_var_cte_5 .)


state 195

    (233) factor -> fact_neg fact_body np_factor_7 .

    *               reduce using rule 233 (factor -> fact_neg fact_body np_factor_7 .)
    /               reduce using rule 233 (factor -> fact_neg fact_body np_factor_7 .)
    %               reduce using rule 233 (factor -> fact_neg fact_body np_factor_7 .)
    +               reduce using rule 233 (factor -> fact_neg fact_body np_factor_7 .)
    -               reduce using rule 233 (factor -> fact_neg fact_body np_factor_7 .)
    <               reduce using rule 233 (factor -> fact_neg fact_body np_factor_7 .)
    LESS_EQUAL_THAN reduce using rule 233 (factor -> fact_neg fact_body np_factor_7 .)
    >               reduce using rule 233 (factor -> fact_neg fact_body np_factor_7 .)
    GREATER_EQUAL_THAN reduce using rule 233 (factor -> fact_neg fact_body np_factor_7 .)
    EQUAL           reduce using rule 233 (factor -> fact_neg fact_body np_factor_7 .)
    NOT_EQUAL       reduce using rule 233 (factor -> fact_neg fact_body np_factor_7 .)
    AND             reduce using rule 233 (factor -> fact_neg fact_body np_factor_7 .)
    OR              reduce using rule 233 (factor -> fact_neg fact_body np_factor_7 .)
    XOR             reduce using rule 233 (factor -> fact_neg fact_body np_factor_7 .)
    ,               reduce using rule 233 (factor -> fact_neg fact_body np_factor_7 .)
    ]               reduce using rule 233 (factor -> fact_neg fact_body np_factor_7 .)
    ;               reduce using rule 233 (factor -> fact_neg fact_body np_factor_7 .)
    )               reduce using rule 233 (factor -> fact_neg fact_body np_factor_7 .)


state 196

    (238) fact_body -> var_cte np_factor_6 .

    *               reduce using rule 238 (fact_body -> var_cte np_factor_6 .)
    /               reduce using rule 238 (fact_body -> var_cte np_factor_6 .)
    %               reduce using rule 238 (fact_body -> var_cte np_factor_6 .)
    +               reduce using rule 238 (fact_body -> var_cte np_factor_6 .)
    -               reduce using rule 238 (fact_body -> var_cte np_factor_6 .)
    <               reduce using rule 238 (fact_body -> var_cte np_factor_6 .)
    LESS_EQUAL_THAN reduce using rule 238 (fact_body -> var_cte np_factor_6 .)
    >               reduce using rule 238 (fact_body -> var_cte np_factor_6 .)
    GREATER_EQUAL_THAN reduce using rule 238 (fact_body -> var_cte np_factor_6 .)
    EQUAL           reduce using rule 238 (fact_body -> var_cte np_factor_6 .)
    NOT_EQUAL       reduce using rule 238 (fact_body -> var_cte np_factor_6 .)
    AND             reduce using rule 238 (fact_body -> var_cte np_factor_6 .)
    OR              reduce using rule 238 (fact_body -> var_cte np_factor_6 .)
    XOR             reduce using rule 238 (fact_body -> var_cte np_factor_6 .)
    ,               reduce using rule 238 (fact_body -> var_cte np_factor_6 .)
    ]               reduce using rule 238 (fact_body -> var_cte np_factor_6 .)
    ;               reduce using rule 238 (fact_body -> var_cte np_factor_6 .)
    )               reduce using rule 238 (fact_body -> var_cte np_factor_6 .)


state 197

    (225) var_cte -> CONST_CHAR np_var_cte_3 .

    *               reduce using rule 225 (var_cte -> CONST_CHAR np_var_cte_3 .)
    /               reduce using rule 225 (var_cte -> CONST_CHAR np_var_cte_3 .)
    %               reduce using rule 225 (var_cte -> CONST_CHAR np_var_cte_3 .)
    +               reduce using rule 225 (var_cte -> CONST_CHAR np_var_cte_3 .)
    -               reduce using rule 225 (var_cte -> CONST_CHAR np_var_cte_3 .)
    <               reduce using rule 225 (var_cte -> CONST_CHAR np_var_cte_3 .)
    LESS_EQUAL_THAN reduce using rule 225 (var_cte -> CONST_CHAR np_var_cte_3 .)
    >               reduce using rule 225 (var_cte -> CONST_CHAR np_var_cte_3 .)
    GREATER_EQUAL_THAN reduce using rule 225 (var_cte -> CONST_CHAR np_var_cte_3 .)
    EQUAL           reduce using rule 225 (var_cte -> CONST_CHAR np_var_cte_3 .)
    NOT_EQUAL       reduce using rule 225 (var_cte -> CONST_CHAR np_var_cte_3 .)
    AND             reduce using rule 225 (var_cte -> CONST_CHAR np_var_cte_3 .)
    OR              reduce using rule 225 (var_cte -> CONST_CHAR np_var_cte_3 .)
    XOR             reduce using rule 225 (var_cte -> CONST_CHAR np_var_cte_3 .)
    ,               reduce using rule 225 (var_cte -> CONST_CHAR np_var_cte_3 .)
    ]               reduce using rule 225 (var_cte -> CONST_CHAR np_var_cte_3 .)
    ;               reduce using rule 225 (var_cte -> CONST_CHAR np_var_cte_3 .)
    )               reduce using rule 225 (var_cte -> CONST_CHAR np_var_cte_3 .)


state 198

    (239) fact_body -> this ID . np_factor_1 fact_id
    (242) np_factor_1 -> .

    (               reduce using rule 242 (np_factor_1 -> .)
    [               reduce using rule 242 (np_factor_1 -> .)
    .               reduce using rule 242 (np_factor_1 -> .)
    *               reduce using rule 242 (np_factor_1 -> .)
    /               reduce using rule 242 (np_factor_1 -> .)
    %               reduce using rule 242 (np_factor_1 -> .)
    +               reduce using rule 242 (np_factor_1 -> .)
    -               reduce using rule 242 (np_factor_1 -> .)
    <               reduce using rule 242 (np_factor_1 -> .)
    LESS_EQUAL_THAN reduce using rule 242 (np_factor_1 -> .)
    >               reduce using rule 242 (np_factor_1 -> .)
    GREATER_EQUAL_THAN reduce using rule 242 (np_factor_1 -> .)
    EQUAL           reduce using rule 242 (np_factor_1 -> .)
    NOT_EQUAL       reduce using rule 242 (np_factor_1 -> .)
    AND             reduce using rule 242 (np_factor_1 -> .)
    OR              reduce using rule 242 (np_factor_1 -> .)
    XOR             reduce using rule 242 (np_factor_1 -> .)
    ,               reduce using rule 242 (np_factor_1 -> .)
    ]               reduce using rule 242 (np_factor_1 -> .)
    ;               reduce using rule 242 (np_factor_1 -> .)
    )               reduce using rule 242 (np_factor_1 -> .)

    np_factor_1                    shift and go to state 258

state 199

    (224) var_cte -> CONST_F np_var_cte_2 .

    *               reduce using rule 224 (var_cte -> CONST_F np_var_cte_2 .)
    /               reduce using rule 224 (var_cte -> CONST_F np_var_cte_2 .)
    %               reduce using rule 224 (var_cte -> CONST_F np_var_cte_2 .)
    +               reduce using rule 224 (var_cte -> CONST_F np_var_cte_2 .)
    -               reduce using rule 224 (var_cte -> CONST_F np_var_cte_2 .)
    <               reduce using rule 224 (var_cte -> CONST_F np_var_cte_2 .)
    LESS_EQUAL_THAN reduce using rule 224 (var_cte -> CONST_F np_var_cte_2 .)
    >               reduce using rule 224 (var_cte -> CONST_F np_var_cte_2 .)
    GREATER_EQUAL_THAN reduce using rule 224 (var_cte -> CONST_F np_var_cte_2 .)
    EQUAL           reduce using rule 224 (var_cte -> CONST_F np_var_cte_2 .)
    NOT_EQUAL       reduce using rule 224 (var_cte -> CONST_F np_var_cte_2 .)
    AND             reduce using rule 224 (var_cte -> CONST_F np_var_cte_2 .)
    OR              reduce using rule 224 (var_cte -> CONST_F np_var_cte_2 .)
    XOR             reduce using rule 224 (var_cte -> CONST_F np_var_cte_2 .)
    ,               reduce using rule 224 (var_cte -> CONST_F np_var_cte_2 .)
    ]               reduce using rule 224 (var_cte -> CONST_F np_var_cte_2 .)
    ;               reduce using rule 224 (var_cte -> CONST_F np_var_cte_2 .)
    )               reduce using rule 224 (var_cte -> CONST_F np_var_cte_2 .)


state 200

    (226) var_cte -> CONST_STRING np_var_cte_4 .

    *               reduce using rule 226 (var_cte -> CONST_STRING np_var_cte_4 .)
    /               reduce using rule 226 (var_cte -> CONST_STRING np_var_cte_4 .)
    %               reduce using rule 226 (var_cte -> CONST_STRING np_var_cte_4 .)
    +               reduce using rule 226 (var_cte -> CONST_STRING np_var_cte_4 .)
    -               reduce using rule 226 (var_cte -> CONST_STRING np_var_cte_4 .)
    <               reduce using rule 226 (var_cte -> CONST_STRING np_var_cte_4 .)
    LESS_EQUAL_THAN reduce using rule 226 (var_cte -> CONST_STRING np_var_cte_4 .)
    >               reduce using rule 226 (var_cte -> CONST_STRING np_var_cte_4 .)
    GREATER_EQUAL_THAN reduce using rule 226 (var_cte -> CONST_STRING np_var_cte_4 .)
    EQUAL           reduce using rule 226 (var_cte -> CONST_STRING np_var_cte_4 .)
    NOT_EQUAL       reduce using rule 226 (var_cte -> CONST_STRING np_var_cte_4 .)
    AND             reduce using rule 226 (var_cte -> CONST_STRING np_var_cte_4 .)
    OR              reduce using rule 226 (var_cte -> CONST_STRING np_var_cte_4 .)
    XOR             reduce using rule 226 (var_cte -> CONST_STRING np_var_cte_4 .)
    ,               reduce using rule 226 (var_cte -> CONST_STRING np_var_cte_4 .)
    ]               reduce using rule 226 (var_cte -> CONST_STRING np_var_cte_4 .)
    ;               reduce using rule 226 (var_cte -> CONST_STRING np_var_cte_4 .)
    )               reduce using rule 226 (var_cte -> CONST_STRING np_var_cte_4 .)


state 201

    (237) fact_body -> ( np_factor_4 . expression ) np_factor_5
    (184) expression -> . rel_expression np_expression_1 expression_op
    (191) rel_expression -> . rel_expression_1 np_rel_expression_1 rel_exp_op
    (197) rel_expression_1 -> . exp np_rel_expression_1_1 rel_exp_1_op
    (205) exp -> . term np_exp_1 exp_op
    (211) term -> . factor np_term_1 term_op
    (233) factor -> . fact_neg fact_body np_factor_7
    (234) fact_neg -> . - np_factor_2
    (235) fact_neg -> . ~ np_factor_3
    (236) fact_neg -> . empty
    (251) empty -> .

    -               shift and go to state 130
    ~               shift and go to state 123
    (               reduce using rule 251 (empty -> .)
    CONST_I         reduce using rule 251 (empty -> .)
    CONST_F         reduce using rule 251 (empty -> .)
    CONST_CHAR      reduce using rule 251 (empty -> .)
    CONST_STRING    reduce using rule 251 (empty -> .)
    CONST_BOOL      reduce using rule 251 (empty -> .)
    THIS            reduce using rule 251 (empty -> .)
    ID              reduce using rule 251 (empty -> .)

    expression                     shift and go to state 259
    empty                          shift and go to state 125
    term                           shift and go to state 127
    fact_neg                       shift and go to state 129
    exp                            shift and go to state 132
    factor                         shift and go to state 134
    rel_expression                 shift and go to state 131
    rel_expression_1               shift and go to state 128

state 202

    (186) expression_op -> OR . np_expression_2 expression
    (190) np_expression_2 -> .

    -               reduce using rule 190 (np_expression_2 -> .)
    ~               reduce using rule 190 (np_expression_2 -> .)
    (               reduce using rule 190 (np_expression_2 -> .)
    CONST_I         reduce using rule 190 (np_expression_2 -> .)
    CONST_F         reduce using rule 190 (np_expression_2 -> .)
    CONST_CHAR      reduce using rule 190 (np_expression_2 -> .)
    CONST_STRING    reduce using rule 190 (np_expression_2 -> .)
    CONST_BOOL      reduce using rule 190 (np_expression_2 -> .)
    THIS            reduce using rule 190 (np_expression_2 -> .)
    ID              reduce using rule 190 (np_expression_2 -> .)

    np_expression_2                shift and go to state 260

state 203

    (187) expression_op -> XOR . np_expression_2 expression
    (190) np_expression_2 -> .

    -               reduce using rule 190 (np_expression_2 -> .)
    ~               reduce using rule 190 (np_expression_2 -> .)
    (               reduce using rule 190 (np_expression_2 -> .)
    CONST_I         reduce using rule 190 (np_expression_2 -> .)
    CONST_F         reduce using rule 190 (np_expression_2 -> .)
    CONST_CHAR      reduce using rule 190 (np_expression_2 -> .)
    CONST_STRING    reduce using rule 190 (np_expression_2 -> .)
    CONST_BOOL      reduce using rule 190 (np_expression_2 -> .)
    THIS            reduce using rule 190 (np_expression_2 -> .)
    ID              reduce using rule 190 (np_expression_2 -> .)

    np_expression_2                shift and go to state 261

state 204

    (184) expression -> rel_expression np_expression_1 expression_op .

    ,               reduce using rule 184 (expression -> rel_expression np_expression_1 expression_op .)
    ]               reduce using rule 184 (expression -> rel_expression np_expression_1 expression_op .)
    ;               reduce using rule 184 (expression -> rel_expression np_expression_1 expression_op .)
    )               reduce using rule 184 (expression -> rel_expression np_expression_1 expression_op .)


state 205

    (188) expression_op -> empty .

    ,               reduce using rule 188 (expression_op -> empty .)
    ]               reduce using rule 188 (expression_op -> empty .)
    ;               reduce using rule 188 (expression_op -> empty .)
    )               reduce using rule 188 (expression_op -> empty .)


state 206

    (185) expression_op -> AND . np_expression_2 expression
    (190) np_expression_2 -> .

    -               reduce using rule 190 (np_expression_2 -> .)
    ~               reduce using rule 190 (np_expression_2 -> .)
    (               reduce using rule 190 (np_expression_2 -> .)
    CONST_I         reduce using rule 190 (np_expression_2 -> .)
    CONST_F         reduce using rule 190 (np_expression_2 -> .)
    CONST_CHAR      reduce using rule 190 (np_expression_2 -> .)
    CONST_STRING    reduce using rule 190 (np_expression_2 -> .)
    CONST_BOOL      reduce using rule 190 (np_expression_2 -> .)
    THIS            reduce using rule 190 (np_expression_2 -> .)
    ID              reduce using rule 190 (np_expression_2 -> .)

    np_expression_2                shift and go to state 262

state 207

    (199) rel_exp_1_op -> LESS_EQUAL_THAN . np_rel_expression_1_2 rel_expression_1
    (204) np_rel_expression_1_2 -> .

    -               reduce using rule 204 (np_rel_expression_1_2 -> .)
    ~               reduce using rule 204 (np_rel_expression_1_2 -> .)
    (               reduce using rule 204 (np_rel_expression_1_2 -> .)
    CONST_I         reduce using rule 204 (np_rel_expression_1_2 -> .)
    CONST_F         reduce using rule 204 (np_rel_expression_1_2 -> .)
    CONST_CHAR      reduce using rule 204 (np_rel_expression_1_2 -> .)
    CONST_STRING    reduce using rule 204 (np_rel_expression_1_2 -> .)
    CONST_BOOL      reduce using rule 204 (np_rel_expression_1_2 -> .)
    THIS            reduce using rule 204 (np_rel_expression_1_2 -> .)
    ID              reduce using rule 204 (np_rel_expression_1_2 -> .)

    np_rel_expression_1_2          shift and go to state 263

state 208

    (200) rel_exp_1_op -> > . np_rel_expression_1_2 rel_expression_1
    (204) np_rel_expression_1_2 -> .

    -               reduce using rule 204 (np_rel_expression_1_2 -> .)
    ~               reduce using rule 204 (np_rel_expression_1_2 -> .)
    (               reduce using rule 204 (np_rel_expression_1_2 -> .)
    CONST_I         reduce using rule 204 (np_rel_expression_1_2 -> .)
    CONST_F         reduce using rule 204 (np_rel_expression_1_2 -> .)
    CONST_CHAR      reduce using rule 204 (np_rel_expression_1_2 -> .)
    CONST_STRING    reduce using rule 204 (np_rel_expression_1_2 -> .)
    CONST_BOOL      reduce using rule 204 (np_rel_expression_1_2 -> .)
    THIS            reduce using rule 204 (np_rel_expression_1_2 -> .)
    ID              reduce using rule 204 (np_rel_expression_1_2 -> .)

    np_rel_expression_1_2          shift and go to state 264

state 209

    (201) rel_exp_1_op -> GREATER_EQUAL_THAN . np_rel_expression_1_2 rel_expression_1
    (204) np_rel_expression_1_2 -> .

    -               reduce using rule 204 (np_rel_expression_1_2 -> .)
    ~               reduce using rule 204 (np_rel_expression_1_2 -> .)
    (               reduce using rule 204 (np_rel_expression_1_2 -> .)
    CONST_I         reduce using rule 204 (np_rel_expression_1_2 -> .)
    CONST_F         reduce using rule 204 (np_rel_expression_1_2 -> .)
    CONST_CHAR      reduce using rule 204 (np_rel_expression_1_2 -> .)
    CONST_STRING    reduce using rule 204 (np_rel_expression_1_2 -> .)
    CONST_BOOL      reduce using rule 204 (np_rel_expression_1_2 -> .)
    THIS            reduce using rule 204 (np_rel_expression_1_2 -> .)
    ID              reduce using rule 204 (np_rel_expression_1_2 -> .)

    np_rel_expression_1_2          shift and go to state 265

state 210

    (197) rel_expression_1 -> exp np_rel_expression_1_1 rel_exp_1_op .

    EQUAL           reduce using rule 197 (rel_expression_1 -> exp np_rel_expression_1_1 rel_exp_1_op .)
    NOT_EQUAL       reduce using rule 197 (rel_expression_1 -> exp np_rel_expression_1_1 rel_exp_1_op .)
    AND             reduce using rule 197 (rel_expression_1 -> exp np_rel_expression_1_1 rel_exp_1_op .)
    OR              reduce using rule 197 (rel_expression_1 -> exp np_rel_expression_1_1 rel_exp_1_op .)
    XOR             reduce using rule 197 (rel_expression_1 -> exp np_rel_expression_1_1 rel_exp_1_op .)
    )               reduce using rule 197 (rel_expression_1 -> exp np_rel_expression_1_1 rel_exp_1_op .)
    ;               reduce using rule 197 (rel_expression_1 -> exp np_rel_expression_1_1 rel_exp_1_op .)
    ,               reduce using rule 197 (rel_expression_1 -> exp np_rel_expression_1_1 rel_exp_1_op .)
    ]               reduce using rule 197 (rel_expression_1 -> exp np_rel_expression_1_1 rel_exp_1_op .)


state 211

    (202) rel_exp_1_op -> empty .

    EQUAL           reduce using rule 202 (rel_exp_1_op -> empty .)
    NOT_EQUAL       reduce using rule 202 (rel_exp_1_op -> empty .)
    AND             reduce using rule 202 (rel_exp_1_op -> empty .)
    OR              reduce using rule 202 (rel_exp_1_op -> empty .)
    XOR             reduce using rule 202 (rel_exp_1_op -> empty .)
    ,               reduce using rule 202 (rel_exp_1_op -> empty .)
    ]               reduce using rule 202 (rel_exp_1_op -> empty .)
    ;               reduce using rule 202 (rel_exp_1_op -> empty .)
    )               reduce using rule 202 (rel_exp_1_op -> empty .)


state 212

    (198) rel_exp_1_op -> < . np_rel_expression_1_2 rel_expression_1
    (204) np_rel_expression_1_2 -> .

    -               reduce using rule 204 (np_rel_expression_1_2 -> .)
    ~               reduce using rule 204 (np_rel_expression_1_2 -> .)
    (               reduce using rule 204 (np_rel_expression_1_2 -> .)
    CONST_I         reduce using rule 204 (np_rel_expression_1_2 -> .)
    CONST_F         reduce using rule 204 (np_rel_expression_1_2 -> .)
    CONST_CHAR      reduce using rule 204 (np_rel_expression_1_2 -> .)
    CONST_STRING    reduce using rule 204 (np_rel_expression_1_2 -> .)
    CONST_BOOL      reduce using rule 204 (np_rel_expression_1_2 -> .)
    THIS            reduce using rule 204 (np_rel_expression_1_2 -> .)
    ID              reduce using rule 204 (np_rel_expression_1_2 -> .)

    np_rel_expression_1_2          shift and go to state 266

state 213

    (213) term_op -> / . np_term_2 term
    (217) np_term_2 -> .

    -               reduce using rule 217 (np_term_2 -> .)
    ~               reduce using rule 217 (np_term_2 -> .)
    (               reduce using rule 217 (np_term_2 -> .)
    CONST_I         reduce using rule 217 (np_term_2 -> .)
    CONST_F         reduce using rule 217 (np_term_2 -> .)
    CONST_CHAR      reduce using rule 217 (np_term_2 -> .)
    CONST_STRING    reduce using rule 217 (np_term_2 -> .)
    CONST_BOOL      reduce using rule 217 (np_term_2 -> .)
    THIS            reduce using rule 217 (np_term_2 -> .)
    ID              reduce using rule 217 (np_term_2 -> .)

    np_term_2                      shift and go to state 267

state 214

    (212) term_op -> * . np_term_2 term
    (217) np_term_2 -> .

    -               reduce using rule 217 (np_term_2 -> .)
    ~               reduce using rule 217 (np_term_2 -> .)
    (               reduce using rule 217 (np_term_2 -> .)
    CONST_I         reduce using rule 217 (np_term_2 -> .)
    CONST_F         reduce using rule 217 (np_term_2 -> .)
    CONST_CHAR      reduce using rule 217 (np_term_2 -> .)
    CONST_STRING    reduce using rule 217 (np_term_2 -> .)
    CONST_BOOL      reduce using rule 217 (np_term_2 -> .)
    THIS            reduce using rule 217 (np_term_2 -> .)
    ID              reduce using rule 217 (np_term_2 -> .)

    np_term_2                      shift and go to state 268

state 215

    (215) term_op -> empty .

    +               reduce using rule 215 (term_op -> empty .)
    -               reduce using rule 215 (term_op -> empty .)
    <               reduce using rule 215 (term_op -> empty .)
    LESS_EQUAL_THAN reduce using rule 215 (term_op -> empty .)
    >               reduce using rule 215 (term_op -> empty .)
    GREATER_EQUAL_THAN reduce using rule 215 (term_op -> empty .)
    EQUAL           reduce using rule 215 (term_op -> empty .)
    NOT_EQUAL       reduce using rule 215 (term_op -> empty .)
    AND             reduce using rule 215 (term_op -> empty .)
    OR              reduce using rule 215 (term_op -> empty .)
    XOR             reduce using rule 215 (term_op -> empty .)
    ,               reduce using rule 215 (term_op -> empty .)
    ]               reduce using rule 215 (term_op -> empty .)
    ;               reduce using rule 215 (term_op -> empty .)
    )               reduce using rule 215 (term_op -> empty .)


state 216

    (214) term_op -> % . np_term_2 term
    (217) np_term_2 -> .

    -               reduce using rule 217 (np_term_2 -> .)
    ~               reduce using rule 217 (np_term_2 -> .)
    (               reduce using rule 217 (np_term_2 -> .)
    CONST_I         reduce using rule 217 (np_term_2 -> .)
    CONST_F         reduce using rule 217 (np_term_2 -> .)
    CONST_CHAR      reduce using rule 217 (np_term_2 -> .)
    CONST_STRING    reduce using rule 217 (np_term_2 -> .)
    CONST_BOOL      reduce using rule 217 (np_term_2 -> .)
    THIS            reduce using rule 217 (np_term_2 -> .)
    ID              reduce using rule 217 (np_term_2 -> .)

    np_term_2                      shift and go to state 269

state 217

    (211) term -> factor np_term_1 term_op .

    +               reduce using rule 211 (term -> factor np_term_1 term_op .)
    -               reduce using rule 211 (term -> factor np_term_1 term_op .)
    <               reduce using rule 211 (term -> factor np_term_1 term_op .)
    LESS_EQUAL_THAN reduce using rule 211 (term -> factor np_term_1 term_op .)
    >               reduce using rule 211 (term -> factor np_term_1 term_op .)
    GREATER_EQUAL_THAN reduce using rule 211 (term -> factor np_term_1 term_op .)
    EQUAL           reduce using rule 211 (term -> factor np_term_1 term_op .)
    NOT_EQUAL       reduce using rule 211 (term -> factor np_term_1 term_op .)
    AND             reduce using rule 211 (term -> factor np_term_1 term_op .)
    OR              reduce using rule 211 (term -> factor np_term_1 term_op .)
    XOR             reduce using rule 211 (term -> factor np_term_1 term_op .)
    ,               reduce using rule 211 (term -> factor np_term_1 term_op .)
    ]               reduce using rule 211 (term -> factor np_term_1 term_op .)
    )               reduce using rule 211 (term -> factor np_term_1 term_op .)
    ;               reduce using rule 211 (term -> factor np_term_1 term_op .)


state 218

    (72) id_var_acc -> . np_id_access_1 ID . id_mat_acc
    (70) id_mat_acc -> . mat_vec_access
    (71) id_mat_acc -> . empty
    (97) mat_vec_access -> . [ mat_vec_index mat_access ]
    (251) empty -> .

    [               shift and go to state 109
    =               reduce using rule 251 (empty -> .)
    *               reduce using rule 251 (empty -> .)
    /               reduce using rule 251 (empty -> .)
    %               reduce using rule 251 (empty -> .)
    +               reduce using rule 251 (empty -> .)
    -               reduce using rule 251 (empty -> .)
    <               reduce using rule 251 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 251 (empty -> .)
    >               reduce using rule 251 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 251 (empty -> .)
    EQUAL           reduce using rule 251 (empty -> .)
    NOT_EQUAL       reduce using rule 251 (empty -> .)
    AND             reduce using rule 251 (empty -> .)
    OR              reduce using rule 251 (empty -> .)
    XOR             reduce using rule 251 (empty -> .)
    ,               reduce using rule 251 (empty -> .)
    ]               reduce using rule 251 (empty -> .)
    ;               reduce using rule 251 (empty -> .)
    )               reduce using rule 251 (empty -> .)

    mat_vec_access                 shift and go to state 111
    id_mat_acc                     shift and go to state 270
    empty                          shift and go to state 110

state 219

    (87) vector_exp -> [ . vec_elem ]
    (88) vec_elem -> . vec_object vec_more
    (89) vec_object -> . create_obj
    (90) vec_object -> . expression
    (132) create_obj -> . NEW func_call
    (184) expression -> . rel_expression np_expression_1 expression_op
    (191) rel_expression -> . rel_expression_1 np_rel_expression_1 rel_exp_op
    (197) rel_expression_1 -> . exp np_rel_expression_1_1 rel_exp_1_op
    (205) exp -> . term np_exp_1 exp_op
    (211) term -> . factor np_term_1 term_op
    (233) factor -> . fact_neg fact_body np_factor_7
    (234) fact_neg -> . - np_factor_2
    (235) fact_neg -> . ~ np_factor_3
    (236) fact_neg -> . empty
    (251) empty -> .

    NEW             shift and go to state 180
    -               shift and go to state 130
    ~               shift and go to state 123
    (               reduce using rule 251 (empty -> .)
    CONST_I         reduce using rule 251 (empty -> .)
    CONST_F         reduce using rule 251 (empty -> .)
    CONST_CHAR      reduce using rule 251 (empty -> .)
    CONST_STRING    reduce using rule 251 (empty -> .)
    CONST_BOOL      reduce using rule 251 (empty -> .)
    THIS            reduce using rule 251 (empty -> .)
    ID              reduce using rule 251 (empty -> .)

    expression                     shift and go to state 271
    empty                          shift and go to state 125
    vec_object                     shift and go to state 272
    term                           shift and go to state 127
    rel_expression_1               shift and go to state 128
    fact_neg                       shift and go to state 129
    exp                            shift and go to state 132
    factor                         shift and go to state 134
    rel_expression                 shift and go to state 131
    create_obj                     shift and go to state 273
    vec_elem                       shift and go to state 274

state 220

    (78) ass_value -> matrix_exp .

    ;               reduce using rule 78 (ass_value -> matrix_exp .)


state 221

    (76) ass_value -> create_obj .

    ;               reduce using rule 76 (ass_value -> create_obj .)


state 222

    (93) matrix_exp -> { . mat_elem }
    (94) mat_elem -> . vector_exp mat_more
    (87) vector_exp -> . [ vec_elem ]

    [               shift and go to state 219

    vector_exp                     shift and go to state 276
    mat_elem                       shift and go to state 275

state 223

    (77) ass_value -> expression . np_assignment_3
    (82) np_assignment_3 -> .

    ;               reduce using rule 82 (np_assignment_3 -> .)

    np_assignment_3                shift and go to state 277

state 224

    (79) ass_value -> vector_exp .

    ;               reduce using rule 79 (ass_value -> vector_exp .)


state 225

    (75) assignment -> this ID np_assignment_1 id_access = np_assignment_2 ass_value . ;

    ;               shift and go to state 278


state 226

    (143) bstmt -> empty .

    }               reduce using rule 143 (bstmt -> empty .)


state 227

    (150) statement -> var_decl .

    IF              reduce using rule 150 (statement -> var_decl .)
    PRINT           reduce using rule 150 (statement -> var_decl .)
    SCAN            reduce using rule 150 (statement -> var_decl .)
    RETURN          reduce using rule 150 (statement -> var_decl .)
    THIS            reduce using rule 150 (statement -> var_decl .)
    FOR             reduce using rule 150 (statement -> var_decl .)
    WHILE           reduce using rule 150 (statement -> var_decl .)
    VAR             reduce using rule 150 (statement -> var_decl .)
    VEC             reduce using rule 150 (statement -> var_decl .)
    MAT             reduce using rule 150 (statement -> var_decl .)
    ID              reduce using rule 150 (statement -> var_decl .)
    }               reduce using rule 150 (statement -> var_decl .)


state 228

    (146) statement -> loop .

    IF              reduce using rule 146 (statement -> loop .)
    PRINT           reduce using rule 146 (statement -> loop .)
    SCAN            reduce using rule 146 (statement -> loop .)
    RETURN          reduce using rule 146 (statement -> loop .)
    THIS            reduce using rule 146 (statement -> loop .)
    FOR             reduce using rule 146 (statement -> loop .)
    WHILE           reduce using rule 146 (statement -> loop .)
    VAR             reduce using rule 146 (statement -> loop .)
    VEC             reduce using rule 146 (statement -> loop .)
    MAT             reduce using rule 146 (statement -> loop .)
    ID              reduce using rule 146 (statement -> loop .)
    }               reduce using rule 146 (statement -> loop .)


state 229

    (168) while_loop -> WHILE . np_while_loop_1 ( expression ) np_while_loop_2 block np_while_loop_3
    (169) np_while_loop_1 -> .

    (               reduce using rule 169 (np_while_loop_1 -> .)

    np_while_loop_1                shift and go to state 279

state 230

    (162) loop -> while_loop .

    IF              reduce using rule 162 (loop -> while_loop .)
    PRINT           reduce using rule 162 (loop -> while_loop .)
    SCAN            reduce using rule 162 (loop -> while_loop .)
    RETURN          reduce using rule 162 (loop -> while_loop .)
    THIS            reduce using rule 162 (loop -> while_loop .)
    FOR             reduce using rule 162 (loop -> while_loop .)
    WHILE           reduce using rule 162 (loop -> while_loop .)
    VAR             reduce using rule 162 (loop -> while_loop .)
    VEC             reduce using rule 162 (loop -> while_loop .)
    MAT             reduce using rule 162 (loop -> while_loop .)
    ID              reduce using rule 162 (loop -> while_loop .)
    }               reduce using rule 162 (loop -> while_loop .)


state 231

    (147) statement -> in_out .

    IF              reduce using rule 147 (statement -> in_out .)
    PRINT           reduce using rule 147 (statement -> in_out .)
    SCAN            reduce using rule 147 (statement -> in_out .)
    RETURN          reduce using rule 147 (statement -> in_out .)
    THIS            reduce using rule 147 (statement -> in_out .)
    FOR             reduce using rule 147 (statement -> in_out .)
    WHILE           reduce using rule 147 (statement -> in_out .)
    VAR             reduce using rule 147 (statement -> in_out .)
    VEC             reduce using rule 147 (statement -> in_out .)
    MAT             reduce using rule 147 (statement -> in_out .)
    ID              reduce using rule 147 (statement -> in_out .)
    }               reduce using rule 147 (statement -> in_out .)


state 232

    (145) statement -> condition .

    IF              reduce using rule 145 (statement -> condition .)
    PRINT           reduce using rule 145 (statement -> condition .)
    SCAN            reduce using rule 145 (statement -> condition .)
    RETURN          reduce using rule 145 (statement -> condition .)
    THIS            reduce using rule 145 (statement -> condition .)
    FOR             reduce using rule 145 (statement -> condition .)
    WHILE           reduce using rule 145 (statement -> condition .)
    VAR             reduce using rule 145 (statement -> condition .)
    VEC             reduce using rule 145 (statement -> condition .)
    MAT             reduce using rule 145 (statement -> condition .)
    ID              reduce using rule 145 (statement -> condition .)
    }               reduce using rule 145 (statement -> condition .)


state 233

    (161) loop -> for_loop .

    IF              reduce using rule 161 (loop -> for_loop .)
    PRINT           reduce using rule 161 (loop -> for_loop .)
    SCAN            reduce using rule 161 (loop -> for_loop .)
    RETURN          reduce using rule 161 (loop -> for_loop .)
    THIS            reduce using rule 161 (loop -> for_loop .)
    FOR             reduce using rule 161 (loop -> for_loop .)
    WHILE           reduce using rule 161 (loop -> for_loop .)
    VAR             reduce using rule 161 (loop -> for_loop .)
    VEC             reduce using rule 161 (loop -> for_loop .)
    MAT             reduce using rule 161 (loop -> for_loop .)
    ID              reduce using rule 161 (loop -> for_loop .)
    }               reduce using rule 161 (loop -> for_loop .)


state 234

    (179) return -> RETURN . ret_val ;
    (180) ret_val -> . expression np_return_1
    (181) ret_val -> . np_return_2
    (184) expression -> . rel_expression np_expression_1 expression_op
    (183) np_return_2 -> .
    (191) rel_expression -> . rel_expression_1 np_rel_expression_1 rel_exp_op
    (197) rel_expression_1 -> . exp np_rel_expression_1_1 rel_exp_1_op
    (205) exp -> . term np_exp_1 exp_op
    (211) term -> . factor np_term_1 term_op
    (233) factor -> . fact_neg fact_body np_factor_7
    (234) fact_neg -> . - np_factor_2
    (235) fact_neg -> . ~ np_factor_3
    (236) fact_neg -> . empty
    (251) empty -> .

    ;               reduce using rule 183 (np_return_2 -> .)
    -               shift and go to state 130
    ~               shift and go to state 123
    (               reduce using rule 251 (empty -> .)
    CONST_I         reduce using rule 251 (empty -> .)
    CONST_F         reduce using rule 251 (empty -> .)
    CONST_CHAR      reduce using rule 251 (empty -> .)
    CONST_STRING    reduce using rule 251 (empty -> .)
    CONST_BOOL      reduce using rule 251 (empty -> .)
    THIS            reduce using rule 251 (empty -> .)
    ID              reduce using rule 251 (empty -> .)

    expression                     shift and go to state 280
    empty                          shift and go to state 125
    rel_expression                 shift and go to state 131
    term                           shift and go to state 127
    fact_neg                       shift and go to state 129
    exp                            shift and go to state 132
    factor                         shift and go to state 134
    ret_val                        shift and go to state 281
    np_return_2                    shift and go to state 282
    rel_expression_1               shift and go to state 128

state 235

    (163) for_loop -> FOR . ( assignment np_for_loop_1 expression np_for_loop_2 ; ID = expression np_for_loop_3 ) block np_for_loop_4

    (               shift and go to state 283


state 236

    (144) statement -> assignment .

    IF              reduce using rule 144 (statement -> assignment .)
    PRINT           reduce using rule 144 (statement -> assignment .)
    SCAN            reduce using rule 144 (statement -> assignment .)
    RETURN          reduce using rule 144 (statement -> assignment .)
    THIS            reduce using rule 144 (statement -> assignment .)
    FOR             reduce using rule 144 (statement -> assignment .)
    WHILE           reduce using rule 144 (statement -> assignment .)
    VAR             reduce using rule 144 (statement -> assignment .)
    VEC             reduce using rule 144 (statement -> assignment .)
    MAT             reduce using rule 144 (statement -> assignment .)
    ID              reduce using rule 144 (statement -> assignment .)
    }               reduce using rule 144 (statement -> assignment .)


state 237

    (142) bstmt -> statement . bstmt
    (142) bstmt -> . statement bstmt
    (143) bstmt -> . empty
    (144) statement -> . assignment
    (145) statement -> . condition
    (146) statement -> . loop
    (147) statement -> . in_out
    (148) statement -> . return
    (149) statement -> . this ID np_statement_1 func_call ;
    (150) statement -> . var_decl
    (251) empty -> .
    (75) assignment -> . this ID np_assignment_1 id_access = np_assignment_2 ass_value ;
    (152) condition -> . IF cond_body np_condition_4
    (161) loop -> . for_loop
    (162) loop -> . while_loop
    (172) in_out -> . PRINT ( print_exp ) ;
    (173) in_out -> . SCAN ( ID np_in_out_2 id_access ) ;
    (179) return -> . RETURN ret_val ;
    (83) this -> . THIS np_this_1 .
    (84) this -> . np_this_2
    (9) var_decl -> . vars
    (10) var_decl -> . vector
    (11) var_decl -> . matrix
    (163) for_loop -> . FOR ( assignment np_for_loop_1 expression np_for_loop_2 ; ID = expression np_for_loop_3 ) block np_for_loop_4
    (168) while_loop -> . WHILE np_while_loop_1 ( expression ) np_while_loop_2 block np_while_loop_3
    (86) np_this_2 -> .
    (42) vars -> . VAR ids : vars_type ; np_vars_3
    (59) vector -> . VEC ids : vec_mat_type [ CONST_I ] np_vector_1 vec_assgn ; np_vector_2
    (64) matrix -> . MAT ids : vec_mat_type [ CONST_I , CONST_I ] np_matrix_1 mat_assgn ; np_matrix_2

    }               reduce using rule 251 (empty -> .)
    IF              shift and go to state 238
    PRINT           shift and go to state 242
    SCAN            shift and go to state 240
    RETURN          shift and go to state 234
    THIS            shift and go to state 54
    FOR             shift and go to state 235
    WHILE           shift and go to state 229
    ID              reduce using rule 86 (np_this_2 -> .)
    VAR             shift and go to state 41
    VEC             shift and go to state 37
    MAT             shift and go to state 42

    matrix                         shift and go to state 38
    empty                          shift and go to state 226
    var_decl                       shift and go to state 227
    loop                           shift and go to state 228
    np_this_2                      shift and go to state 56
    while_loop                     shift and go to state 230
    in_out                         shift and go to state 231
    condition                      shift and go to state 232
    vars                           shift and go to state 43
    for_loop                       shift and go to state 233
    statement                      shift and go to state 237
    bstmt                          shift and go to state 284
    vector                         shift and go to state 40
    assignment                     shift and go to state 236
    this                           shift and go to state 241
    return                         shift and go to state 243

state 238

    (152) condition -> IF . cond_body np_condition_4
    (153) cond_body -> . ( expression ) np_condition_1 block cond_else

    (               shift and go to state 286

    cond_body                      shift and go to state 285

state 239

    (141) block -> { bstmt . }

    }               shift and go to state 287


state 240

    (173) in_out -> SCAN . ( ID np_in_out_2 id_access ) ;

    (               shift and go to state 288


state 241

    (149) statement -> this . ID np_statement_1 func_call ;
    (75) assignment -> this . ID np_assignment_1 id_access = np_assignment_2 ass_value ;

    ID              shift and go to state 289


state 242

    (172) in_out -> PRINT . ( print_exp ) ;

    (               shift and go to state 290


state 243

    (148) statement -> return .

    IF              reduce using rule 148 (statement -> return .)
    PRINT           reduce using rule 148 (statement -> return .)
    SCAN            reduce using rule 148 (statement -> return .)
    RETURN          reduce using rule 148 (statement -> return .)
    THIS            reduce using rule 148 (statement -> return .)
    FOR             reduce using rule 148 (statement -> return .)
    WHILE           reduce using rule 148 (statement -> return .)
    VAR             reduce using rule 148 (statement -> return .)
    VEC             reduce using rule 148 (statement -> return .)
    MAT             reduce using rule 148 (statement -> return .)
    ID              reduce using rule 148 (statement -> return .)
    }               reduce using rule 148 (statement -> return .)


state 244

    (102) method -> func_spec ( np_method_5 opt_method_param ) np_method_6 block np_method_7 .

    CONSTRUCTOR     reduce using rule 102 (method -> func_spec ( np_method_5 opt_method_param ) np_method_6 block np_method_7 .)
    PUBLIC_FUNC     reduce using rule 102 (method -> func_spec ( np_method_5 opt_method_param ) np_method_6 block np_method_7 .)
    PRIVATE_FUNC    reduce using rule 102 (method -> func_spec ( np_method_5 opt_method_param ) np_method_6 block np_method_7 .)
    }               reduce using rule 102 (method -> func_spec ( np_method_5 opt_method_param ) np_method_6 block np_method_7 .)


state 245

    (117) method_param -> ID np_method_param_1 : param_type param_mat_vec . np_method_param_6 more_params
    (131) np_method_param_6 -> .

    ,               reduce using rule 131 (np_method_param_6 -> .)
    )               reduce using rule 131 (np_method_param_6 -> .)

    np_method_param_6              shift and go to state 291

state 246

    (123) param_mat_vec -> np_method_param_3 .

    ,               reduce using rule 123 (param_mat_vec -> np_method_param_3 .)
    )               reduce using rule 123 (param_mat_vec -> np_method_param_3 .)


state 247

    (122) param_mat_vec -> [ . param_mat ]
    (124) param_mat -> . CONST_I , CONST_I np_method_param_5
    (125) param_mat -> . CONST_I np_method_param_4

    CONST_I         shift and go to state 293

    param_mat                      shift and go to state 292

state 248

    (121) param_type -> ID np_method_param_2 .

    [               reduce using rule 121 (param_type -> ID np_method_param_2 .)
    ,               reduce using rule 121 (param_type -> ID np_method_param_2 .)
    )               reduce using rule 121 (param_type -> ID np_method_param_2 .)


state 249

    (59) vector -> VEC ids : vec_mat_type [ CONST_I ] np_vector_1 . vec_assgn ; np_vector_2
    (60) vec_assgn -> . = vector_exp
    (61) vec_assgn -> . empty
    (251) empty -> .

    =               shift and go to state 296
    ;               reduce using rule 251 (empty -> .)

    vec_assgn                      shift and go to state 295
    empty                          shift and go to state 294

state 250

    (45) vars_tp_a -> = np_vars_4 expression . np_vars_5
    (55) np_vars_5 -> .

    ;               reduce using rule 55 (np_vars_5 -> .)

    np_vars_5                      shift and go to state 297

state 251

    (133) func_call -> np_func_call_1 . ( func_param np_func_call_3 ) np_func_call_4

    (               shift and go to state 298


state 252

    (132) create_obj -> NEW func_call .

    ,               reduce using rule 132 (create_obj -> NEW func_call .)
    ]               reduce using rule 132 (create_obj -> NEW func_call .)
    ;               reduce using rule 132 (create_obj -> NEW func_call .)


state 253

    (64) matrix -> MAT ids : vec_mat_type [ CONST_I , CONST_I . ] np_matrix_1 mat_assgn ; np_matrix_2

    ]               shift and go to state 299


state 254

    (206) exp_op -> + np_exp_2 . exp
    (205) exp -> . term np_exp_1 exp_op
    (211) term -> . factor np_term_1 term_op
    (233) factor -> . fact_neg fact_body np_factor_7
    (234) fact_neg -> . - np_factor_2
    (235) fact_neg -> . ~ np_factor_3
    (236) fact_neg -> . empty
    (251) empty -> .

    -               shift and go to state 130
    ~               shift and go to state 123
    (               reduce using rule 251 (empty -> .)
    CONST_I         reduce using rule 251 (empty -> .)
    CONST_F         reduce using rule 251 (empty -> .)
    CONST_CHAR      reduce using rule 251 (empty -> .)
    CONST_STRING    reduce using rule 251 (empty -> .)
    CONST_BOOL      reduce using rule 251 (empty -> .)
    THIS            reduce using rule 251 (empty -> .)
    ID              reduce using rule 251 (empty -> .)

    empty                          shift and go to state 125
    factor                         shift and go to state 134
    exp                            shift and go to state 300
    term                           shift and go to state 127
    fact_neg                       shift and go to state 129

state 255

    (207) exp_op -> - np_exp_2 . exp
    (205) exp -> . term np_exp_1 exp_op
    (211) term -> . factor np_term_1 term_op
    (233) factor -> . fact_neg fact_body np_factor_7
    (234) fact_neg -> . - np_factor_2
    (235) fact_neg -> . ~ np_factor_3
    (236) fact_neg -> . empty
    (251) empty -> .

    -               shift and go to state 130
    ~               shift and go to state 123
    (               reduce using rule 251 (empty -> .)
    CONST_I         reduce using rule 251 (empty -> .)
    CONST_F         reduce using rule 251 (empty -> .)
    CONST_CHAR      reduce using rule 251 (empty -> .)
    CONST_STRING    reduce using rule 251 (empty -> .)
    CONST_BOOL      reduce using rule 251 (empty -> .)
    THIS            reduce using rule 251 (empty -> .)
    ID              reduce using rule 251 (empty -> .)

    empty                          shift and go to state 125
    factor                         shift and go to state 134
    exp                            shift and go to state 301
    term                           shift and go to state 127
    fact_neg                       shift and go to state 129

state 256

    (192) rel_exp_op -> EQUAL np_rel_expression_2 . rel_expression
    (191) rel_expression -> . rel_expression_1 np_rel_expression_1 rel_exp_op
    (197) rel_expression_1 -> . exp np_rel_expression_1_1 rel_exp_1_op
    (205) exp -> . term np_exp_1 exp_op
    (211) term -> . factor np_term_1 term_op
    (233) factor -> . fact_neg fact_body np_factor_7
    (234) fact_neg -> . - np_factor_2
    (235) fact_neg -> . ~ np_factor_3
    (236) fact_neg -> . empty
    (251) empty -> .

    -               shift and go to state 130
    ~               shift and go to state 123
    (               reduce using rule 251 (empty -> .)
    CONST_I         reduce using rule 251 (empty -> .)
    CONST_F         reduce using rule 251 (empty -> .)
    CONST_CHAR      reduce using rule 251 (empty -> .)
    CONST_STRING    reduce using rule 251 (empty -> .)
    CONST_BOOL      reduce using rule 251 (empty -> .)
    THIS            reduce using rule 251 (empty -> .)
    ID              reduce using rule 251 (empty -> .)

    factor                         shift and go to state 134
    rel_expression                 shift and go to state 302
    exp                            shift and go to state 132
    empty                          shift and go to state 125
    term                           shift and go to state 127
    rel_expression_1               shift and go to state 128
    fact_neg                       shift and go to state 129

state 257

    (193) rel_exp_op -> NOT_EQUAL np_rel_expression_2 . rel_expression
    (191) rel_expression -> . rel_expression_1 np_rel_expression_1 rel_exp_op
    (197) rel_expression_1 -> . exp np_rel_expression_1_1 rel_exp_1_op
    (205) exp -> . term np_exp_1 exp_op
    (211) term -> . factor np_term_1 term_op
    (233) factor -> . fact_neg fact_body np_factor_7
    (234) fact_neg -> . - np_factor_2
    (235) fact_neg -> . ~ np_factor_3
    (236) fact_neg -> . empty
    (251) empty -> .

    -               shift and go to state 130
    ~               shift and go to state 123
    (               reduce using rule 251 (empty -> .)
    CONST_I         reduce using rule 251 (empty -> .)
    CONST_F         reduce using rule 251 (empty -> .)
    CONST_CHAR      reduce using rule 251 (empty -> .)
    CONST_STRING    reduce using rule 251 (empty -> .)
    CONST_BOOL      reduce using rule 251 (empty -> .)
    THIS            reduce using rule 251 (empty -> .)
    ID              reduce using rule 251 (empty -> .)

    factor                         shift and go to state 134
    rel_expression                 shift and go to state 303
    exp                            shift and go to state 132
    empty                          shift and go to state 125
    term                           shift and go to state 127
    rel_expression_1               shift and go to state 128
    fact_neg                       shift and go to state 129

state 258

    (239) fact_body -> this ID np_factor_1 . fact_id
    (240) fact_id -> . np_factor_9 func_call
    (241) fact_id -> . np_factor_8 id_access
    (250) np_factor_9 -> .
    (249) np_factor_8 -> .

    (               reduce using rule 250 (np_factor_9 -> .)
    [               reduce using rule 249 (np_factor_8 -> .)
    .               reduce using rule 249 (np_factor_8 -> .)
    *               reduce using rule 249 (np_factor_8 -> .)
    /               reduce using rule 249 (np_factor_8 -> .)
    %               reduce using rule 249 (np_factor_8 -> .)
    +               reduce using rule 249 (np_factor_8 -> .)
    -               reduce using rule 249 (np_factor_8 -> .)
    <               reduce using rule 249 (np_factor_8 -> .)
    LESS_EQUAL_THAN reduce using rule 249 (np_factor_8 -> .)
    >               reduce using rule 249 (np_factor_8 -> .)
    GREATER_EQUAL_THAN reduce using rule 249 (np_factor_8 -> .)
    EQUAL           reduce using rule 249 (np_factor_8 -> .)
    NOT_EQUAL       reduce using rule 249 (np_factor_8 -> .)
    AND             reduce using rule 249 (np_factor_8 -> .)
    OR              reduce using rule 249 (np_factor_8 -> .)
    XOR             reduce using rule 249 (np_factor_8 -> .)
    ,               reduce using rule 249 (np_factor_8 -> .)
    ]               reduce using rule 249 (np_factor_8 -> .)
    ;               reduce using rule 249 (np_factor_8 -> .)
    )               reduce using rule 249 (np_factor_8 -> .)

    np_factor_9                    shift and go to state 304
    fact_id                        shift and go to state 305
    np_factor_8                    shift and go to state 306

state 259

    (237) fact_body -> ( np_factor_4 expression . ) np_factor_5

    )               shift and go to state 307


state 260

    (186) expression_op -> OR np_expression_2 . expression
    (184) expression -> . rel_expression np_expression_1 expression_op
    (191) rel_expression -> . rel_expression_1 np_rel_expression_1 rel_exp_op
    (197) rel_expression_1 -> . exp np_rel_expression_1_1 rel_exp_1_op
    (205) exp -> . term np_exp_1 exp_op
    (211) term -> . factor np_term_1 term_op
    (233) factor -> . fact_neg fact_body np_factor_7
    (234) fact_neg -> . - np_factor_2
    (235) fact_neg -> . ~ np_factor_3
    (236) fact_neg -> . empty
    (251) empty -> .

    -               shift and go to state 130
    ~               shift and go to state 123
    (               reduce using rule 251 (empty -> .)
    CONST_I         reduce using rule 251 (empty -> .)
    CONST_F         reduce using rule 251 (empty -> .)
    CONST_CHAR      reduce using rule 251 (empty -> .)
    CONST_STRING    reduce using rule 251 (empty -> .)
    CONST_BOOL      reduce using rule 251 (empty -> .)
    THIS            reduce using rule 251 (empty -> .)
    ID              reduce using rule 251 (empty -> .)

    expression                     shift and go to state 308
    empty                          shift and go to state 125
    rel_expression_1               shift and go to state 128
    term                           shift and go to state 127
    fact_neg                       shift and go to state 129
    factor                         shift and go to state 134
    rel_expression                 shift and go to state 131
    exp                            shift and go to state 132

state 261

    (187) expression_op -> XOR np_expression_2 . expression
    (184) expression -> . rel_expression np_expression_1 expression_op
    (191) rel_expression -> . rel_expression_1 np_rel_expression_1 rel_exp_op
    (197) rel_expression_1 -> . exp np_rel_expression_1_1 rel_exp_1_op
    (205) exp -> . term np_exp_1 exp_op
    (211) term -> . factor np_term_1 term_op
    (233) factor -> . fact_neg fact_body np_factor_7
    (234) fact_neg -> . - np_factor_2
    (235) fact_neg -> . ~ np_factor_3
    (236) fact_neg -> . empty
    (251) empty -> .

    -               shift and go to state 130
    ~               shift and go to state 123
    (               reduce using rule 251 (empty -> .)
    CONST_I         reduce using rule 251 (empty -> .)
    CONST_F         reduce using rule 251 (empty -> .)
    CONST_CHAR      reduce using rule 251 (empty -> .)
    CONST_STRING    reduce using rule 251 (empty -> .)
    CONST_BOOL      reduce using rule 251 (empty -> .)
    THIS            reduce using rule 251 (empty -> .)
    ID              reduce using rule 251 (empty -> .)

    expression                     shift and go to state 309
    empty                          shift and go to state 125
    rel_expression_1               shift and go to state 128
    term                           shift and go to state 127
    fact_neg                       shift and go to state 129
    factor                         shift and go to state 134
    rel_expression                 shift and go to state 131
    exp                            shift and go to state 132

state 262

    (185) expression_op -> AND np_expression_2 . expression
    (184) expression -> . rel_expression np_expression_1 expression_op
    (191) rel_expression -> . rel_expression_1 np_rel_expression_1 rel_exp_op
    (197) rel_expression_1 -> . exp np_rel_expression_1_1 rel_exp_1_op
    (205) exp -> . term np_exp_1 exp_op
    (211) term -> . factor np_term_1 term_op
    (233) factor -> . fact_neg fact_body np_factor_7
    (234) fact_neg -> . - np_factor_2
    (235) fact_neg -> . ~ np_factor_3
    (236) fact_neg -> . empty
    (251) empty -> .

    -               shift and go to state 130
    ~               shift and go to state 123
    (               reduce using rule 251 (empty -> .)
    CONST_I         reduce using rule 251 (empty -> .)
    CONST_F         reduce using rule 251 (empty -> .)
    CONST_CHAR      reduce using rule 251 (empty -> .)
    CONST_STRING    reduce using rule 251 (empty -> .)
    CONST_BOOL      reduce using rule 251 (empty -> .)
    THIS            reduce using rule 251 (empty -> .)
    ID              reduce using rule 251 (empty -> .)

    expression                     shift and go to state 310
    empty                          shift and go to state 125
    rel_expression_1               shift and go to state 128
    term                           shift and go to state 127
    fact_neg                       shift and go to state 129
    factor                         shift and go to state 134
    rel_expression                 shift and go to state 131
    exp                            shift and go to state 132

state 263

    (199) rel_exp_1_op -> LESS_EQUAL_THAN np_rel_expression_1_2 . rel_expression_1
    (197) rel_expression_1 -> . exp np_rel_expression_1_1 rel_exp_1_op
    (205) exp -> . term np_exp_1 exp_op
    (211) term -> . factor np_term_1 term_op
    (233) factor -> . fact_neg fact_body np_factor_7
    (234) fact_neg -> . - np_factor_2
    (235) fact_neg -> . ~ np_factor_3
    (236) fact_neg -> . empty
    (251) empty -> .

    -               shift and go to state 130
    ~               shift and go to state 123
    (               reduce using rule 251 (empty -> .)
    CONST_I         reduce using rule 251 (empty -> .)
    CONST_F         reduce using rule 251 (empty -> .)
    CONST_CHAR      reduce using rule 251 (empty -> .)
    CONST_STRING    reduce using rule 251 (empty -> .)
    CONST_BOOL      reduce using rule 251 (empty -> .)
    THIS            reduce using rule 251 (empty -> .)
    ID              reduce using rule 251 (empty -> .)

    factor                         shift and go to state 134
    empty                          shift and go to state 125
    exp                            shift and go to state 132
    term                           shift and go to state 127
    rel_expression_1               shift and go to state 311
    fact_neg                       shift and go to state 129

state 264

    (200) rel_exp_1_op -> > np_rel_expression_1_2 . rel_expression_1
    (197) rel_expression_1 -> . exp np_rel_expression_1_1 rel_exp_1_op
    (205) exp -> . term np_exp_1 exp_op
    (211) term -> . factor np_term_1 term_op
    (233) factor -> . fact_neg fact_body np_factor_7
    (234) fact_neg -> . - np_factor_2
    (235) fact_neg -> . ~ np_factor_3
    (236) fact_neg -> . empty
    (251) empty -> .

    -               shift and go to state 130
    ~               shift and go to state 123
    (               reduce using rule 251 (empty -> .)
    CONST_I         reduce using rule 251 (empty -> .)
    CONST_F         reduce using rule 251 (empty -> .)
    CONST_CHAR      reduce using rule 251 (empty -> .)
    CONST_STRING    reduce using rule 251 (empty -> .)
    CONST_BOOL      reduce using rule 251 (empty -> .)
    THIS            reduce using rule 251 (empty -> .)
    ID              reduce using rule 251 (empty -> .)

    factor                         shift and go to state 134
    empty                          shift and go to state 125
    exp                            shift and go to state 132
    term                           shift and go to state 127
    rel_expression_1               shift and go to state 312
    fact_neg                       shift and go to state 129

state 265

    (201) rel_exp_1_op -> GREATER_EQUAL_THAN np_rel_expression_1_2 . rel_expression_1
    (197) rel_expression_1 -> . exp np_rel_expression_1_1 rel_exp_1_op
    (205) exp -> . term np_exp_1 exp_op
    (211) term -> . factor np_term_1 term_op
    (233) factor -> . fact_neg fact_body np_factor_7
    (234) fact_neg -> . - np_factor_2
    (235) fact_neg -> . ~ np_factor_3
    (236) fact_neg -> . empty
    (251) empty -> .

    -               shift and go to state 130
    ~               shift and go to state 123
    (               reduce using rule 251 (empty -> .)
    CONST_I         reduce using rule 251 (empty -> .)
    CONST_F         reduce using rule 251 (empty -> .)
    CONST_CHAR      reduce using rule 251 (empty -> .)
    CONST_STRING    reduce using rule 251 (empty -> .)
    CONST_BOOL      reduce using rule 251 (empty -> .)
    THIS            reduce using rule 251 (empty -> .)
    ID              reduce using rule 251 (empty -> .)

    factor                         shift and go to state 134
    empty                          shift and go to state 125
    exp                            shift and go to state 132
    term                           shift and go to state 127
    rel_expression_1               shift and go to state 313
    fact_neg                       shift and go to state 129

state 266

    (198) rel_exp_1_op -> < np_rel_expression_1_2 . rel_expression_1
    (197) rel_expression_1 -> . exp np_rel_expression_1_1 rel_exp_1_op
    (205) exp -> . term np_exp_1 exp_op
    (211) term -> . factor np_term_1 term_op
    (233) factor -> . fact_neg fact_body np_factor_7
    (234) fact_neg -> . - np_factor_2
    (235) fact_neg -> . ~ np_factor_3
    (236) fact_neg -> . empty
    (251) empty -> .

    -               shift and go to state 130
    ~               shift and go to state 123
    (               reduce using rule 251 (empty -> .)
    CONST_I         reduce using rule 251 (empty -> .)
    CONST_F         reduce using rule 251 (empty -> .)
    CONST_CHAR      reduce using rule 251 (empty -> .)
    CONST_STRING    reduce using rule 251 (empty -> .)
    CONST_BOOL      reduce using rule 251 (empty -> .)
    THIS            reduce using rule 251 (empty -> .)
    ID              reduce using rule 251 (empty -> .)

    factor                         shift and go to state 134
    empty                          shift and go to state 125
    exp                            shift and go to state 132
    term                           shift and go to state 127
    rel_expression_1               shift and go to state 314
    fact_neg                       shift and go to state 129

state 267

    (213) term_op -> / np_term_2 . term
    (211) term -> . factor np_term_1 term_op
    (233) factor -> . fact_neg fact_body np_factor_7
    (234) fact_neg -> . - np_factor_2
    (235) fact_neg -> . ~ np_factor_3
    (236) fact_neg -> . empty
    (251) empty -> .

    -               shift and go to state 130
    ~               shift and go to state 123
    (               reduce using rule 251 (empty -> .)
    CONST_I         reduce using rule 251 (empty -> .)
    CONST_F         reduce using rule 251 (empty -> .)
    CONST_CHAR      reduce using rule 251 (empty -> .)
    CONST_STRING    reduce using rule 251 (empty -> .)
    CONST_BOOL      reduce using rule 251 (empty -> .)
    THIS            reduce using rule 251 (empty -> .)
    ID              reduce using rule 251 (empty -> .)

    empty                          shift and go to state 125
    term                           shift and go to state 315
    factor                         shift and go to state 134
    fact_neg                       shift and go to state 129

state 268

    (212) term_op -> * np_term_2 . term
    (211) term -> . factor np_term_1 term_op
    (233) factor -> . fact_neg fact_body np_factor_7
    (234) fact_neg -> . - np_factor_2
    (235) fact_neg -> . ~ np_factor_3
    (236) fact_neg -> . empty
    (251) empty -> .

    -               shift and go to state 130
    ~               shift and go to state 123
    (               reduce using rule 251 (empty -> .)
    CONST_I         reduce using rule 251 (empty -> .)
    CONST_F         reduce using rule 251 (empty -> .)
    CONST_CHAR      reduce using rule 251 (empty -> .)
    CONST_STRING    reduce using rule 251 (empty -> .)
    CONST_BOOL      reduce using rule 251 (empty -> .)
    THIS            reduce using rule 251 (empty -> .)
    ID              reduce using rule 251 (empty -> .)

    empty                          shift and go to state 125
    term                           shift and go to state 316
    factor                         shift and go to state 134
    fact_neg                       shift and go to state 129

state 269

    (214) term_op -> % np_term_2 . term
    (211) term -> . factor np_term_1 term_op
    (233) factor -> . fact_neg fact_body np_factor_7
    (234) fact_neg -> . - np_factor_2
    (235) fact_neg -> . ~ np_factor_3
    (236) fact_neg -> . empty
    (251) empty -> .

    -               shift and go to state 130
    ~               shift and go to state 123
    (               reduce using rule 251 (empty -> .)
    CONST_I         reduce using rule 251 (empty -> .)
    CONST_F         reduce using rule 251 (empty -> .)
    CONST_CHAR      reduce using rule 251 (empty -> .)
    CONST_STRING    reduce using rule 251 (empty -> .)
    CONST_BOOL      reduce using rule 251 (empty -> .)
    THIS            reduce using rule 251 (empty -> .)
    ID              reduce using rule 251 (empty -> .)

    empty                          shift and go to state 125
    term                           shift and go to state 317
    factor                         shift and go to state 134
    fact_neg                       shift and go to state 129

state 270

    (72) id_var_acc -> . np_id_access_1 ID id_mat_acc .

    =               reduce using rule 72 (id_var_acc -> . np_id_access_1 ID id_mat_acc .)
    *               reduce using rule 72 (id_var_acc -> . np_id_access_1 ID id_mat_acc .)
    /               reduce using rule 72 (id_var_acc -> . np_id_access_1 ID id_mat_acc .)
    %               reduce using rule 72 (id_var_acc -> . np_id_access_1 ID id_mat_acc .)
    +               reduce using rule 72 (id_var_acc -> . np_id_access_1 ID id_mat_acc .)
    -               reduce using rule 72 (id_var_acc -> . np_id_access_1 ID id_mat_acc .)
    <               reduce using rule 72 (id_var_acc -> . np_id_access_1 ID id_mat_acc .)
    LESS_EQUAL_THAN reduce using rule 72 (id_var_acc -> . np_id_access_1 ID id_mat_acc .)
    >               reduce using rule 72 (id_var_acc -> . np_id_access_1 ID id_mat_acc .)
    GREATER_EQUAL_THAN reduce using rule 72 (id_var_acc -> . np_id_access_1 ID id_mat_acc .)
    EQUAL           reduce using rule 72 (id_var_acc -> . np_id_access_1 ID id_mat_acc .)
    NOT_EQUAL       reduce using rule 72 (id_var_acc -> . np_id_access_1 ID id_mat_acc .)
    AND             reduce using rule 72 (id_var_acc -> . np_id_access_1 ID id_mat_acc .)
    OR              reduce using rule 72 (id_var_acc -> . np_id_access_1 ID id_mat_acc .)
    XOR             reduce using rule 72 (id_var_acc -> . np_id_access_1 ID id_mat_acc .)
    ,               reduce using rule 72 (id_var_acc -> . np_id_access_1 ID id_mat_acc .)
    ]               reduce using rule 72 (id_var_acc -> . np_id_access_1 ID id_mat_acc .)
    ;               reduce using rule 72 (id_var_acc -> . np_id_access_1 ID id_mat_acc .)
    )               reduce using rule 72 (id_var_acc -> . np_id_access_1 ID id_mat_acc .)


state 271

    (90) vec_object -> expression .

    ,               reduce using rule 90 (vec_object -> expression .)
    ]               reduce using rule 90 (vec_object -> expression .)


state 272

    (88) vec_elem -> vec_object . vec_more
    (91) vec_more -> . , vec_elem
    (92) vec_more -> . empty
    (251) empty -> .

    ,               shift and go to state 320
    ]               reduce using rule 251 (empty -> .)

    vec_more                       shift and go to state 319
    empty                          shift and go to state 318

state 273

    (89) vec_object -> create_obj .

    ,               reduce using rule 89 (vec_object -> create_obj .)
    ]               reduce using rule 89 (vec_object -> create_obj .)


state 274

    (87) vector_exp -> [ vec_elem . ]

    ]               shift and go to state 321


state 275

    (93) matrix_exp -> { mat_elem . }

    }               shift and go to state 322


state 276

    (94) mat_elem -> vector_exp . mat_more
    (95) mat_more -> . , mat_elem
    (96) mat_more -> . empty
    (251) empty -> .

    ,               shift and go to state 324
    }               reduce using rule 251 (empty -> .)

    empty                          shift and go to state 323
    mat_more                       shift and go to state 325

state 277

    (77) ass_value -> expression np_assignment_3 .

    ;               reduce using rule 77 (ass_value -> expression np_assignment_3 .)


state 278

    (75) assignment -> this ID np_assignment_1 id_access = np_assignment_2 ass_value ; .

    IF              reduce using rule 75 (assignment -> this ID np_assignment_1 id_access = np_assignment_2 ass_value ; .)
    PRINT           reduce using rule 75 (assignment -> this ID np_assignment_1 id_access = np_assignment_2 ass_value ; .)
    SCAN            reduce using rule 75 (assignment -> this ID np_assignment_1 id_access = np_assignment_2 ass_value ; .)
    RETURN          reduce using rule 75 (assignment -> this ID np_assignment_1 id_access = np_assignment_2 ass_value ; .)
    THIS            reduce using rule 75 (assignment -> this ID np_assignment_1 id_access = np_assignment_2 ass_value ; .)
    FOR             reduce using rule 75 (assignment -> this ID np_assignment_1 id_access = np_assignment_2 ass_value ; .)
    WHILE           reduce using rule 75 (assignment -> this ID np_assignment_1 id_access = np_assignment_2 ass_value ; .)
    VAR             reduce using rule 75 (assignment -> this ID np_assignment_1 id_access = np_assignment_2 ass_value ; .)
    VEC             reduce using rule 75 (assignment -> this ID np_assignment_1 id_access = np_assignment_2 ass_value ; .)
    MAT             reduce using rule 75 (assignment -> this ID np_assignment_1 id_access = np_assignment_2 ass_value ; .)
    ID              reduce using rule 75 (assignment -> this ID np_assignment_1 id_access = np_assignment_2 ass_value ; .)
    }               reduce using rule 75 (assignment -> this ID np_assignment_1 id_access = np_assignment_2 ass_value ; .)
    CONSTRUCTOR     reduce using rule 75 (assignment -> this ID np_assignment_1 id_access = np_assignment_2 ass_value ; .)
    PUBLIC_FUNC     reduce using rule 75 (assignment -> this ID np_assignment_1 id_access = np_assignment_2 ass_value ; .)
    PRIVATE_FUNC    reduce using rule 75 (assignment -> this ID np_assignment_1 id_access = np_assignment_2 ass_value ; .)
    -               reduce using rule 75 (assignment -> this ID np_assignment_1 id_access = np_assignment_2 ass_value ; .)
    ~               reduce using rule 75 (assignment -> this ID np_assignment_1 id_access = np_assignment_2 ass_value ; .)
    (               reduce using rule 75 (assignment -> this ID np_assignment_1 id_access = np_assignment_2 ass_value ; .)
    CONST_I         reduce using rule 75 (assignment -> this ID np_assignment_1 id_access = np_assignment_2 ass_value ; .)
    CONST_F         reduce using rule 75 (assignment -> this ID np_assignment_1 id_access = np_assignment_2 ass_value ; .)
    CONST_CHAR      reduce using rule 75 (assignment -> this ID np_assignment_1 id_access = np_assignment_2 ass_value ; .)
    CONST_STRING    reduce using rule 75 (assignment -> this ID np_assignment_1 id_access = np_assignment_2 ass_value ; .)
    CONST_BOOL      reduce using rule 75 (assignment -> this ID np_assignment_1 id_access = np_assignment_2 ass_value ; .)


state 279

    (168) while_loop -> WHILE np_while_loop_1 . ( expression ) np_while_loop_2 block np_while_loop_3

    (               shift and go to state 326


state 280

    (180) ret_val -> expression . np_return_1
    (182) np_return_1 -> .

    ;               reduce using rule 182 (np_return_1 -> .)

    np_return_1                    shift and go to state 327

state 281

    (179) return -> RETURN ret_val . ;

    ;               shift and go to state 328


state 282

    (181) ret_val -> np_return_2 .

    ;               reduce using rule 181 (ret_val -> np_return_2 .)


state 283

    (163) for_loop -> FOR ( . assignment np_for_loop_1 expression np_for_loop_2 ; ID = expression np_for_loop_3 ) block np_for_loop_4
    (75) assignment -> . this ID np_assignment_1 id_access = np_assignment_2 ass_value ;
    (83) this -> . THIS np_this_1 .
    (84) this -> . np_this_2
    (86) np_this_2 -> .

    THIS            shift and go to state 54
    ID              reduce using rule 86 (np_this_2 -> .)

    assignment                     shift and go to state 329
    this                           shift and go to state 55
    np_this_2                      shift and go to state 56

state 284

    (142) bstmt -> statement bstmt .

    }               reduce using rule 142 (bstmt -> statement bstmt .)


state 285

    (152) condition -> IF cond_body . np_condition_4
    (160) np_condition_4 -> .

    IF              reduce using rule 160 (np_condition_4 -> .)
    PRINT           reduce using rule 160 (np_condition_4 -> .)
    SCAN            reduce using rule 160 (np_condition_4 -> .)
    RETURN          reduce using rule 160 (np_condition_4 -> .)
    THIS            reduce using rule 160 (np_condition_4 -> .)
    FOR             reduce using rule 160 (np_condition_4 -> .)
    WHILE           reduce using rule 160 (np_condition_4 -> .)
    VAR             reduce using rule 160 (np_condition_4 -> .)
    VEC             reduce using rule 160 (np_condition_4 -> .)
    MAT             reduce using rule 160 (np_condition_4 -> .)
    ID              reduce using rule 160 (np_condition_4 -> .)
    }               reduce using rule 160 (np_condition_4 -> .)

    np_condition_4                 shift and go to state 330

state 286

    (153) cond_body -> ( . expression ) np_condition_1 block cond_else
    (184) expression -> . rel_expression np_expression_1 expression_op
    (191) rel_expression -> . rel_expression_1 np_rel_expression_1 rel_exp_op
    (197) rel_expression_1 -> . exp np_rel_expression_1_1 rel_exp_1_op
    (205) exp -> . term np_exp_1 exp_op
    (211) term -> . factor np_term_1 term_op
    (233) factor -> . fact_neg fact_body np_factor_7
    (234) fact_neg -> . - np_factor_2
    (235) fact_neg -> . ~ np_factor_3
    (236) fact_neg -> . empty
    (251) empty -> .

    -               shift and go to state 130
    ~               shift and go to state 123
    (               reduce using rule 251 (empty -> .)
    CONST_I         reduce using rule 251 (empty -> .)
    CONST_F         reduce using rule 251 (empty -> .)
    CONST_CHAR      reduce using rule 251 (empty -> .)
    CONST_STRING    reduce using rule 251 (empty -> .)
    CONST_BOOL      reduce using rule 251 (empty -> .)
    THIS            reduce using rule 251 (empty -> .)
    ID              reduce using rule 251 (empty -> .)

    expression                     shift and go to state 331
    empty                          shift and go to state 125
    term                           shift and go to state 127
    rel_expression_1               shift and go to state 128
    fact_neg                       shift and go to state 129
    exp                            shift and go to state 132
    factor                         shift and go to state 134
    rel_expression                 shift and go to state 131

state 287

    (141) block -> { bstmt } .

    CONSTRUCTOR     reduce using rule 141 (block -> { bstmt } .)
    PUBLIC_FUNC     reduce using rule 141 (block -> { bstmt } .)
    PRIVATE_FUNC    reduce using rule 141 (block -> { bstmt } .)
    }               reduce using rule 141 (block -> { bstmt } .)
    IF              reduce using rule 141 (block -> { bstmt } .)
    PRINT           reduce using rule 141 (block -> { bstmt } .)
    SCAN            reduce using rule 141 (block -> { bstmt } .)
    RETURN          reduce using rule 141 (block -> { bstmt } .)
    THIS            reduce using rule 141 (block -> { bstmt } .)
    FOR             reduce using rule 141 (block -> { bstmt } .)
    WHILE           reduce using rule 141 (block -> { bstmt } .)
    VAR             reduce using rule 141 (block -> { bstmt } .)
    VEC             reduce using rule 141 (block -> { bstmt } .)
    MAT             reduce using rule 141 (block -> { bstmt } .)
    ID              reduce using rule 141 (block -> { bstmt } .)
    ELSE            reduce using rule 141 (block -> { bstmt } .)
    ELSEIF          reduce using rule 141 (block -> { bstmt } .)


state 288

    (173) in_out -> SCAN ( . ID np_in_out_2 id_access ) ;

    ID              shift and go to state 332


state 289

    (149) statement -> this ID . np_statement_1 func_call ;
    (75) assignment -> this ID . np_assignment_1 id_access = np_assignment_2 ass_value ;
    (151) np_statement_1 -> .
    (80) np_assignment_1 -> .

    (               reduce using rule 151 (np_statement_1 -> .)
    [               reduce using rule 80 (np_assignment_1 -> .)
    =               reduce using rule 80 (np_assignment_1 -> .)
    .               reduce using rule 80 (np_assignment_1 -> .)

    np_statement_1                 shift and go to state 333
    np_assignment_1                shift and go to state 93

state 290

    (172) in_out -> PRINT ( . print_exp ) ;
    (174) print_exp -> . expression np_in_out_1 print_more
    (184) expression -> . rel_expression np_expression_1 expression_op
    (191) rel_expression -> . rel_expression_1 np_rel_expression_1 rel_exp_op
    (197) rel_expression_1 -> . exp np_rel_expression_1_1 rel_exp_1_op
    (205) exp -> . term np_exp_1 exp_op
    (211) term -> . factor np_term_1 term_op
    (233) factor -> . fact_neg fact_body np_factor_7
    (234) fact_neg -> . - np_factor_2
    (235) fact_neg -> . ~ np_factor_3
    (236) fact_neg -> . empty
    (251) empty -> .

    -               shift and go to state 130
    ~               shift and go to state 123
    (               reduce using rule 251 (empty -> .)
    CONST_I         reduce using rule 251 (empty -> .)
    CONST_F         reduce using rule 251 (empty -> .)
    CONST_CHAR      reduce using rule 251 (empty -> .)
    CONST_STRING    reduce using rule 251 (empty -> .)
    CONST_BOOL      reduce using rule 251 (empty -> .)
    THIS            reduce using rule 251 (empty -> .)
    ID              reduce using rule 251 (empty -> .)

    expression                     shift and go to state 334
    empty                          shift and go to state 125
    term                           shift and go to state 127
    fact_neg                       shift and go to state 129
    print_exp                      shift and go to state 335
    exp                            shift and go to state 132
    factor                         shift and go to state 134
    rel_expression                 shift and go to state 131
    rel_expression_1               shift and go to state 128

state 291

    (117) method_param -> ID np_method_param_1 : param_type param_mat_vec np_method_param_6 . more_params
    (118) more_params -> . , method_param
    (119) more_params -> . empty
    (251) empty -> .

    ,               shift and go to state 338
    )               reduce using rule 251 (empty -> .)

    more_params                    shift and go to state 336
    empty                          shift and go to state 337

state 292

    (122) param_mat_vec -> [ param_mat . ]

    ]               shift and go to state 339


state 293

    (124) param_mat -> CONST_I . , CONST_I np_method_param_5
    (125) param_mat -> CONST_I . np_method_param_4
    (129) np_method_param_4 -> .

    ,               shift and go to state 340
    ]               reduce using rule 129 (np_method_param_4 -> .)

    np_method_param_4              shift and go to state 341

state 294

    (61) vec_assgn -> empty .

    ;               reduce using rule 61 (vec_assgn -> empty .)


state 295

    (59) vector -> VEC ids : vec_mat_type [ CONST_I ] np_vector_1 vec_assgn . ; np_vector_2

    ;               shift and go to state 342


state 296

    (60) vec_assgn -> = . vector_exp
    (87) vector_exp -> . [ vec_elem ]

    [               shift and go to state 219

    vector_exp                     shift and go to state 343

state 297

    (45) vars_tp_a -> = np_vars_4 expression np_vars_5 .

    ;               reduce using rule 45 (vars_tp_a -> = np_vars_4 expression np_vars_5 .)


state 298

    (133) func_call -> np_func_call_1 ( . func_param np_func_call_3 ) np_func_call_4
    (134) func_param -> . expression np_func_call_2 more_fpar
    (184) expression -> . rel_expression np_expression_1 expression_op
    (191) rel_expression -> . rel_expression_1 np_rel_expression_1 rel_exp_op
    (197) rel_expression_1 -> . exp np_rel_expression_1_1 rel_exp_1_op
    (205) exp -> . term np_exp_1 exp_op
    (211) term -> . factor np_term_1 term_op
    (233) factor -> . fact_neg fact_body np_factor_7
    (234) fact_neg -> . - np_factor_2
    (235) fact_neg -> . ~ np_factor_3
    (236) fact_neg -> . empty
    (251) empty -> .

    -               shift and go to state 130
    ~               shift and go to state 123
    (               reduce using rule 251 (empty -> .)
    CONST_I         reduce using rule 251 (empty -> .)
    CONST_F         reduce using rule 251 (empty -> .)
    CONST_CHAR      reduce using rule 251 (empty -> .)
    CONST_STRING    reduce using rule 251 (empty -> .)
    CONST_BOOL      reduce using rule 251 (empty -> .)
    THIS            reduce using rule 251 (empty -> .)
    ID              reduce using rule 251 (empty -> .)

    expression                     shift and go to state 344
    empty                          shift and go to state 125
    func_param                     shift and go to state 345
    term                           shift and go to state 127
    fact_neg                       shift and go to state 129
    exp                            shift and go to state 132
    factor                         shift and go to state 134
    rel_expression                 shift and go to state 131
    rel_expression_1               shift and go to state 128

state 299

    (64) matrix -> MAT ids : vec_mat_type [ CONST_I , CONST_I ] . np_matrix_1 mat_assgn ; np_matrix_2
    (67) np_matrix_1 -> .

    =               reduce using rule 67 (np_matrix_1 -> .)
    ;               reduce using rule 67 (np_matrix_1 -> .)

    np_matrix_1                    shift and go to state 346

state 300

    (206) exp_op -> + np_exp_2 exp .

    <               reduce using rule 206 (exp_op -> + np_exp_2 exp .)
    LESS_EQUAL_THAN reduce using rule 206 (exp_op -> + np_exp_2 exp .)
    >               reduce using rule 206 (exp_op -> + np_exp_2 exp .)
    GREATER_EQUAL_THAN reduce using rule 206 (exp_op -> + np_exp_2 exp .)
    EQUAL           reduce using rule 206 (exp_op -> + np_exp_2 exp .)
    NOT_EQUAL       reduce using rule 206 (exp_op -> + np_exp_2 exp .)
    AND             reduce using rule 206 (exp_op -> + np_exp_2 exp .)
    OR              reduce using rule 206 (exp_op -> + np_exp_2 exp .)
    XOR             reduce using rule 206 (exp_op -> + np_exp_2 exp .)
    ,               reduce using rule 206 (exp_op -> + np_exp_2 exp .)
    ]               reduce using rule 206 (exp_op -> + np_exp_2 exp .)
    ;               reduce using rule 206 (exp_op -> + np_exp_2 exp .)
    )               reduce using rule 206 (exp_op -> + np_exp_2 exp .)


state 301

    (207) exp_op -> - np_exp_2 exp .

    <               reduce using rule 207 (exp_op -> - np_exp_2 exp .)
    LESS_EQUAL_THAN reduce using rule 207 (exp_op -> - np_exp_2 exp .)
    >               reduce using rule 207 (exp_op -> - np_exp_2 exp .)
    GREATER_EQUAL_THAN reduce using rule 207 (exp_op -> - np_exp_2 exp .)
    EQUAL           reduce using rule 207 (exp_op -> - np_exp_2 exp .)
    NOT_EQUAL       reduce using rule 207 (exp_op -> - np_exp_2 exp .)
    AND             reduce using rule 207 (exp_op -> - np_exp_2 exp .)
    OR              reduce using rule 207 (exp_op -> - np_exp_2 exp .)
    XOR             reduce using rule 207 (exp_op -> - np_exp_2 exp .)
    ,               reduce using rule 207 (exp_op -> - np_exp_2 exp .)
    ]               reduce using rule 207 (exp_op -> - np_exp_2 exp .)
    ;               reduce using rule 207 (exp_op -> - np_exp_2 exp .)
    )               reduce using rule 207 (exp_op -> - np_exp_2 exp .)


state 302

    (192) rel_exp_op -> EQUAL np_rel_expression_2 rel_expression .

    AND             reduce using rule 192 (rel_exp_op -> EQUAL np_rel_expression_2 rel_expression .)
    OR              reduce using rule 192 (rel_exp_op -> EQUAL np_rel_expression_2 rel_expression .)
    XOR             reduce using rule 192 (rel_exp_op -> EQUAL np_rel_expression_2 rel_expression .)
    ,               reduce using rule 192 (rel_exp_op -> EQUAL np_rel_expression_2 rel_expression .)
    ]               reduce using rule 192 (rel_exp_op -> EQUAL np_rel_expression_2 rel_expression .)
    ;               reduce using rule 192 (rel_exp_op -> EQUAL np_rel_expression_2 rel_expression .)
    )               reduce using rule 192 (rel_exp_op -> EQUAL np_rel_expression_2 rel_expression .)


state 303

    (193) rel_exp_op -> NOT_EQUAL np_rel_expression_2 rel_expression .

    AND             reduce using rule 193 (rel_exp_op -> NOT_EQUAL np_rel_expression_2 rel_expression .)
    OR              reduce using rule 193 (rel_exp_op -> NOT_EQUAL np_rel_expression_2 rel_expression .)
    XOR             reduce using rule 193 (rel_exp_op -> NOT_EQUAL np_rel_expression_2 rel_expression .)
    ,               reduce using rule 193 (rel_exp_op -> NOT_EQUAL np_rel_expression_2 rel_expression .)
    ]               reduce using rule 193 (rel_exp_op -> NOT_EQUAL np_rel_expression_2 rel_expression .)
    ;               reduce using rule 193 (rel_exp_op -> NOT_EQUAL np_rel_expression_2 rel_expression .)
    )               reduce using rule 193 (rel_exp_op -> NOT_EQUAL np_rel_expression_2 rel_expression .)


state 304

    (240) fact_id -> np_factor_9 . func_call
    (133) func_call -> . np_func_call_1 ( func_param np_func_call_3 ) np_func_call_4
    (137) np_func_call_1 -> .

    (               reduce using rule 137 (np_func_call_1 -> .)

    np_func_call_1                 shift and go to state 251
    func_call                      shift and go to state 347

state 305

    (239) fact_body -> this ID np_factor_1 fact_id .

    *               reduce using rule 239 (fact_body -> this ID np_factor_1 fact_id .)
    /               reduce using rule 239 (fact_body -> this ID np_factor_1 fact_id .)
    %               reduce using rule 239 (fact_body -> this ID np_factor_1 fact_id .)
    +               reduce using rule 239 (fact_body -> this ID np_factor_1 fact_id .)
    -               reduce using rule 239 (fact_body -> this ID np_factor_1 fact_id .)
    <               reduce using rule 239 (fact_body -> this ID np_factor_1 fact_id .)
    LESS_EQUAL_THAN reduce using rule 239 (fact_body -> this ID np_factor_1 fact_id .)
    >               reduce using rule 239 (fact_body -> this ID np_factor_1 fact_id .)
    GREATER_EQUAL_THAN reduce using rule 239 (fact_body -> this ID np_factor_1 fact_id .)
    EQUAL           reduce using rule 239 (fact_body -> this ID np_factor_1 fact_id .)
    NOT_EQUAL       reduce using rule 239 (fact_body -> this ID np_factor_1 fact_id .)
    AND             reduce using rule 239 (fact_body -> this ID np_factor_1 fact_id .)
    OR              reduce using rule 239 (fact_body -> this ID np_factor_1 fact_id .)
    XOR             reduce using rule 239 (fact_body -> this ID np_factor_1 fact_id .)
    ,               reduce using rule 239 (fact_body -> this ID np_factor_1 fact_id .)
    ]               reduce using rule 239 (fact_body -> this ID np_factor_1 fact_id .)
    ;               reduce using rule 239 (fact_body -> this ID np_factor_1 fact_id .)
    )               reduce using rule 239 (fact_body -> this ID np_factor_1 fact_id .)


state 306

    (241) fact_id -> np_factor_8 . id_access
    (69) id_access -> . id_mat_acc id_var_acc
    (70) id_mat_acc -> . mat_vec_access
    (71) id_mat_acc -> . empty
    (97) mat_vec_access -> . [ mat_vec_index mat_access ]
    (251) empty -> .

    [               shift and go to state 109
    .               reduce using rule 251 (empty -> .)
    *               reduce using rule 251 (empty -> .)
    /               reduce using rule 251 (empty -> .)
    %               reduce using rule 251 (empty -> .)
    +               reduce using rule 251 (empty -> .)
    -               reduce using rule 251 (empty -> .)
    <               reduce using rule 251 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 251 (empty -> .)
    >               reduce using rule 251 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 251 (empty -> .)
    EQUAL           reduce using rule 251 (empty -> .)
    NOT_EQUAL       reduce using rule 251 (empty -> .)
    AND             reduce using rule 251 (empty -> .)
    OR              reduce using rule 251 (empty -> .)
    XOR             reduce using rule 251 (empty -> .)
    ,               reduce using rule 251 (empty -> .)
    ]               reduce using rule 251 (empty -> .)
    ;               reduce using rule 251 (empty -> .)
    )               reduce using rule 251 (empty -> .)

    mat_vec_access                 shift and go to state 111
    id_mat_acc                     shift and go to state 112
    id_access                      shift and go to state 348
    empty                          shift and go to state 110

state 307

    (237) fact_body -> ( np_factor_4 expression ) . np_factor_5
    (246) np_factor_5 -> .

    *               reduce using rule 246 (np_factor_5 -> .)
    /               reduce using rule 246 (np_factor_5 -> .)
    %               reduce using rule 246 (np_factor_5 -> .)
    +               reduce using rule 246 (np_factor_5 -> .)
    -               reduce using rule 246 (np_factor_5 -> .)
    <               reduce using rule 246 (np_factor_5 -> .)
    LESS_EQUAL_THAN reduce using rule 246 (np_factor_5 -> .)
    >               reduce using rule 246 (np_factor_5 -> .)
    GREATER_EQUAL_THAN reduce using rule 246 (np_factor_5 -> .)
    EQUAL           reduce using rule 246 (np_factor_5 -> .)
    NOT_EQUAL       reduce using rule 246 (np_factor_5 -> .)
    AND             reduce using rule 246 (np_factor_5 -> .)
    OR              reduce using rule 246 (np_factor_5 -> .)
    XOR             reduce using rule 246 (np_factor_5 -> .)
    ,               reduce using rule 246 (np_factor_5 -> .)
    ]               reduce using rule 246 (np_factor_5 -> .)
    ;               reduce using rule 246 (np_factor_5 -> .)
    )               reduce using rule 246 (np_factor_5 -> .)

    np_factor_5                    shift and go to state 349

state 308

    (186) expression_op -> OR np_expression_2 expression .

    ,               reduce using rule 186 (expression_op -> OR np_expression_2 expression .)
    ]               reduce using rule 186 (expression_op -> OR np_expression_2 expression .)
    ;               reduce using rule 186 (expression_op -> OR np_expression_2 expression .)
    )               reduce using rule 186 (expression_op -> OR np_expression_2 expression .)


state 309

    (187) expression_op -> XOR np_expression_2 expression .

    ,               reduce using rule 187 (expression_op -> XOR np_expression_2 expression .)
    ]               reduce using rule 187 (expression_op -> XOR np_expression_2 expression .)
    ;               reduce using rule 187 (expression_op -> XOR np_expression_2 expression .)
    )               reduce using rule 187 (expression_op -> XOR np_expression_2 expression .)


state 310

    (185) expression_op -> AND np_expression_2 expression .

    ,               reduce using rule 185 (expression_op -> AND np_expression_2 expression .)
    ]               reduce using rule 185 (expression_op -> AND np_expression_2 expression .)
    ;               reduce using rule 185 (expression_op -> AND np_expression_2 expression .)
    )               reduce using rule 185 (expression_op -> AND np_expression_2 expression .)


state 311

    (199) rel_exp_1_op -> LESS_EQUAL_THAN np_rel_expression_1_2 rel_expression_1 .

    EQUAL           reduce using rule 199 (rel_exp_1_op -> LESS_EQUAL_THAN np_rel_expression_1_2 rel_expression_1 .)
    NOT_EQUAL       reduce using rule 199 (rel_exp_1_op -> LESS_EQUAL_THAN np_rel_expression_1_2 rel_expression_1 .)
    AND             reduce using rule 199 (rel_exp_1_op -> LESS_EQUAL_THAN np_rel_expression_1_2 rel_expression_1 .)
    OR              reduce using rule 199 (rel_exp_1_op -> LESS_EQUAL_THAN np_rel_expression_1_2 rel_expression_1 .)
    XOR             reduce using rule 199 (rel_exp_1_op -> LESS_EQUAL_THAN np_rel_expression_1_2 rel_expression_1 .)
    ,               reduce using rule 199 (rel_exp_1_op -> LESS_EQUAL_THAN np_rel_expression_1_2 rel_expression_1 .)
    ]               reduce using rule 199 (rel_exp_1_op -> LESS_EQUAL_THAN np_rel_expression_1_2 rel_expression_1 .)
    ;               reduce using rule 199 (rel_exp_1_op -> LESS_EQUAL_THAN np_rel_expression_1_2 rel_expression_1 .)
    )               reduce using rule 199 (rel_exp_1_op -> LESS_EQUAL_THAN np_rel_expression_1_2 rel_expression_1 .)


state 312

    (200) rel_exp_1_op -> > np_rel_expression_1_2 rel_expression_1 .

    EQUAL           reduce using rule 200 (rel_exp_1_op -> > np_rel_expression_1_2 rel_expression_1 .)
    NOT_EQUAL       reduce using rule 200 (rel_exp_1_op -> > np_rel_expression_1_2 rel_expression_1 .)
    AND             reduce using rule 200 (rel_exp_1_op -> > np_rel_expression_1_2 rel_expression_1 .)
    OR              reduce using rule 200 (rel_exp_1_op -> > np_rel_expression_1_2 rel_expression_1 .)
    XOR             reduce using rule 200 (rel_exp_1_op -> > np_rel_expression_1_2 rel_expression_1 .)
    ,               reduce using rule 200 (rel_exp_1_op -> > np_rel_expression_1_2 rel_expression_1 .)
    ]               reduce using rule 200 (rel_exp_1_op -> > np_rel_expression_1_2 rel_expression_1 .)
    ;               reduce using rule 200 (rel_exp_1_op -> > np_rel_expression_1_2 rel_expression_1 .)
    )               reduce using rule 200 (rel_exp_1_op -> > np_rel_expression_1_2 rel_expression_1 .)


state 313

    (201) rel_exp_1_op -> GREATER_EQUAL_THAN np_rel_expression_1_2 rel_expression_1 .

    EQUAL           reduce using rule 201 (rel_exp_1_op -> GREATER_EQUAL_THAN np_rel_expression_1_2 rel_expression_1 .)
    NOT_EQUAL       reduce using rule 201 (rel_exp_1_op -> GREATER_EQUAL_THAN np_rel_expression_1_2 rel_expression_1 .)
    AND             reduce using rule 201 (rel_exp_1_op -> GREATER_EQUAL_THAN np_rel_expression_1_2 rel_expression_1 .)
    OR              reduce using rule 201 (rel_exp_1_op -> GREATER_EQUAL_THAN np_rel_expression_1_2 rel_expression_1 .)
    XOR             reduce using rule 201 (rel_exp_1_op -> GREATER_EQUAL_THAN np_rel_expression_1_2 rel_expression_1 .)
    ,               reduce using rule 201 (rel_exp_1_op -> GREATER_EQUAL_THAN np_rel_expression_1_2 rel_expression_1 .)
    ]               reduce using rule 201 (rel_exp_1_op -> GREATER_EQUAL_THAN np_rel_expression_1_2 rel_expression_1 .)
    ;               reduce using rule 201 (rel_exp_1_op -> GREATER_EQUAL_THAN np_rel_expression_1_2 rel_expression_1 .)
    )               reduce using rule 201 (rel_exp_1_op -> GREATER_EQUAL_THAN np_rel_expression_1_2 rel_expression_1 .)


state 314

    (198) rel_exp_1_op -> < np_rel_expression_1_2 rel_expression_1 .

    EQUAL           reduce using rule 198 (rel_exp_1_op -> < np_rel_expression_1_2 rel_expression_1 .)
    NOT_EQUAL       reduce using rule 198 (rel_exp_1_op -> < np_rel_expression_1_2 rel_expression_1 .)
    AND             reduce using rule 198 (rel_exp_1_op -> < np_rel_expression_1_2 rel_expression_1 .)
    OR              reduce using rule 198 (rel_exp_1_op -> < np_rel_expression_1_2 rel_expression_1 .)
    XOR             reduce using rule 198 (rel_exp_1_op -> < np_rel_expression_1_2 rel_expression_1 .)
    ,               reduce using rule 198 (rel_exp_1_op -> < np_rel_expression_1_2 rel_expression_1 .)
    ]               reduce using rule 198 (rel_exp_1_op -> < np_rel_expression_1_2 rel_expression_1 .)
    ;               reduce using rule 198 (rel_exp_1_op -> < np_rel_expression_1_2 rel_expression_1 .)
    )               reduce using rule 198 (rel_exp_1_op -> < np_rel_expression_1_2 rel_expression_1 .)


state 315

    (213) term_op -> / np_term_2 term .

    +               reduce using rule 213 (term_op -> / np_term_2 term .)
    -               reduce using rule 213 (term_op -> / np_term_2 term .)
    <               reduce using rule 213 (term_op -> / np_term_2 term .)
    LESS_EQUAL_THAN reduce using rule 213 (term_op -> / np_term_2 term .)
    >               reduce using rule 213 (term_op -> / np_term_2 term .)
    GREATER_EQUAL_THAN reduce using rule 213 (term_op -> / np_term_2 term .)
    EQUAL           reduce using rule 213 (term_op -> / np_term_2 term .)
    NOT_EQUAL       reduce using rule 213 (term_op -> / np_term_2 term .)
    AND             reduce using rule 213 (term_op -> / np_term_2 term .)
    OR              reduce using rule 213 (term_op -> / np_term_2 term .)
    XOR             reduce using rule 213 (term_op -> / np_term_2 term .)
    ,               reduce using rule 213 (term_op -> / np_term_2 term .)
    ]               reduce using rule 213 (term_op -> / np_term_2 term .)
    ;               reduce using rule 213 (term_op -> / np_term_2 term .)
    )               reduce using rule 213 (term_op -> / np_term_2 term .)


state 316

    (212) term_op -> * np_term_2 term .

    +               reduce using rule 212 (term_op -> * np_term_2 term .)
    -               reduce using rule 212 (term_op -> * np_term_2 term .)
    <               reduce using rule 212 (term_op -> * np_term_2 term .)
    LESS_EQUAL_THAN reduce using rule 212 (term_op -> * np_term_2 term .)
    >               reduce using rule 212 (term_op -> * np_term_2 term .)
    GREATER_EQUAL_THAN reduce using rule 212 (term_op -> * np_term_2 term .)
    EQUAL           reduce using rule 212 (term_op -> * np_term_2 term .)
    NOT_EQUAL       reduce using rule 212 (term_op -> * np_term_2 term .)
    AND             reduce using rule 212 (term_op -> * np_term_2 term .)
    OR              reduce using rule 212 (term_op -> * np_term_2 term .)
    XOR             reduce using rule 212 (term_op -> * np_term_2 term .)
    ,               reduce using rule 212 (term_op -> * np_term_2 term .)
    ]               reduce using rule 212 (term_op -> * np_term_2 term .)
    ;               reduce using rule 212 (term_op -> * np_term_2 term .)
    )               reduce using rule 212 (term_op -> * np_term_2 term .)


state 317

    (214) term_op -> % np_term_2 term .

    +               reduce using rule 214 (term_op -> % np_term_2 term .)
    -               reduce using rule 214 (term_op -> % np_term_2 term .)
    <               reduce using rule 214 (term_op -> % np_term_2 term .)
    LESS_EQUAL_THAN reduce using rule 214 (term_op -> % np_term_2 term .)
    >               reduce using rule 214 (term_op -> % np_term_2 term .)
    GREATER_EQUAL_THAN reduce using rule 214 (term_op -> % np_term_2 term .)
    EQUAL           reduce using rule 214 (term_op -> % np_term_2 term .)
    NOT_EQUAL       reduce using rule 214 (term_op -> % np_term_2 term .)
    AND             reduce using rule 214 (term_op -> % np_term_2 term .)
    OR              reduce using rule 214 (term_op -> % np_term_2 term .)
    XOR             reduce using rule 214 (term_op -> % np_term_2 term .)
    ,               reduce using rule 214 (term_op -> % np_term_2 term .)
    ]               reduce using rule 214 (term_op -> % np_term_2 term .)
    ;               reduce using rule 214 (term_op -> % np_term_2 term .)
    )               reduce using rule 214 (term_op -> % np_term_2 term .)


state 318

    (92) vec_more -> empty .

    ]               reduce using rule 92 (vec_more -> empty .)


state 319

    (88) vec_elem -> vec_object vec_more .

    ]               reduce using rule 88 (vec_elem -> vec_object vec_more .)


state 320

    (91) vec_more -> , . vec_elem
    (88) vec_elem -> . vec_object vec_more
    (89) vec_object -> . create_obj
    (90) vec_object -> . expression
    (132) create_obj -> . NEW func_call
    (184) expression -> . rel_expression np_expression_1 expression_op
    (191) rel_expression -> . rel_expression_1 np_rel_expression_1 rel_exp_op
    (197) rel_expression_1 -> . exp np_rel_expression_1_1 rel_exp_1_op
    (205) exp -> . term np_exp_1 exp_op
    (211) term -> . factor np_term_1 term_op
    (233) factor -> . fact_neg fact_body np_factor_7
    (234) fact_neg -> . - np_factor_2
    (235) fact_neg -> . ~ np_factor_3
    (236) fact_neg -> . empty
    (251) empty -> .

    NEW             shift and go to state 180
    -               shift and go to state 130
    ~               shift and go to state 123
    (               reduce using rule 251 (empty -> .)
    CONST_I         reduce using rule 251 (empty -> .)
    CONST_F         reduce using rule 251 (empty -> .)
    CONST_CHAR      reduce using rule 251 (empty -> .)
    CONST_STRING    reduce using rule 251 (empty -> .)
    CONST_BOOL      reduce using rule 251 (empty -> .)
    THIS            reduce using rule 251 (empty -> .)
    ID              reduce using rule 251 (empty -> .)

    expression                     shift and go to state 271
    empty                          shift and go to state 125
    vec_object                     shift and go to state 272
    term                           shift and go to state 127
    rel_expression_1               shift and go to state 128
    fact_neg                       shift and go to state 129
    exp                            shift and go to state 132
    factor                         shift and go to state 134
    rel_expression                 shift and go to state 131
    create_obj                     shift and go to state 273
    vec_elem                       shift and go to state 350

state 321

    (87) vector_exp -> [ vec_elem ] .

    ,               reduce using rule 87 (vector_exp -> [ vec_elem ] .)
    }               reduce using rule 87 (vector_exp -> [ vec_elem ] .)
    ;               reduce using rule 87 (vector_exp -> [ vec_elem ] .)


state 322

    (93) matrix_exp -> { mat_elem } .

    ;               reduce using rule 93 (matrix_exp -> { mat_elem } .)


state 323

    (96) mat_more -> empty .

    }               reduce using rule 96 (mat_more -> empty .)


state 324

    (95) mat_more -> , . mat_elem
    (94) mat_elem -> . vector_exp mat_more
    (87) vector_exp -> . [ vec_elem ]

    [               shift and go to state 219

    vector_exp                     shift and go to state 276
    mat_elem                       shift and go to state 351

state 325

    (94) mat_elem -> vector_exp mat_more .

    }               reduce using rule 94 (mat_elem -> vector_exp mat_more .)


state 326

    (168) while_loop -> WHILE np_while_loop_1 ( . expression ) np_while_loop_2 block np_while_loop_3
    (184) expression -> . rel_expression np_expression_1 expression_op
    (191) rel_expression -> . rel_expression_1 np_rel_expression_1 rel_exp_op
    (197) rel_expression_1 -> . exp np_rel_expression_1_1 rel_exp_1_op
    (205) exp -> . term np_exp_1 exp_op
    (211) term -> . factor np_term_1 term_op
    (233) factor -> . fact_neg fact_body np_factor_7
    (234) fact_neg -> . - np_factor_2
    (235) fact_neg -> . ~ np_factor_3
    (236) fact_neg -> . empty
    (251) empty -> .

    -               shift and go to state 130
    ~               shift and go to state 123
    (               reduce using rule 251 (empty -> .)
    CONST_I         reduce using rule 251 (empty -> .)
    CONST_F         reduce using rule 251 (empty -> .)
    CONST_CHAR      reduce using rule 251 (empty -> .)
    CONST_STRING    reduce using rule 251 (empty -> .)
    CONST_BOOL      reduce using rule 251 (empty -> .)
    THIS            reduce using rule 251 (empty -> .)
    ID              reduce using rule 251 (empty -> .)

    expression                     shift and go to state 352
    empty                          shift and go to state 125
    term                           shift and go to state 127
    fact_neg                       shift and go to state 129
    factor                         shift and go to state 134
    rel_expression                 shift and go to state 131
    exp                            shift and go to state 132
    rel_expression_1               shift and go to state 128

state 327

    (180) ret_val -> expression np_return_1 .

    ;               reduce using rule 180 (ret_val -> expression np_return_1 .)


state 328

    (179) return -> RETURN ret_val ; .

    IF              reduce using rule 179 (return -> RETURN ret_val ; .)
    PRINT           reduce using rule 179 (return -> RETURN ret_val ; .)
    SCAN            reduce using rule 179 (return -> RETURN ret_val ; .)
    RETURN          reduce using rule 179 (return -> RETURN ret_val ; .)
    THIS            reduce using rule 179 (return -> RETURN ret_val ; .)
    FOR             reduce using rule 179 (return -> RETURN ret_val ; .)
    WHILE           reduce using rule 179 (return -> RETURN ret_val ; .)
    VAR             reduce using rule 179 (return -> RETURN ret_val ; .)
    VEC             reduce using rule 179 (return -> RETURN ret_val ; .)
    MAT             reduce using rule 179 (return -> RETURN ret_val ; .)
    ID              reduce using rule 179 (return -> RETURN ret_val ; .)
    }               reduce using rule 179 (return -> RETURN ret_val ; .)


state 329

    (163) for_loop -> FOR ( assignment . np_for_loop_1 expression np_for_loop_2 ; ID = expression np_for_loop_3 ) block np_for_loop_4
    (164) np_for_loop_1 -> .

    -               reduce using rule 164 (np_for_loop_1 -> .)
    ~               reduce using rule 164 (np_for_loop_1 -> .)
    (               reduce using rule 164 (np_for_loop_1 -> .)
    CONST_I         reduce using rule 164 (np_for_loop_1 -> .)
    CONST_F         reduce using rule 164 (np_for_loop_1 -> .)
    CONST_CHAR      reduce using rule 164 (np_for_loop_1 -> .)
    CONST_STRING    reduce using rule 164 (np_for_loop_1 -> .)
    CONST_BOOL      reduce using rule 164 (np_for_loop_1 -> .)
    THIS            reduce using rule 164 (np_for_loop_1 -> .)
    ID              reduce using rule 164 (np_for_loop_1 -> .)

    np_for_loop_1                  shift and go to state 353

state 330

    (152) condition -> IF cond_body np_condition_4 .

    IF              reduce using rule 152 (condition -> IF cond_body np_condition_4 .)
    PRINT           reduce using rule 152 (condition -> IF cond_body np_condition_4 .)
    SCAN            reduce using rule 152 (condition -> IF cond_body np_condition_4 .)
    RETURN          reduce using rule 152 (condition -> IF cond_body np_condition_4 .)
    THIS            reduce using rule 152 (condition -> IF cond_body np_condition_4 .)
    FOR             reduce using rule 152 (condition -> IF cond_body np_condition_4 .)
    WHILE           reduce using rule 152 (condition -> IF cond_body np_condition_4 .)
    VAR             reduce using rule 152 (condition -> IF cond_body np_condition_4 .)
    VEC             reduce using rule 152 (condition -> IF cond_body np_condition_4 .)
    MAT             reduce using rule 152 (condition -> IF cond_body np_condition_4 .)
    ID              reduce using rule 152 (condition -> IF cond_body np_condition_4 .)
    }               reduce using rule 152 (condition -> IF cond_body np_condition_4 .)


state 331

    (153) cond_body -> ( expression . ) np_condition_1 block cond_else

    )               shift and go to state 354


state 332

    (173) in_out -> SCAN ( ID . np_in_out_2 id_access ) ;
    (178) np_in_out_2 -> .

    [               reduce using rule 178 (np_in_out_2 -> .)
    )               reduce using rule 178 (np_in_out_2 -> .)
    .               reduce using rule 178 (np_in_out_2 -> .)

    np_in_out_2                    shift and go to state 355

state 333

    (149) statement -> this ID np_statement_1 . func_call ;
    (133) func_call -> . np_func_call_1 ( func_param np_func_call_3 ) np_func_call_4
    (137) np_func_call_1 -> .

    (               reduce using rule 137 (np_func_call_1 -> .)

    np_func_call_1                 shift and go to state 251
    func_call                      shift and go to state 356

state 334

    (174) print_exp -> expression . np_in_out_1 print_more
    (177) np_in_out_1 -> .

    ,               reduce using rule 177 (np_in_out_1 -> .)
    )               reduce using rule 177 (np_in_out_1 -> .)

    np_in_out_1                    shift and go to state 357

state 335

    (172) in_out -> PRINT ( print_exp . ) ;

    )               shift and go to state 358


state 336

    (117) method_param -> ID np_method_param_1 : param_type param_mat_vec np_method_param_6 more_params .

    )               reduce using rule 117 (method_param -> ID np_method_param_1 : param_type param_mat_vec np_method_param_6 more_params .)


state 337

    (119) more_params -> empty .

    )               reduce using rule 119 (more_params -> empty .)


state 338

    (118) more_params -> , . method_param
    (117) method_param -> . ID np_method_param_1 : param_type param_mat_vec np_method_param_6 more_params

    ID              shift and go to state 97

    method_param                   shift and go to state 359

state 339

    (122) param_mat_vec -> [ param_mat ] .

    ,               reduce using rule 122 (param_mat_vec -> [ param_mat ] .)
    )               reduce using rule 122 (param_mat_vec -> [ param_mat ] .)


state 340

    (124) param_mat -> CONST_I , . CONST_I np_method_param_5

    CONST_I         shift and go to state 360


state 341

    (125) param_mat -> CONST_I np_method_param_4 .

    ]               reduce using rule 125 (param_mat -> CONST_I np_method_param_4 .)


state 342

    (59) vector -> VEC ids : vec_mat_type [ CONST_I ] np_vector_1 vec_assgn ; . np_vector_2
    (63) np_vector_2 -> .

    PUBLIC          reduce using rule 63 (np_vector_2 -> .)
    PRIVATE         reduce using rule 63 (np_vector_2 -> .)
    THIS            reduce using rule 63 (np_vector_2 -> .)
    CONSTRUCTOR     reduce using rule 63 (np_vector_2 -> .)
    PUBLIC_FUNC     reduce using rule 63 (np_vector_2 -> .)
    PRIVATE_FUNC    reduce using rule 63 (np_vector_2 -> .)
    ID              reduce using rule 63 (np_vector_2 -> .)
    }               reduce using rule 63 (np_vector_2 -> .)
    IF              reduce using rule 63 (np_vector_2 -> .)
    PRINT           reduce using rule 63 (np_vector_2 -> .)
    SCAN            reduce using rule 63 (np_vector_2 -> .)
    RETURN          reduce using rule 63 (np_vector_2 -> .)
    FOR             reduce using rule 63 (np_vector_2 -> .)
    WHILE           reduce using rule 63 (np_vector_2 -> .)
    VAR             reduce using rule 63 (np_vector_2 -> .)
    VEC             reduce using rule 63 (np_vector_2 -> .)
    MAT             reduce using rule 63 (np_vector_2 -> .)

    np_vector_2                    shift and go to state 361

state 343

    (60) vec_assgn -> = vector_exp .

    ;               reduce using rule 60 (vec_assgn -> = vector_exp .)


state 344

    (134) func_param -> expression . np_func_call_2 more_fpar
    (138) np_func_call_2 -> .

    ,               reduce using rule 138 (np_func_call_2 -> .)
    )               reduce using rule 138 (np_func_call_2 -> .)

    np_func_call_2                 shift and go to state 362

state 345

    (133) func_call -> np_func_call_1 ( func_param . np_func_call_3 ) np_func_call_4
    (139) np_func_call_3 -> .

    )               reduce using rule 139 (np_func_call_3 -> .)

    np_func_call_3                 shift and go to state 363

state 346

    (64) matrix -> MAT ids : vec_mat_type [ CONST_I , CONST_I ] np_matrix_1 . mat_assgn ; np_matrix_2
    (65) mat_assgn -> . = matrix_exp
    (66) mat_assgn -> . empty
    (251) empty -> .

    =               shift and go to state 366
    ;               reduce using rule 251 (empty -> .)

    mat_assgn                      shift and go to state 365
    empty                          shift and go to state 364

state 347

    (240) fact_id -> np_factor_9 func_call .

    *               reduce using rule 240 (fact_id -> np_factor_9 func_call .)
    /               reduce using rule 240 (fact_id -> np_factor_9 func_call .)
    %               reduce using rule 240 (fact_id -> np_factor_9 func_call .)
    +               reduce using rule 240 (fact_id -> np_factor_9 func_call .)
    -               reduce using rule 240 (fact_id -> np_factor_9 func_call .)
    <               reduce using rule 240 (fact_id -> np_factor_9 func_call .)
    LESS_EQUAL_THAN reduce using rule 240 (fact_id -> np_factor_9 func_call .)
    >               reduce using rule 240 (fact_id -> np_factor_9 func_call .)
    GREATER_EQUAL_THAN reduce using rule 240 (fact_id -> np_factor_9 func_call .)
    EQUAL           reduce using rule 240 (fact_id -> np_factor_9 func_call .)
    NOT_EQUAL       reduce using rule 240 (fact_id -> np_factor_9 func_call .)
    AND             reduce using rule 240 (fact_id -> np_factor_9 func_call .)
    OR              reduce using rule 240 (fact_id -> np_factor_9 func_call .)
    XOR             reduce using rule 240 (fact_id -> np_factor_9 func_call .)
    ,               reduce using rule 240 (fact_id -> np_factor_9 func_call .)
    ]               reduce using rule 240 (fact_id -> np_factor_9 func_call .)
    ;               reduce using rule 240 (fact_id -> np_factor_9 func_call .)
    )               reduce using rule 240 (fact_id -> np_factor_9 func_call .)


state 348

    (241) fact_id -> np_factor_8 id_access .

    *               reduce using rule 241 (fact_id -> np_factor_8 id_access .)
    /               reduce using rule 241 (fact_id -> np_factor_8 id_access .)
    %               reduce using rule 241 (fact_id -> np_factor_8 id_access .)
    +               reduce using rule 241 (fact_id -> np_factor_8 id_access .)
    -               reduce using rule 241 (fact_id -> np_factor_8 id_access .)
    <               reduce using rule 241 (fact_id -> np_factor_8 id_access .)
    LESS_EQUAL_THAN reduce using rule 241 (fact_id -> np_factor_8 id_access .)
    >               reduce using rule 241 (fact_id -> np_factor_8 id_access .)
    GREATER_EQUAL_THAN reduce using rule 241 (fact_id -> np_factor_8 id_access .)
    EQUAL           reduce using rule 241 (fact_id -> np_factor_8 id_access .)
    NOT_EQUAL       reduce using rule 241 (fact_id -> np_factor_8 id_access .)
    AND             reduce using rule 241 (fact_id -> np_factor_8 id_access .)
    OR              reduce using rule 241 (fact_id -> np_factor_8 id_access .)
    XOR             reduce using rule 241 (fact_id -> np_factor_8 id_access .)
    ,               reduce using rule 241 (fact_id -> np_factor_8 id_access .)
    ]               reduce using rule 241 (fact_id -> np_factor_8 id_access .)
    ;               reduce using rule 241 (fact_id -> np_factor_8 id_access .)
    )               reduce using rule 241 (fact_id -> np_factor_8 id_access .)


state 349

    (237) fact_body -> ( np_factor_4 expression ) np_factor_5 .

    *               reduce using rule 237 (fact_body -> ( np_factor_4 expression ) np_factor_5 .)
    /               reduce using rule 237 (fact_body -> ( np_factor_4 expression ) np_factor_5 .)
    %               reduce using rule 237 (fact_body -> ( np_factor_4 expression ) np_factor_5 .)
    +               reduce using rule 237 (fact_body -> ( np_factor_4 expression ) np_factor_5 .)
    -               reduce using rule 237 (fact_body -> ( np_factor_4 expression ) np_factor_5 .)
    <               reduce using rule 237 (fact_body -> ( np_factor_4 expression ) np_factor_5 .)
    LESS_EQUAL_THAN reduce using rule 237 (fact_body -> ( np_factor_4 expression ) np_factor_5 .)
    >               reduce using rule 237 (fact_body -> ( np_factor_4 expression ) np_factor_5 .)
    GREATER_EQUAL_THAN reduce using rule 237 (fact_body -> ( np_factor_4 expression ) np_factor_5 .)
    EQUAL           reduce using rule 237 (fact_body -> ( np_factor_4 expression ) np_factor_5 .)
    NOT_EQUAL       reduce using rule 237 (fact_body -> ( np_factor_4 expression ) np_factor_5 .)
    AND             reduce using rule 237 (fact_body -> ( np_factor_4 expression ) np_factor_5 .)
    OR              reduce using rule 237 (fact_body -> ( np_factor_4 expression ) np_factor_5 .)
    XOR             reduce using rule 237 (fact_body -> ( np_factor_4 expression ) np_factor_5 .)
    ,               reduce using rule 237 (fact_body -> ( np_factor_4 expression ) np_factor_5 .)
    ]               reduce using rule 237 (fact_body -> ( np_factor_4 expression ) np_factor_5 .)
    ;               reduce using rule 237 (fact_body -> ( np_factor_4 expression ) np_factor_5 .)
    )               reduce using rule 237 (fact_body -> ( np_factor_4 expression ) np_factor_5 .)


state 350

    (91) vec_more -> , vec_elem .

    ]               reduce using rule 91 (vec_more -> , vec_elem .)


state 351

    (95) mat_more -> , mat_elem .

    }               reduce using rule 95 (mat_more -> , mat_elem .)


state 352

    (168) while_loop -> WHILE np_while_loop_1 ( expression . ) np_while_loop_2 block np_while_loop_3

    )               shift and go to state 367


state 353

    (163) for_loop -> FOR ( assignment np_for_loop_1 . expression np_for_loop_2 ; ID = expression np_for_loop_3 ) block np_for_loop_4
    (184) expression -> . rel_expression np_expression_1 expression_op
    (191) rel_expression -> . rel_expression_1 np_rel_expression_1 rel_exp_op
    (197) rel_expression_1 -> . exp np_rel_expression_1_1 rel_exp_1_op
    (205) exp -> . term np_exp_1 exp_op
    (211) term -> . factor np_term_1 term_op
    (233) factor -> . fact_neg fact_body np_factor_7
    (234) fact_neg -> . - np_factor_2
    (235) fact_neg -> . ~ np_factor_3
    (236) fact_neg -> . empty
    (251) empty -> .

    -               shift and go to state 130
    ~               shift and go to state 123
    (               reduce using rule 251 (empty -> .)
    CONST_I         reduce using rule 251 (empty -> .)
    CONST_F         reduce using rule 251 (empty -> .)
    CONST_CHAR      reduce using rule 251 (empty -> .)
    CONST_STRING    reduce using rule 251 (empty -> .)
    CONST_BOOL      reduce using rule 251 (empty -> .)
    THIS            reduce using rule 251 (empty -> .)
    ID              reduce using rule 251 (empty -> .)

    expression                     shift and go to state 368
    empty                          shift and go to state 125
    term                           shift and go to state 127
    fact_neg                       shift and go to state 129
    exp                            shift and go to state 132
    factor                         shift and go to state 134
    rel_expression                 shift and go to state 131
    rel_expression_1               shift and go to state 128

state 354

    (153) cond_body -> ( expression ) . np_condition_1 block cond_else
    (157) np_condition_1 -> .

    {               reduce using rule 157 (np_condition_1 -> .)

    np_condition_1                 shift and go to state 369

state 355

    (173) in_out -> SCAN ( ID np_in_out_2 . id_access ) ;
    (69) id_access -> . id_mat_acc id_var_acc
    (70) id_mat_acc -> . mat_vec_access
    (71) id_mat_acc -> . empty
    (97) mat_vec_access -> . [ mat_vec_index mat_access ]
    (251) empty -> .

    [               shift and go to state 109
    .               reduce using rule 251 (empty -> .)
    )               reduce using rule 251 (empty -> .)

    mat_vec_access                 shift and go to state 111
    id_mat_acc                     shift and go to state 112
    id_access                      shift and go to state 370
    empty                          shift and go to state 110

state 356

    (149) statement -> this ID np_statement_1 func_call . ;

    ;               shift and go to state 371


state 357

    (174) print_exp -> expression np_in_out_1 . print_more
    (175) print_more -> . , print_exp
    (176) print_more -> . empty
    (251) empty -> .

    ,               shift and go to state 374
    )               reduce using rule 251 (empty -> .)

    empty                          shift and go to state 373
    print_more                     shift and go to state 372

state 358

    (172) in_out -> PRINT ( print_exp ) . ;

    ;               shift and go to state 375


state 359

    (118) more_params -> , method_param .

    )               reduce using rule 118 (more_params -> , method_param .)


state 360

    (124) param_mat -> CONST_I , CONST_I . np_method_param_5
    (130) np_method_param_5 -> .

    ]               reduce using rule 130 (np_method_param_5 -> .)

    np_method_param_5              shift and go to state 376

state 361

    (59) vector -> VEC ids : vec_mat_type [ CONST_I ] np_vector_1 vec_assgn ; np_vector_2 .

    PUBLIC          reduce using rule 59 (vector -> VEC ids : vec_mat_type [ CONST_I ] np_vector_1 vec_assgn ; np_vector_2 .)
    PRIVATE         reduce using rule 59 (vector -> VEC ids : vec_mat_type [ CONST_I ] np_vector_1 vec_assgn ; np_vector_2 .)
    THIS            reduce using rule 59 (vector -> VEC ids : vec_mat_type [ CONST_I ] np_vector_1 vec_assgn ; np_vector_2 .)
    CONSTRUCTOR     reduce using rule 59 (vector -> VEC ids : vec_mat_type [ CONST_I ] np_vector_1 vec_assgn ; np_vector_2 .)
    PUBLIC_FUNC     reduce using rule 59 (vector -> VEC ids : vec_mat_type [ CONST_I ] np_vector_1 vec_assgn ; np_vector_2 .)
    PRIVATE_FUNC    reduce using rule 59 (vector -> VEC ids : vec_mat_type [ CONST_I ] np_vector_1 vec_assgn ; np_vector_2 .)
    ID              reduce using rule 59 (vector -> VEC ids : vec_mat_type [ CONST_I ] np_vector_1 vec_assgn ; np_vector_2 .)
    }               reduce using rule 59 (vector -> VEC ids : vec_mat_type [ CONST_I ] np_vector_1 vec_assgn ; np_vector_2 .)
    IF              reduce using rule 59 (vector -> VEC ids : vec_mat_type [ CONST_I ] np_vector_1 vec_assgn ; np_vector_2 .)
    PRINT           reduce using rule 59 (vector -> VEC ids : vec_mat_type [ CONST_I ] np_vector_1 vec_assgn ; np_vector_2 .)
    SCAN            reduce using rule 59 (vector -> VEC ids : vec_mat_type [ CONST_I ] np_vector_1 vec_assgn ; np_vector_2 .)
    RETURN          reduce using rule 59 (vector -> VEC ids : vec_mat_type [ CONST_I ] np_vector_1 vec_assgn ; np_vector_2 .)
    FOR             reduce using rule 59 (vector -> VEC ids : vec_mat_type [ CONST_I ] np_vector_1 vec_assgn ; np_vector_2 .)
    WHILE           reduce using rule 59 (vector -> VEC ids : vec_mat_type [ CONST_I ] np_vector_1 vec_assgn ; np_vector_2 .)
    VAR             reduce using rule 59 (vector -> VEC ids : vec_mat_type [ CONST_I ] np_vector_1 vec_assgn ; np_vector_2 .)
    VEC             reduce using rule 59 (vector -> VEC ids : vec_mat_type [ CONST_I ] np_vector_1 vec_assgn ; np_vector_2 .)
    MAT             reduce using rule 59 (vector -> VEC ids : vec_mat_type [ CONST_I ] np_vector_1 vec_assgn ; np_vector_2 .)


state 362

    (134) func_param -> expression np_func_call_2 . more_fpar
    (135) more_fpar -> . , func_param
    (136) more_fpar -> . empty
    (251) empty -> .

    ,               shift and go to state 379
    )               reduce using rule 251 (empty -> .)

    empty                          shift and go to state 378
    more_fpar                      shift and go to state 377

state 363

    (133) func_call -> np_func_call_1 ( func_param np_func_call_3 . ) np_func_call_4

    )               shift and go to state 380


state 364

    (66) mat_assgn -> empty .

    ;               reduce using rule 66 (mat_assgn -> empty .)


state 365

    (64) matrix -> MAT ids : vec_mat_type [ CONST_I , CONST_I ] np_matrix_1 mat_assgn . ; np_matrix_2

    ;               shift and go to state 381


state 366

    (65) mat_assgn -> = . matrix_exp
    (93) matrix_exp -> . { mat_elem }

    {               shift and go to state 222

    matrix_exp                     shift and go to state 382

state 367

    (168) while_loop -> WHILE np_while_loop_1 ( expression ) . np_while_loop_2 block np_while_loop_3
    (170) np_while_loop_2 -> .

    {               reduce using rule 170 (np_while_loop_2 -> .)

    np_while_loop_2                shift and go to state 383

state 368

    (163) for_loop -> FOR ( assignment np_for_loop_1 expression . np_for_loop_2 ; ID = expression np_for_loop_3 ) block np_for_loop_4
    (165) np_for_loop_2 -> .

    ;               reduce using rule 165 (np_for_loop_2 -> .)

    np_for_loop_2                  shift and go to state 384

state 369

    (153) cond_body -> ( expression ) np_condition_1 . block cond_else
    (141) block -> . { bstmt }

    {               shift and go to state 171

    block                          shift and go to state 385

state 370

    (173) in_out -> SCAN ( ID np_in_out_2 id_access . ) ;

    )               shift and go to state 386


state 371

    (149) statement -> this ID np_statement_1 func_call ; .

    IF              reduce using rule 149 (statement -> this ID np_statement_1 func_call ; .)
    PRINT           reduce using rule 149 (statement -> this ID np_statement_1 func_call ; .)
    SCAN            reduce using rule 149 (statement -> this ID np_statement_1 func_call ; .)
    RETURN          reduce using rule 149 (statement -> this ID np_statement_1 func_call ; .)
    THIS            reduce using rule 149 (statement -> this ID np_statement_1 func_call ; .)
    FOR             reduce using rule 149 (statement -> this ID np_statement_1 func_call ; .)
    WHILE           reduce using rule 149 (statement -> this ID np_statement_1 func_call ; .)
    VAR             reduce using rule 149 (statement -> this ID np_statement_1 func_call ; .)
    VEC             reduce using rule 149 (statement -> this ID np_statement_1 func_call ; .)
    MAT             reduce using rule 149 (statement -> this ID np_statement_1 func_call ; .)
    ID              reduce using rule 149 (statement -> this ID np_statement_1 func_call ; .)
    }               reduce using rule 149 (statement -> this ID np_statement_1 func_call ; .)


state 372

    (174) print_exp -> expression np_in_out_1 print_more .

    )               reduce using rule 174 (print_exp -> expression np_in_out_1 print_more .)


state 373

    (176) print_more -> empty .

    )               reduce using rule 176 (print_more -> empty .)


state 374

    (175) print_more -> , . print_exp
    (174) print_exp -> . expression np_in_out_1 print_more
    (184) expression -> . rel_expression np_expression_1 expression_op
    (191) rel_expression -> . rel_expression_1 np_rel_expression_1 rel_exp_op
    (197) rel_expression_1 -> . exp np_rel_expression_1_1 rel_exp_1_op
    (205) exp -> . term np_exp_1 exp_op
    (211) term -> . factor np_term_1 term_op
    (233) factor -> . fact_neg fact_body np_factor_7
    (234) fact_neg -> . - np_factor_2
    (235) fact_neg -> . ~ np_factor_3
    (236) fact_neg -> . empty
    (251) empty -> .

    -               shift and go to state 130
    ~               shift and go to state 123
    (               reduce using rule 251 (empty -> .)
    CONST_I         reduce using rule 251 (empty -> .)
    CONST_F         reduce using rule 251 (empty -> .)
    CONST_CHAR      reduce using rule 251 (empty -> .)
    CONST_STRING    reduce using rule 251 (empty -> .)
    CONST_BOOL      reduce using rule 251 (empty -> .)
    THIS            reduce using rule 251 (empty -> .)
    ID              reduce using rule 251 (empty -> .)

    expression                     shift and go to state 334
    empty                          shift and go to state 125
    term                           shift and go to state 127
    fact_neg                       shift and go to state 129
    print_exp                      shift and go to state 387
    exp                            shift and go to state 132
    factor                         shift and go to state 134
    rel_expression                 shift and go to state 131
    rel_expression_1               shift and go to state 128

state 375

    (172) in_out -> PRINT ( print_exp ) ; .

    IF              reduce using rule 172 (in_out -> PRINT ( print_exp ) ; .)
    PRINT           reduce using rule 172 (in_out -> PRINT ( print_exp ) ; .)
    SCAN            reduce using rule 172 (in_out -> PRINT ( print_exp ) ; .)
    RETURN          reduce using rule 172 (in_out -> PRINT ( print_exp ) ; .)
    THIS            reduce using rule 172 (in_out -> PRINT ( print_exp ) ; .)
    FOR             reduce using rule 172 (in_out -> PRINT ( print_exp ) ; .)
    WHILE           reduce using rule 172 (in_out -> PRINT ( print_exp ) ; .)
    VAR             reduce using rule 172 (in_out -> PRINT ( print_exp ) ; .)
    VEC             reduce using rule 172 (in_out -> PRINT ( print_exp ) ; .)
    MAT             reduce using rule 172 (in_out -> PRINT ( print_exp ) ; .)
    ID              reduce using rule 172 (in_out -> PRINT ( print_exp ) ; .)
    }               reduce using rule 172 (in_out -> PRINT ( print_exp ) ; .)


state 376

    (124) param_mat -> CONST_I , CONST_I np_method_param_5 .

    ]               reduce using rule 124 (param_mat -> CONST_I , CONST_I np_method_param_5 .)


state 377

    (134) func_param -> expression np_func_call_2 more_fpar .

    )               reduce using rule 134 (func_param -> expression np_func_call_2 more_fpar .)


state 378

    (136) more_fpar -> empty .

    )               reduce using rule 136 (more_fpar -> empty .)


state 379

    (135) more_fpar -> , . func_param
    (134) func_param -> . expression np_func_call_2 more_fpar
    (184) expression -> . rel_expression np_expression_1 expression_op
    (191) rel_expression -> . rel_expression_1 np_rel_expression_1 rel_exp_op
    (197) rel_expression_1 -> . exp np_rel_expression_1_1 rel_exp_1_op
    (205) exp -> . term np_exp_1 exp_op
    (211) term -> . factor np_term_1 term_op
    (233) factor -> . fact_neg fact_body np_factor_7
    (234) fact_neg -> . - np_factor_2
    (235) fact_neg -> . ~ np_factor_3
    (236) fact_neg -> . empty
    (251) empty -> .

    -               shift and go to state 130
    ~               shift and go to state 123
    (               reduce using rule 251 (empty -> .)
    CONST_I         reduce using rule 251 (empty -> .)
    CONST_F         reduce using rule 251 (empty -> .)
    CONST_CHAR      reduce using rule 251 (empty -> .)
    CONST_STRING    reduce using rule 251 (empty -> .)
    CONST_BOOL      reduce using rule 251 (empty -> .)
    THIS            reduce using rule 251 (empty -> .)
    ID              reduce using rule 251 (empty -> .)

    expression                     shift and go to state 344
    func_param                     shift and go to state 388
    empty                          shift and go to state 125
    term                           shift and go to state 127
    rel_expression_1               shift and go to state 128
    fact_neg                       shift and go to state 129
    exp                            shift and go to state 132
    factor                         shift and go to state 134
    rel_expression                 shift and go to state 131

state 380

    (133) func_call -> np_func_call_1 ( func_param np_func_call_3 ) . np_func_call_4
    (140) np_func_call_4 -> .

    ;               reduce using rule 140 (np_func_call_4 -> .)
    ,               reduce using rule 140 (np_func_call_4 -> .)
    ]               reduce using rule 140 (np_func_call_4 -> .)
    *               reduce using rule 140 (np_func_call_4 -> .)
    /               reduce using rule 140 (np_func_call_4 -> .)
    %               reduce using rule 140 (np_func_call_4 -> .)
    +               reduce using rule 140 (np_func_call_4 -> .)
    -               reduce using rule 140 (np_func_call_4 -> .)
    <               reduce using rule 140 (np_func_call_4 -> .)
    LESS_EQUAL_THAN reduce using rule 140 (np_func_call_4 -> .)
    >               reduce using rule 140 (np_func_call_4 -> .)
    GREATER_EQUAL_THAN reduce using rule 140 (np_func_call_4 -> .)
    EQUAL           reduce using rule 140 (np_func_call_4 -> .)
    NOT_EQUAL       reduce using rule 140 (np_func_call_4 -> .)
    AND             reduce using rule 140 (np_func_call_4 -> .)
    OR              reduce using rule 140 (np_func_call_4 -> .)
    XOR             reduce using rule 140 (np_func_call_4 -> .)
    )               reduce using rule 140 (np_func_call_4 -> .)

    np_func_call_4                 shift and go to state 389

state 381

    (64) matrix -> MAT ids : vec_mat_type [ CONST_I , CONST_I ] np_matrix_1 mat_assgn ; . np_matrix_2
    (68) np_matrix_2 -> .

    PUBLIC          reduce using rule 68 (np_matrix_2 -> .)
    PRIVATE         reduce using rule 68 (np_matrix_2 -> .)
    THIS            reduce using rule 68 (np_matrix_2 -> .)
    CONSTRUCTOR     reduce using rule 68 (np_matrix_2 -> .)
    PUBLIC_FUNC     reduce using rule 68 (np_matrix_2 -> .)
    PRIVATE_FUNC    reduce using rule 68 (np_matrix_2 -> .)
    ID              reduce using rule 68 (np_matrix_2 -> .)
    }               reduce using rule 68 (np_matrix_2 -> .)
    IF              reduce using rule 68 (np_matrix_2 -> .)
    PRINT           reduce using rule 68 (np_matrix_2 -> .)
    SCAN            reduce using rule 68 (np_matrix_2 -> .)
    RETURN          reduce using rule 68 (np_matrix_2 -> .)
    FOR             reduce using rule 68 (np_matrix_2 -> .)
    WHILE           reduce using rule 68 (np_matrix_2 -> .)
    VAR             reduce using rule 68 (np_matrix_2 -> .)
    VEC             reduce using rule 68 (np_matrix_2 -> .)
    MAT             reduce using rule 68 (np_matrix_2 -> .)

    np_matrix_2                    shift and go to state 390

state 382

    (65) mat_assgn -> = matrix_exp .

    ;               reduce using rule 65 (mat_assgn -> = matrix_exp .)


state 383

    (168) while_loop -> WHILE np_while_loop_1 ( expression ) np_while_loop_2 . block np_while_loop_3
    (141) block -> . { bstmt }

    {               shift and go to state 171

    block                          shift and go to state 391

state 384

    (163) for_loop -> FOR ( assignment np_for_loop_1 expression np_for_loop_2 . ; ID = expression np_for_loop_3 ) block np_for_loop_4

    ;               shift and go to state 392


state 385

    (153) cond_body -> ( expression ) np_condition_1 block . cond_else
    (154) cond_else -> . np_condition_2 ELSE block
    (155) cond_else -> . np_condition_2 ELSEIF cond_body
    (156) cond_else -> . np_condition_3
    (158) np_condition_2 -> .
    (159) np_condition_3 -> .

    ELSE            reduce using rule 158 (np_condition_2 -> .)
    ELSEIF          reduce using rule 158 (np_condition_2 -> .)
    IF              reduce using rule 159 (np_condition_3 -> .)
    PRINT           reduce using rule 159 (np_condition_3 -> .)
    SCAN            reduce using rule 159 (np_condition_3 -> .)
    RETURN          reduce using rule 159 (np_condition_3 -> .)
    THIS            reduce using rule 159 (np_condition_3 -> .)
    FOR             reduce using rule 159 (np_condition_3 -> .)
    WHILE           reduce using rule 159 (np_condition_3 -> .)
    VAR             reduce using rule 159 (np_condition_3 -> .)
    VEC             reduce using rule 159 (np_condition_3 -> .)
    MAT             reduce using rule 159 (np_condition_3 -> .)
    ID              reduce using rule 159 (np_condition_3 -> .)
    }               reduce using rule 159 (np_condition_3 -> .)

    np_condition_2                 shift and go to state 393
    np_condition_3                 shift and go to state 394
    cond_else                      shift and go to state 395

state 386

    (173) in_out -> SCAN ( ID np_in_out_2 id_access ) . ;

    ;               shift and go to state 396


state 387

    (175) print_more -> , print_exp .

    )               reduce using rule 175 (print_more -> , print_exp .)


state 388

    (135) more_fpar -> , func_param .

    )               reduce using rule 135 (more_fpar -> , func_param .)


state 389

    (133) func_call -> np_func_call_1 ( func_param np_func_call_3 ) np_func_call_4 .

    ;               reduce using rule 133 (func_call -> np_func_call_1 ( func_param np_func_call_3 ) np_func_call_4 .)
    ,               reduce using rule 133 (func_call -> np_func_call_1 ( func_param np_func_call_3 ) np_func_call_4 .)
    ]               reduce using rule 133 (func_call -> np_func_call_1 ( func_param np_func_call_3 ) np_func_call_4 .)
    *               reduce using rule 133 (func_call -> np_func_call_1 ( func_param np_func_call_3 ) np_func_call_4 .)
    /               reduce using rule 133 (func_call -> np_func_call_1 ( func_param np_func_call_3 ) np_func_call_4 .)
    %               reduce using rule 133 (func_call -> np_func_call_1 ( func_param np_func_call_3 ) np_func_call_4 .)
    +               reduce using rule 133 (func_call -> np_func_call_1 ( func_param np_func_call_3 ) np_func_call_4 .)
    -               reduce using rule 133 (func_call -> np_func_call_1 ( func_param np_func_call_3 ) np_func_call_4 .)
    <               reduce using rule 133 (func_call -> np_func_call_1 ( func_param np_func_call_3 ) np_func_call_4 .)
    LESS_EQUAL_THAN reduce using rule 133 (func_call -> np_func_call_1 ( func_param np_func_call_3 ) np_func_call_4 .)
    >               reduce using rule 133 (func_call -> np_func_call_1 ( func_param np_func_call_3 ) np_func_call_4 .)
    GREATER_EQUAL_THAN reduce using rule 133 (func_call -> np_func_call_1 ( func_param np_func_call_3 ) np_func_call_4 .)
    EQUAL           reduce using rule 133 (func_call -> np_func_call_1 ( func_param np_func_call_3 ) np_func_call_4 .)
    NOT_EQUAL       reduce using rule 133 (func_call -> np_func_call_1 ( func_param np_func_call_3 ) np_func_call_4 .)
    AND             reduce using rule 133 (func_call -> np_func_call_1 ( func_param np_func_call_3 ) np_func_call_4 .)
    OR              reduce using rule 133 (func_call -> np_func_call_1 ( func_param np_func_call_3 ) np_func_call_4 .)
    XOR             reduce using rule 133 (func_call -> np_func_call_1 ( func_param np_func_call_3 ) np_func_call_4 .)
    )               reduce using rule 133 (func_call -> np_func_call_1 ( func_param np_func_call_3 ) np_func_call_4 .)


state 390

    (64) matrix -> MAT ids : vec_mat_type [ CONST_I , CONST_I ] np_matrix_1 mat_assgn ; np_matrix_2 .

    IF              reduce using rule 64 (matrix -> MAT ids : vec_mat_type [ CONST_I , CONST_I ] np_matrix_1 mat_assgn ; np_matrix_2 .)
    PRINT           reduce using rule 64 (matrix -> MAT ids : vec_mat_type [ CONST_I , CONST_I ] np_matrix_1 mat_assgn ; np_matrix_2 .)
    SCAN            reduce using rule 64 (matrix -> MAT ids : vec_mat_type [ CONST_I , CONST_I ] np_matrix_1 mat_assgn ; np_matrix_2 .)
    RETURN          reduce using rule 64 (matrix -> MAT ids : vec_mat_type [ CONST_I , CONST_I ] np_matrix_1 mat_assgn ; np_matrix_2 .)
    THIS            reduce using rule 64 (matrix -> MAT ids : vec_mat_type [ CONST_I , CONST_I ] np_matrix_1 mat_assgn ; np_matrix_2 .)
    FOR             reduce using rule 64 (matrix -> MAT ids : vec_mat_type [ CONST_I , CONST_I ] np_matrix_1 mat_assgn ; np_matrix_2 .)
    WHILE           reduce using rule 64 (matrix -> MAT ids : vec_mat_type [ CONST_I , CONST_I ] np_matrix_1 mat_assgn ; np_matrix_2 .)
    VAR             reduce using rule 64 (matrix -> MAT ids : vec_mat_type [ CONST_I , CONST_I ] np_matrix_1 mat_assgn ; np_matrix_2 .)
    VEC             reduce using rule 64 (matrix -> MAT ids : vec_mat_type [ CONST_I , CONST_I ] np_matrix_1 mat_assgn ; np_matrix_2 .)
    MAT             reduce using rule 64 (matrix -> MAT ids : vec_mat_type [ CONST_I , CONST_I ] np_matrix_1 mat_assgn ; np_matrix_2 .)
    ID              reduce using rule 64 (matrix -> MAT ids : vec_mat_type [ CONST_I , CONST_I ] np_matrix_1 mat_assgn ; np_matrix_2 .)
    }               reduce using rule 64 (matrix -> MAT ids : vec_mat_type [ CONST_I , CONST_I ] np_matrix_1 mat_assgn ; np_matrix_2 .)
    PUBLIC          reduce using rule 64 (matrix -> MAT ids : vec_mat_type [ CONST_I , CONST_I ] np_matrix_1 mat_assgn ; np_matrix_2 .)
    PRIVATE         reduce using rule 64 (matrix -> MAT ids : vec_mat_type [ CONST_I , CONST_I ] np_matrix_1 mat_assgn ; np_matrix_2 .)
    CONSTRUCTOR     reduce using rule 64 (matrix -> MAT ids : vec_mat_type [ CONST_I , CONST_I ] np_matrix_1 mat_assgn ; np_matrix_2 .)
    PUBLIC_FUNC     reduce using rule 64 (matrix -> MAT ids : vec_mat_type [ CONST_I , CONST_I ] np_matrix_1 mat_assgn ; np_matrix_2 .)
    PRIVATE_FUNC    reduce using rule 64 (matrix -> MAT ids : vec_mat_type [ CONST_I , CONST_I ] np_matrix_1 mat_assgn ; np_matrix_2 .)


state 391

    (168) while_loop -> WHILE np_while_loop_1 ( expression ) np_while_loop_2 block . np_while_loop_3
    (171) np_while_loop_3 -> .

    IF              reduce using rule 171 (np_while_loop_3 -> .)
    PRINT           reduce using rule 171 (np_while_loop_3 -> .)
    SCAN            reduce using rule 171 (np_while_loop_3 -> .)
    RETURN          reduce using rule 171 (np_while_loop_3 -> .)
    THIS            reduce using rule 171 (np_while_loop_3 -> .)
    FOR             reduce using rule 171 (np_while_loop_3 -> .)
    WHILE           reduce using rule 171 (np_while_loop_3 -> .)
    VAR             reduce using rule 171 (np_while_loop_3 -> .)
    VEC             reduce using rule 171 (np_while_loop_3 -> .)
    MAT             reduce using rule 171 (np_while_loop_3 -> .)
    ID              reduce using rule 171 (np_while_loop_3 -> .)
    }               reduce using rule 171 (np_while_loop_3 -> .)

    np_while_loop_3                shift and go to state 397

state 392

    (163) for_loop -> FOR ( assignment np_for_loop_1 expression np_for_loop_2 ; . ID = expression np_for_loop_3 ) block np_for_loop_4

    ID              shift and go to state 398


state 393

    (154) cond_else -> np_condition_2 . ELSE block
    (155) cond_else -> np_condition_2 . ELSEIF cond_body

    ELSE            shift and go to state 399
    ELSEIF          shift and go to state 400


state 394

    (156) cond_else -> np_condition_3 .

    IF              reduce using rule 156 (cond_else -> np_condition_3 .)
    PRINT           reduce using rule 156 (cond_else -> np_condition_3 .)
    SCAN            reduce using rule 156 (cond_else -> np_condition_3 .)
    RETURN          reduce using rule 156 (cond_else -> np_condition_3 .)
    THIS            reduce using rule 156 (cond_else -> np_condition_3 .)
    FOR             reduce using rule 156 (cond_else -> np_condition_3 .)
    WHILE           reduce using rule 156 (cond_else -> np_condition_3 .)
    VAR             reduce using rule 156 (cond_else -> np_condition_3 .)
    VEC             reduce using rule 156 (cond_else -> np_condition_3 .)
    MAT             reduce using rule 156 (cond_else -> np_condition_3 .)
    ID              reduce using rule 156 (cond_else -> np_condition_3 .)
    }               reduce using rule 156 (cond_else -> np_condition_3 .)


state 395

    (153) cond_body -> ( expression ) np_condition_1 block cond_else .

    IF              reduce using rule 153 (cond_body -> ( expression ) np_condition_1 block cond_else .)
    PRINT           reduce using rule 153 (cond_body -> ( expression ) np_condition_1 block cond_else .)
    SCAN            reduce using rule 153 (cond_body -> ( expression ) np_condition_1 block cond_else .)
    RETURN          reduce using rule 153 (cond_body -> ( expression ) np_condition_1 block cond_else .)
    THIS            reduce using rule 153 (cond_body -> ( expression ) np_condition_1 block cond_else .)
    FOR             reduce using rule 153 (cond_body -> ( expression ) np_condition_1 block cond_else .)
    WHILE           reduce using rule 153 (cond_body -> ( expression ) np_condition_1 block cond_else .)
    VAR             reduce using rule 153 (cond_body -> ( expression ) np_condition_1 block cond_else .)
    VEC             reduce using rule 153 (cond_body -> ( expression ) np_condition_1 block cond_else .)
    MAT             reduce using rule 153 (cond_body -> ( expression ) np_condition_1 block cond_else .)
    ID              reduce using rule 153 (cond_body -> ( expression ) np_condition_1 block cond_else .)
    }               reduce using rule 153 (cond_body -> ( expression ) np_condition_1 block cond_else .)


state 396

    (173) in_out -> SCAN ( ID np_in_out_2 id_access ) ; .

    IF              reduce using rule 173 (in_out -> SCAN ( ID np_in_out_2 id_access ) ; .)
    PRINT           reduce using rule 173 (in_out -> SCAN ( ID np_in_out_2 id_access ) ; .)
    SCAN            reduce using rule 173 (in_out -> SCAN ( ID np_in_out_2 id_access ) ; .)
    RETURN          reduce using rule 173 (in_out -> SCAN ( ID np_in_out_2 id_access ) ; .)
    THIS            reduce using rule 173 (in_out -> SCAN ( ID np_in_out_2 id_access ) ; .)
    FOR             reduce using rule 173 (in_out -> SCAN ( ID np_in_out_2 id_access ) ; .)
    WHILE           reduce using rule 173 (in_out -> SCAN ( ID np_in_out_2 id_access ) ; .)
    VAR             reduce using rule 173 (in_out -> SCAN ( ID np_in_out_2 id_access ) ; .)
    VEC             reduce using rule 173 (in_out -> SCAN ( ID np_in_out_2 id_access ) ; .)
    MAT             reduce using rule 173 (in_out -> SCAN ( ID np_in_out_2 id_access ) ; .)
    ID              reduce using rule 173 (in_out -> SCAN ( ID np_in_out_2 id_access ) ; .)
    }               reduce using rule 173 (in_out -> SCAN ( ID np_in_out_2 id_access ) ; .)


state 397

    (168) while_loop -> WHILE np_while_loop_1 ( expression ) np_while_loop_2 block np_while_loop_3 .

    IF              reduce using rule 168 (while_loop -> WHILE np_while_loop_1 ( expression ) np_while_loop_2 block np_while_loop_3 .)
    PRINT           reduce using rule 168 (while_loop -> WHILE np_while_loop_1 ( expression ) np_while_loop_2 block np_while_loop_3 .)
    SCAN            reduce using rule 168 (while_loop -> WHILE np_while_loop_1 ( expression ) np_while_loop_2 block np_while_loop_3 .)
    RETURN          reduce using rule 168 (while_loop -> WHILE np_while_loop_1 ( expression ) np_while_loop_2 block np_while_loop_3 .)
    THIS            reduce using rule 168 (while_loop -> WHILE np_while_loop_1 ( expression ) np_while_loop_2 block np_while_loop_3 .)
    FOR             reduce using rule 168 (while_loop -> WHILE np_while_loop_1 ( expression ) np_while_loop_2 block np_while_loop_3 .)
    WHILE           reduce using rule 168 (while_loop -> WHILE np_while_loop_1 ( expression ) np_while_loop_2 block np_while_loop_3 .)
    VAR             reduce using rule 168 (while_loop -> WHILE np_while_loop_1 ( expression ) np_while_loop_2 block np_while_loop_3 .)
    VEC             reduce using rule 168 (while_loop -> WHILE np_while_loop_1 ( expression ) np_while_loop_2 block np_while_loop_3 .)
    MAT             reduce using rule 168 (while_loop -> WHILE np_while_loop_1 ( expression ) np_while_loop_2 block np_while_loop_3 .)
    ID              reduce using rule 168 (while_loop -> WHILE np_while_loop_1 ( expression ) np_while_loop_2 block np_while_loop_3 .)
    }               reduce using rule 168 (while_loop -> WHILE np_while_loop_1 ( expression ) np_while_loop_2 block np_while_loop_3 .)


state 398

    (163) for_loop -> FOR ( assignment np_for_loop_1 expression np_for_loop_2 ; ID . = expression np_for_loop_3 ) block np_for_loop_4

    =               shift and go to state 401


state 399

    (154) cond_else -> np_condition_2 ELSE . block
    (141) block -> . { bstmt }

    {               shift and go to state 171

    block                          shift and go to state 402

state 400

    (155) cond_else -> np_condition_2 ELSEIF . cond_body
    (153) cond_body -> . ( expression ) np_condition_1 block cond_else

    (               shift and go to state 286

    cond_body                      shift and go to state 403

state 401

    (163) for_loop -> FOR ( assignment np_for_loop_1 expression np_for_loop_2 ; ID = . expression np_for_loop_3 ) block np_for_loop_4
    (184) expression -> . rel_expression np_expression_1 expression_op
    (191) rel_expression -> . rel_expression_1 np_rel_expression_1 rel_exp_op
    (197) rel_expression_1 -> . exp np_rel_expression_1_1 rel_exp_1_op
    (205) exp -> . term np_exp_1 exp_op
    (211) term -> . factor np_term_1 term_op
    (233) factor -> . fact_neg fact_body np_factor_7
    (234) fact_neg -> . - np_factor_2
    (235) fact_neg -> . ~ np_factor_3
    (236) fact_neg -> . empty
    (251) empty -> .

    -               shift and go to state 130
    ~               shift and go to state 123
    (               reduce using rule 251 (empty -> .)
    CONST_I         reduce using rule 251 (empty -> .)
    CONST_F         reduce using rule 251 (empty -> .)
    CONST_CHAR      reduce using rule 251 (empty -> .)
    CONST_STRING    reduce using rule 251 (empty -> .)
    CONST_BOOL      reduce using rule 251 (empty -> .)
    THIS            reduce using rule 251 (empty -> .)
    ID              reduce using rule 251 (empty -> .)

    expression                     shift and go to state 404
    empty                          shift and go to state 125
    term                           shift and go to state 127
    fact_neg                       shift and go to state 129
    exp                            shift and go to state 132
    factor                         shift and go to state 134
    rel_expression                 shift and go to state 131
    rel_expression_1               shift and go to state 128

state 402

    (154) cond_else -> np_condition_2 ELSE block .

    IF              reduce using rule 154 (cond_else -> np_condition_2 ELSE block .)
    PRINT           reduce using rule 154 (cond_else -> np_condition_2 ELSE block .)
    SCAN            reduce using rule 154 (cond_else -> np_condition_2 ELSE block .)
    RETURN          reduce using rule 154 (cond_else -> np_condition_2 ELSE block .)
    THIS            reduce using rule 154 (cond_else -> np_condition_2 ELSE block .)
    FOR             reduce using rule 154 (cond_else -> np_condition_2 ELSE block .)
    WHILE           reduce using rule 154 (cond_else -> np_condition_2 ELSE block .)
    VAR             reduce using rule 154 (cond_else -> np_condition_2 ELSE block .)
    VEC             reduce using rule 154 (cond_else -> np_condition_2 ELSE block .)
    MAT             reduce using rule 154 (cond_else -> np_condition_2 ELSE block .)
    ID              reduce using rule 154 (cond_else -> np_condition_2 ELSE block .)
    }               reduce using rule 154 (cond_else -> np_condition_2 ELSE block .)


state 403

    (155) cond_else -> np_condition_2 ELSEIF cond_body .

    IF              reduce using rule 155 (cond_else -> np_condition_2 ELSEIF cond_body .)
    PRINT           reduce using rule 155 (cond_else -> np_condition_2 ELSEIF cond_body .)
    SCAN            reduce using rule 155 (cond_else -> np_condition_2 ELSEIF cond_body .)
    RETURN          reduce using rule 155 (cond_else -> np_condition_2 ELSEIF cond_body .)
    THIS            reduce using rule 155 (cond_else -> np_condition_2 ELSEIF cond_body .)
    FOR             reduce using rule 155 (cond_else -> np_condition_2 ELSEIF cond_body .)
    WHILE           reduce using rule 155 (cond_else -> np_condition_2 ELSEIF cond_body .)
    VAR             reduce using rule 155 (cond_else -> np_condition_2 ELSEIF cond_body .)
    VEC             reduce using rule 155 (cond_else -> np_condition_2 ELSEIF cond_body .)
    MAT             reduce using rule 155 (cond_else -> np_condition_2 ELSEIF cond_body .)
    ID              reduce using rule 155 (cond_else -> np_condition_2 ELSEIF cond_body .)
    }               reduce using rule 155 (cond_else -> np_condition_2 ELSEIF cond_body .)


state 404

    (163) for_loop -> FOR ( assignment np_for_loop_1 expression np_for_loop_2 ; ID = expression . np_for_loop_3 ) block np_for_loop_4
    (166) np_for_loop_3 -> .

    )               reduce using rule 166 (np_for_loop_3 -> .)

    np_for_loop_3                  shift and go to state 405

state 405

    (163) for_loop -> FOR ( assignment np_for_loop_1 expression np_for_loop_2 ; ID = expression np_for_loop_3 . ) block np_for_loop_4

    )               shift and go to state 406


state 406

    (163) for_loop -> FOR ( assignment np_for_loop_1 expression np_for_loop_2 ; ID = expression np_for_loop_3 ) . block np_for_loop_4
    (141) block -> . { bstmt }

    {               shift and go to state 171

    block                          shift and go to state 407

state 407

    (163) for_loop -> FOR ( assignment np_for_loop_1 expression np_for_loop_2 ; ID = expression np_for_loop_3 ) block . np_for_loop_4
    (167) np_for_loop_4 -> .

    IF              reduce using rule 167 (np_for_loop_4 -> .)
    PRINT           reduce using rule 167 (np_for_loop_4 -> .)
    SCAN            reduce using rule 167 (np_for_loop_4 -> .)
    RETURN          reduce using rule 167 (np_for_loop_4 -> .)
    THIS            reduce using rule 167 (np_for_loop_4 -> .)
    FOR             reduce using rule 167 (np_for_loop_4 -> .)
    WHILE           reduce using rule 167 (np_for_loop_4 -> .)
    VAR             reduce using rule 167 (np_for_loop_4 -> .)
    VEC             reduce using rule 167 (np_for_loop_4 -> .)
    MAT             reduce using rule 167 (np_for_loop_4 -> .)
    ID              reduce using rule 167 (np_for_loop_4 -> .)
    }               reduce using rule 167 (np_for_loop_4 -> .)

    np_for_loop_4                  shift and go to state 408

state 408

    (163) for_loop -> FOR ( assignment np_for_loop_1 expression np_for_loop_2 ; ID = expression np_for_loop_3 ) block np_for_loop_4 .

    IF              reduce using rule 163 (for_loop -> FOR ( assignment np_for_loop_1 expression np_for_loop_2 ; ID = expression np_for_loop_3 ) block np_for_loop_4 .)
    PRINT           reduce using rule 163 (for_loop -> FOR ( assignment np_for_loop_1 expression np_for_loop_2 ; ID = expression np_for_loop_3 ) block np_for_loop_4 .)
    SCAN            reduce using rule 163 (for_loop -> FOR ( assignment np_for_loop_1 expression np_for_loop_2 ; ID = expression np_for_loop_3 ) block np_for_loop_4 .)
    RETURN          reduce using rule 163 (for_loop -> FOR ( assignment np_for_loop_1 expression np_for_loop_2 ; ID = expression np_for_loop_3 ) block np_for_loop_4 .)
    THIS            reduce using rule 163 (for_loop -> FOR ( assignment np_for_loop_1 expression np_for_loop_2 ; ID = expression np_for_loop_3 ) block np_for_loop_4 .)
    FOR             reduce using rule 163 (for_loop -> FOR ( assignment np_for_loop_1 expression np_for_loop_2 ; ID = expression np_for_loop_3 ) block np_for_loop_4 .)
    WHILE           reduce using rule 163 (for_loop -> FOR ( assignment np_for_loop_1 expression np_for_loop_2 ; ID = expression np_for_loop_3 ) block np_for_loop_4 .)
    VAR             reduce using rule 163 (for_loop -> FOR ( assignment np_for_loop_1 expression np_for_loop_2 ; ID = expression np_for_loop_3 ) block np_for_loop_4 .)
    VEC             reduce using rule 163 (for_loop -> FOR ( assignment np_for_loop_1 expression np_for_loop_2 ; ID = expression np_for_loop_3 ) block np_for_loop_4 .)
    MAT             reduce using rule 163 (for_loop -> FOR ( assignment np_for_loop_1 expression np_for_loop_2 ; ID = expression np_for_loop_3 ) block np_for_loop_4 .)
    ID              reduce using rule 163 (for_loop -> FOR ( assignment np_for_loop_1 expression np_for_loop_2 ; ID = expression np_for_loop_3 ) block np_for_loop_4 .)
    }               reduce using rule 163 (for_loop -> FOR ( assignment np_for_loop_1 expression np_for_loop_2 ; ID = expression np_for_loop_3 ) block np_for_loop_4 .)

