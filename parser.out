Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> imports CLASS ID prog_inh class_block
Rule 2     prog_inh -> INHERITS ID
Rule 3     prog_inh -> empty
Rule 4     imports -> IMPORT CONST_STRING ; more_imports
Rule 5     more_imports -> imports
Rule 6     more_imports -> empty
Rule 7     var_decl -> vars
Rule 8     var_decl -> vector
Rule 9     var_decl -> matrix
Rule 10    class_block -> { class_blck_body }
Rule 11    class_blck_body -> class_vars class_asgs class_func
Rule 12    class_blck_body -> class_func
Rule 13    class_vars -> access var_decl more_class_vars
Rule 14    more_class_vars -> class_vars
Rule 15    more_class_vars -> empty
Rule 16    class_asgs -> assignment class_asgs
Rule 17    class_asgs -> empty
Rule 18    class_func -> method class_func
Rule 19    class_func -> empty
Rule 20    access -> acc_scope dependent
Rule 21    acc_scope -> PUBLIC
Rule 22    acc_scope -> PRIVATE
Rule 23    dependent -> INDEPENDENT
Rule 24    dependent -> empty
Rule 25    ids -> ID m_ids
Rule 26    m_ids -> , ids
Rule 27    m_ids -> empty
Rule 28    vars -> VAR ids : vars_type ;
Rule 29    vars_type -> type vars_tp_a
Rule 30    vars_type -> ID vars_tp_b
Rule 31    vars_tp_a -> = expression
Rule 32    vars_tp_a -> empty
Rule 33    vars_tp_b -> = vars_assgn
Rule 34    vars_tp_b -> empty
Rule 35    vars_assgn -> create_obj
Rule 36    vars_assgn -> expression
Rule 37    vec_mat_type -> type
Rule 38    vec_mat_type -> ID
Rule 39    vector -> VEC ids : vec_mat_type [ CONST_I ] vec_assgn ;
Rule 40    vec_assgn -> = vector_exp
Rule 41    vec_assgn -> empty
Rule 42    matrix -> MAT ids : vec_mat_type [ CONST_I , CONST_I ] mat_assgn ;
Rule 43    mat_assgn -> = matrix_exp
Rule 44    mat_assgn -> empty
Rule 45    id_access -> id_mat_acc id_var_acc
Rule 46    id_mat_acc -> mat_vec_access
Rule 47    id_mat_acc -> empty
Rule 48    id_var_acc -> . ID id_mat_acc
Rule 49    id_var_acc -> empty
Rule 50    assignment -> ID id_access = ass_value ;
Rule 51    ass_value -> create_obj
Rule 52    ass_value -> expression
Rule 53    ass_value -> matrix_exp
Rule 54    ass_value -> vector_exp
Rule 55    vector_exp -> [ vec_elem ]
Rule 56    vec_elem -> vec_object vec_more
Rule 57    vec_object -> create_obj
Rule 58    vec_object -> expression
Rule 59    vec_more -> , vec_elem
Rule 60    vec_more -> empty
Rule 61    matrix_exp -> { mat_elem }
Rule 62    mat_elem -> vector_exp mat_more
Rule 63    mat_more -> , mat_elem
Rule 64    mat_more -> empty
Rule 65    mat_vec_access -> [ mat_vec_index mat_access ]
Rule 66    mat_vec_index -> _
Rule 67    mat_vec_index -> expression
Rule 68    mat_access -> , mat_vec_index
Rule 69    mat_access -> empty
Rule 70    method -> func_spec ( method_param ) block
Rule 71    func_spec -> access func_type kw_func ID
Rule 72    func_spec -> CONSTRUCTOR
Rule 73    func_type -> VOID
Rule 74    func_type -> type
Rule 75    func_type -> ID
Rule 76    kw_func -> FUNC
Rule 77    kw_func -> empty
Rule 78    method_param -> ID : param_type param_mat_vec more_params
Rule 79    more_params -> , method_param
Rule 80    more_params -> empty
Rule 81    param_type -> type
Rule 82    param_type -> ID
Rule 83    param_mat_vec -> [ param_mat ]
Rule 84    param_mat_vec -> empty
Rule 85    param_mat -> ,
Rule 86    param_mat -> empty
Rule 87    create_obj -> NEW func_call
Rule 88    func_call -> ( func_param )
Rule 89    func_param -> expression more_fpar
Rule 90    more_fpar -> , func_param
Rule 91    more_fpar -> empty
Rule 92    block -> { bstmt }
Rule 93    bstmt -> statement bstmt
Rule 94    bstmt -> empty
Rule 95    statement -> assignment
Rule 96    statement -> condition
Rule 97    statement -> loop
Rule 98    statement -> in_out
Rule 99    statement -> return
Rule 100   statement -> var_decl
Rule 101   statement -> CONSTANT var_decl
Rule 102   condition -> IF cond_body
Rule 103   cond_body -> ( expression ) block cond_else
Rule 104   cond_else -> ELSE block
Rule 105   cond_else -> ELSEIF cond_body
Rule 106   cond_else -> empty
Rule 107   loop -> for_loop
Rule 108   loop -> while_loop
Rule 109   for_loop -> FOR ( assignment expression ; ID = expression ) block
Rule 110   while_loop -> WHILE ( expression ) block
Rule 111   in_out -> PRINT ( print_exp ) ;
Rule 112   in_out -> SCAN ( ID id_access ) ;
Rule 113   print_exp -> print_val print_more
Rule 114   print_val -> expression
Rule 115   print_more -> , print_exp
Rule 116   print_more -> empty
Rule 117   return -> RETURN ret_val ;
Rule 118   ret_val -> expression
Rule 119   ret_val -> empty
Rule 120   expression -> rel_expression expression_op
Rule 121   expression_op -> AND expression
Rule 122   expression_op -> OR expression
Rule 123   expression_op -> XOR expression
Rule 124   expression_op -> empty
Rule 125   rel_expression -> rel_expression_1 rel_exp_op
Rule 126   rel_exp_op -> EQUAL rel_expression
Rule 127   rel_exp_op -> NOT_EQUAL rel_expression
Rule 128   rel_exp_op -> empty
Rule 129   rel_expression_1 -> exp rel_exp_1_op
Rule 130   rel_exp_1_op -> < rel_expression_1
Rule 131   rel_exp_1_op -> LESS_EQUAL_THAN rel_expression_1
Rule 132   rel_exp_1_op -> > rel_expression_1
Rule 133   rel_exp_1_op -> GREATER_EQUAL_THAN rel_expression_1
Rule 134   rel_exp_1_op -> empty
Rule 135   exp -> term exp_op
Rule 136   exp_op -> + exp
Rule 137   exp_op -> - exp
Rule 138   exp_op -> empty
Rule 139   term -> factor term_op
Rule 140   term_op -> * term
Rule 141   term_op -> / term
Rule 142   term_op -> % term
Rule 143   term_op -> empty
Rule 144   type -> INT
Rule 145   type -> DOUBLE
Rule 146   type -> CHAR
Rule 147   type -> BOOL
Rule 148   var_cte -> CONST_I
Rule 149   var_cte -> CONST_F
Rule 150   var_cte -> CONST_CHAR
Rule 151   var_cte -> CONST_STRING
Rule 152   var_cte -> CONST_BOOL
Rule 153   factor -> fact_neg fact_body
Rule 154   fact_neg -> -
Rule 155   fact_neg -> ~
Rule 156   fact_neg -> empty
Rule 157   fact_body -> ( expression )
Rule 158   fact_body -> var_cte
Rule 159   fact_body -> ID fact_id
Rule 160   fact_id -> func_call
Rule 161   fact_id -> id_access
Rule 162   empty -> <empty>

Terminals, with rules where they appear

%                    : 142
(                    : 70 88 103 109 110 111 112 157
)                    : 70 88 103 109 110 111 112 157
*                    : 140
+                    : 136
,                    : 26 42 59 63 68 79 85 90 115
-                    : 137 154
.                    : 48
/                    : 141
:                    : 28 39 42 78
;                    : 4 28 39 42 50 109 111 112 117
<                    : 130
=                    : 31 33 40 43 50 109
>                    : 132
AND                  : 121
BOOL                 : 147
CHAR                 : 146
CLASS                : 1
CONSTANT             : 101
CONSTRUCTOR          : 72
CONST_BOOL           : 152
CONST_CHAR           : 150
CONST_F              : 149
CONST_I              : 39 42 42 148
CONST_STRING         : 4 151
DOUBLE               : 145
ELSE                 : 104
ELSEIF               : 105
EQUAL                : 126
FOR                  : 109
FUNC                 : 76
GREATER_EQUAL_THAN   : 133
ID                   : 1 2 25 30 38 48 50 71 75 78 82 109 112 159
IF                   : 102
IMPORT               : 4
INDEPENDENT          : 23
INHERITS             : 2
INT                  : 144
LESS_EQUAL_THAN      : 131
MAT                  : 42
NEW                  : 87
NOT_EQUAL            : 127
OR                   : 122
PRINT                : 111
PRIVATE              : 22
PUBLIC               : 21
RETURN               : 117
SCAN                 : 112
VAR                  : 28
VEC                  : 39
VOID                 : 73
WHILE                : 110
XOR                  : 123
[                    : 39 42 55 65 83
]                    : 39 42 55 65 83
_                    : 66
error                : 
{                    : 10 61 92
}                    : 10 61 92
~                    : 155

Nonterminals, with rules where they appear

acc_scope            : 20
access               : 13 71
ass_value            : 50
assignment           : 16 95 109
block                : 70 103 104 109 110
bstmt                : 92 93
class_asgs           : 11 16
class_blck_body      : 10
class_block          : 1
class_func           : 11 12 18
class_vars           : 11 14
cond_body            : 102 105
cond_else            : 103
condition            : 96
create_obj           : 35 51 57
dependent            : 20
empty                : 3 6 15 17 19 24 27 32 34 41 44 47 49 60 64 69 77 80 84 86 91 94 106 116 119 124 128 134 138 143 156
exp                  : 129 136 137
exp_op               : 135
expression           : 31 36 52 58 67 89 103 109 109 110 114 118 121 122 123 157
expression_op        : 120
fact_body            : 153
fact_id              : 159
fact_neg             : 153
factor               : 139
for_loop             : 107
func_call            : 87 160
func_param           : 88 90
func_spec            : 70
func_type            : 71
id_access            : 50 112 161
id_mat_acc           : 45 48
id_var_acc           : 45
ids                  : 26 28 39 42
imports              : 1 5
in_out               : 98
kw_func              : 71
loop                 : 97
m_ids                : 25
mat_access           : 65
mat_assgn            : 42
mat_elem             : 61 63
mat_more             : 62
mat_vec_access       : 46
mat_vec_index        : 65 68
matrix               : 9
matrix_exp           : 43 53
method               : 18
method_param         : 70 79
more_class_vars      : 13
more_fpar            : 89
more_imports         : 4
more_params          : 78
param_mat            : 83
param_mat_vec        : 78
param_type           : 78
print_exp            : 111 115
print_more           : 113
print_val            : 113
prog_inh             : 1
program              : 0
rel_exp_1_op         : 129
rel_exp_op           : 125
rel_expression       : 120 126 127
rel_expression_1     : 125 130 131 132 133
ret_val              : 117
return               : 99
statement            : 93
term                 : 135 140 141 142
term_op              : 139
type                 : 29 37 74 81
var_cte              : 158
var_decl             : 13 100 101
vars                 : 7
vars_assgn           : 33
vars_tp_a            : 29
vars_tp_b            : 30
vars_type            : 28
vec_assgn            : 39
vec_elem             : 55 59
vec_mat_type         : 39 42
vec_more             : 56
vec_object           : 56
vector               : 8
vector_exp           : 40 54 62
while_loop           : 108

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . imports CLASS ID prog_inh class_block
    (4) imports -> . IMPORT CONST_STRING ; more_imports

    IMPORT          shift and go to state 1

    program                        shift and go to state 2
    imports                        shift and go to state 3

state 1

    (4) imports -> IMPORT . CONST_STRING ; more_imports

    CONST_STRING    shift and go to state 4


state 2

    (0) S' -> program .



state 3

    (1) program -> imports . CLASS ID prog_inh class_block

    CLASS           shift and go to state 5


state 4

    (4) imports -> IMPORT CONST_STRING . ; more_imports

    ;               shift and go to state 6


state 5

    (1) program -> imports CLASS . ID prog_inh class_block

    ID              shift and go to state 7


state 6

    (4) imports -> IMPORT CONST_STRING ; . more_imports
    (5) more_imports -> . imports
    (6) more_imports -> . empty
    (4) imports -> . IMPORT CONST_STRING ; more_imports
    (162) empty -> .

    IMPORT          shift and go to state 1
    CLASS           reduce using rule 162 (empty -> .)

    empty                          shift and go to state 8
    more_imports                   shift and go to state 9
    imports                        shift and go to state 10

state 7

    (1) program -> imports CLASS ID . prog_inh class_block
    (2) prog_inh -> . INHERITS ID
    (3) prog_inh -> . empty
    (162) empty -> .

    INHERITS        shift and go to state 11
    {               reduce using rule 162 (empty -> .)

    empty                          shift and go to state 12
    prog_inh                       shift and go to state 13

state 8

    (6) more_imports -> empty .

    CLASS           reduce using rule 6 (more_imports -> empty .)


state 9

    (4) imports -> IMPORT CONST_STRING ; more_imports .

    CLASS           reduce using rule 4 (imports -> IMPORT CONST_STRING ; more_imports .)


state 10

    (5) more_imports -> imports .

    CLASS           reduce using rule 5 (more_imports -> imports .)


state 11

    (2) prog_inh -> INHERITS . ID

    ID              shift and go to state 14


state 12

    (3) prog_inh -> empty .

    {               reduce using rule 3 (prog_inh -> empty .)


state 13

    (1) program -> imports CLASS ID prog_inh . class_block
    (10) class_block -> . { class_blck_body }

    {               shift and go to state 15

    class_block                    shift and go to state 16

state 14

    (2) prog_inh -> INHERITS ID .

    {               reduce using rule 2 (prog_inh -> INHERITS ID .)


state 15

    (10) class_block -> { . class_blck_body }
    (11) class_blck_body -> . class_vars class_asgs class_func
    (12) class_blck_body -> . class_func
    (13) class_vars -> . access var_decl more_class_vars
    (18) class_func -> . method class_func
    (19) class_func -> . empty
    (20) access -> . acc_scope dependent
    (70) method -> . func_spec ( method_param ) block
    (162) empty -> .
    (21) acc_scope -> . PUBLIC
    (22) acc_scope -> . PRIVATE
    (71) func_spec -> . access func_type kw_func ID
    (72) func_spec -> . CONSTRUCTOR

    }               reduce using rule 162 (empty -> .)
    PUBLIC          shift and go to state 23
    PRIVATE         shift and go to state 17
    CONSTRUCTOR     shift and go to state 19

    method                         shift and go to state 18
    acc_scope                      shift and go to state 24
    class_func                     shift and go to state 25
    class_blck_body                shift and go to state 20
    func_spec                      shift and go to state 27
    empty                          shift and go to state 21
    access                         shift and go to state 26
    class_vars                     shift and go to state 22

state 16

    (1) program -> imports CLASS ID prog_inh class_block .

    $end            reduce using rule 1 (program -> imports CLASS ID prog_inh class_block .)


state 17

    (22) acc_scope -> PRIVATE .

    INDEPENDENT     reduce using rule 22 (acc_scope -> PRIVATE .)
    VOID            reduce using rule 22 (acc_scope -> PRIVATE .)
    ID              reduce using rule 22 (acc_scope -> PRIVATE .)
    INT             reduce using rule 22 (acc_scope -> PRIVATE .)
    DOUBLE          reduce using rule 22 (acc_scope -> PRIVATE .)
    CHAR            reduce using rule 22 (acc_scope -> PRIVATE .)
    BOOL            reduce using rule 22 (acc_scope -> PRIVATE .)
    VAR             reduce using rule 22 (acc_scope -> PRIVATE .)
    VEC             reduce using rule 22 (acc_scope -> PRIVATE .)
    MAT             reduce using rule 22 (acc_scope -> PRIVATE .)


state 18

    (18) class_func -> method . class_func
    (18) class_func -> . method class_func
    (19) class_func -> . empty
    (70) method -> . func_spec ( method_param ) block
    (162) empty -> .
    (71) func_spec -> . access func_type kw_func ID
    (72) func_spec -> . CONSTRUCTOR
    (20) access -> . acc_scope dependent
    (21) acc_scope -> . PUBLIC
    (22) acc_scope -> . PRIVATE

    }               reduce using rule 162 (empty -> .)
    CONSTRUCTOR     shift and go to state 19
    PUBLIC          shift and go to state 23
    PRIVATE         shift and go to state 17

    class_func                     shift and go to state 28
    method                         shift and go to state 18
    empty                          shift and go to state 21
    access                         shift and go to state 29
    func_spec                      shift and go to state 27
    acc_scope                      shift and go to state 24

state 19

    (72) func_spec -> CONSTRUCTOR .

    (               reduce using rule 72 (func_spec -> CONSTRUCTOR .)


state 20

    (10) class_block -> { class_blck_body . }

    }               shift and go to state 30


state 21

    (19) class_func -> empty .

    }               reduce using rule 19 (class_func -> empty .)


state 22

    (11) class_blck_body -> class_vars . class_asgs class_func
    (16) class_asgs -> . assignment class_asgs
    (17) class_asgs -> . empty
    (50) assignment -> . ID id_access = ass_value ;
    (162) empty -> .

    ID              shift and go to state 33
    CONSTRUCTOR     reduce using rule 162 (empty -> .)
    PUBLIC          reduce using rule 162 (empty -> .)
    PRIVATE         reduce using rule 162 (empty -> .)
    }               reduce using rule 162 (empty -> .)

    assignment                     shift and go to state 31
    class_asgs                     shift and go to state 32
    empty                          shift and go to state 34

state 23

    (21) acc_scope -> PUBLIC .

    INDEPENDENT     reduce using rule 21 (acc_scope -> PUBLIC .)
    VOID            reduce using rule 21 (acc_scope -> PUBLIC .)
    ID              reduce using rule 21 (acc_scope -> PUBLIC .)
    INT             reduce using rule 21 (acc_scope -> PUBLIC .)
    DOUBLE          reduce using rule 21 (acc_scope -> PUBLIC .)
    CHAR            reduce using rule 21 (acc_scope -> PUBLIC .)
    BOOL            reduce using rule 21 (acc_scope -> PUBLIC .)
    VAR             reduce using rule 21 (acc_scope -> PUBLIC .)
    VEC             reduce using rule 21 (acc_scope -> PUBLIC .)
    MAT             reduce using rule 21 (acc_scope -> PUBLIC .)


state 24

    (20) access -> acc_scope . dependent
    (23) dependent -> . INDEPENDENT
    (24) dependent -> . empty
    (162) empty -> .

    INDEPENDENT     shift and go to state 35
    VOID            reduce using rule 162 (empty -> .)
    ID              reduce using rule 162 (empty -> .)
    VAR             reduce using rule 162 (empty -> .)
    VEC             reduce using rule 162 (empty -> .)
    MAT             reduce using rule 162 (empty -> .)
    INT             reduce using rule 162 (empty -> .)
    DOUBLE          reduce using rule 162 (empty -> .)
    CHAR            reduce using rule 162 (empty -> .)
    BOOL            reduce using rule 162 (empty -> .)

    empty                          shift and go to state 37
    dependent                      shift and go to state 36

state 25

    (12) class_blck_body -> class_func .

    }               reduce using rule 12 (class_blck_body -> class_func .)


state 26

    (13) class_vars -> access . var_decl more_class_vars
    (71) func_spec -> access . func_type kw_func ID
    (7) var_decl -> . vars
    (8) var_decl -> . vector
    (9) var_decl -> . matrix
    (73) func_type -> . VOID
    (74) func_type -> . type
    (75) func_type -> . ID
    (28) vars -> . VAR ids : vars_type ;
    (39) vector -> . VEC ids : vec_mat_type [ CONST_I ] vec_assgn ;
    (42) matrix -> . MAT ids : vec_mat_type [ CONST_I , CONST_I ] mat_assgn ;
    (144) type -> . INT
    (145) type -> . DOUBLE
    (146) type -> . CHAR
    (147) type -> . BOOL

    VOID            shift and go to state 46
    ID              shift and go to state 43
    VAR             shift and go to state 44
    VEC             shift and go to state 48
    MAT             shift and go to state 45
    INT             shift and go to state 41
    DOUBLE          shift and go to state 42
    CHAR            shift and go to state 52
    BOOL            shift and go to state 51

    vector                         shift and go to state 38
    var_decl                       shift and go to state 39
    matrix                         shift and go to state 40
    func_type                      shift and go to state 50
    type                           shift and go to state 49
    vars                           shift and go to state 47

state 27

    (70) method -> func_spec . ( method_param ) block

    (               shift and go to state 53


state 28

    (18) class_func -> method class_func .

    }               reduce using rule 18 (class_func -> method class_func .)


state 29

    (71) func_spec -> access . func_type kw_func ID
    (73) func_type -> . VOID
    (74) func_type -> . type
    (75) func_type -> . ID
    (144) type -> . INT
    (145) type -> . DOUBLE
    (146) type -> . CHAR
    (147) type -> . BOOL

    VOID            shift and go to state 46
    ID              shift and go to state 43
    INT             shift and go to state 41
    DOUBLE          shift and go to state 42
    CHAR            shift and go to state 52
    BOOL            shift and go to state 51

    func_type                      shift and go to state 50
    type                           shift and go to state 49

state 30

    (10) class_block -> { class_blck_body } .

    $end            reduce using rule 10 (class_block -> { class_blck_body } .)


state 31

    (16) class_asgs -> assignment . class_asgs
    (16) class_asgs -> . assignment class_asgs
    (17) class_asgs -> . empty
    (50) assignment -> . ID id_access = ass_value ;
    (162) empty -> .

    ID              shift and go to state 33
    CONSTRUCTOR     reduce using rule 162 (empty -> .)
    PUBLIC          reduce using rule 162 (empty -> .)
    PRIVATE         reduce using rule 162 (empty -> .)
    }               reduce using rule 162 (empty -> .)

    assignment                     shift and go to state 31
    class_asgs                     shift and go to state 54
    empty                          shift and go to state 34

state 32

    (11) class_blck_body -> class_vars class_asgs . class_func
    (18) class_func -> . method class_func
    (19) class_func -> . empty
    (70) method -> . func_spec ( method_param ) block
    (162) empty -> .
    (71) func_spec -> . access func_type kw_func ID
    (72) func_spec -> . CONSTRUCTOR
    (20) access -> . acc_scope dependent
    (21) acc_scope -> . PUBLIC
    (22) acc_scope -> . PRIVATE

    }               reduce using rule 162 (empty -> .)
    CONSTRUCTOR     shift and go to state 19
    PUBLIC          shift and go to state 23
    PRIVATE         shift and go to state 17

    method                         shift and go to state 18
    class_func                     shift and go to state 55
    empty                          shift and go to state 21
    access                         shift and go to state 29
    func_spec                      shift and go to state 27
    acc_scope                      shift and go to state 24

state 33

    (50) assignment -> ID . id_access = ass_value ;
    (45) id_access -> . id_mat_acc id_var_acc
    (46) id_mat_acc -> . mat_vec_access
    (47) id_mat_acc -> . empty
    (65) mat_vec_access -> . [ mat_vec_index mat_access ]
    (162) empty -> .

    [               shift and go to state 58
    .               reduce using rule 162 (empty -> .)
    =               reduce using rule 162 (empty -> .)

    empty                          shift and go to state 60
    mat_vec_access                 shift and go to state 56
    id_mat_acc                     shift and go to state 59
    id_access                      shift and go to state 57

state 34

    (17) class_asgs -> empty .

    CONSTRUCTOR     reduce using rule 17 (class_asgs -> empty .)
    PUBLIC          reduce using rule 17 (class_asgs -> empty .)
    PRIVATE         reduce using rule 17 (class_asgs -> empty .)
    }               reduce using rule 17 (class_asgs -> empty .)


state 35

    (23) dependent -> INDEPENDENT .

    VOID            reduce using rule 23 (dependent -> INDEPENDENT .)
    ID              reduce using rule 23 (dependent -> INDEPENDENT .)
    VAR             reduce using rule 23 (dependent -> INDEPENDENT .)
    VEC             reduce using rule 23 (dependent -> INDEPENDENT .)
    MAT             reduce using rule 23 (dependent -> INDEPENDENT .)
    INT             reduce using rule 23 (dependent -> INDEPENDENT .)
    DOUBLE          reduce using rule 23 (dependent -> INDEPENDENT .)
    CHAR            reduce using rule 23 (dependent -> INDEPENDENT .)
    BOOL            reduce using rule 23 (dependent -> INDEPENDENT .)


state 36

    (20) access -> acc_scope dependent .

    VOID            reduce using rule 20 (access -> acc_scope dependent .)
    ID              reduce using rule 20 (access -> acc_scope dependent .)
    INT             reduce using rule 20 (access -> acc_scope dependent .)
    DOUBLE          reduce using rule 20 (access -> acc_scope dependent .)
    CHAR            reduce using rule 20 (access -> acc_scope dependent .)
    BOOL            reduce using rule 20 (access -> acc_scope dependent .)
    VAR             reduce using rule 20 (access -> acc_scope dependent .)
    VEC             reduce using rule 20 (access -> acc_scope dependent .)
    MAT             reduce using rule 20 (access -> acc_scope dependent .)


state 37

    (24) dependent -> empty .

    VOID            reduce using rule 24 (dependent -> empty .)
    ID              reduce using rule 24 (dependent -> empty .)
    VAR             reduce using rule 24 (dependent -> empty .)
    VEC             reduce using rule 24 (dependent -> empty .)
    MAT             reduce using rule 24 (dependent -> empty .)
    INT             reduce using rule 24 (dependent -> empty .)
    DOUBLE          reduce using rule 24 (dependent -> empty .)
    CHAR            reduce using rule 24 (dependent -> empty .)
    BOOL            reduce using rule 24 (dependent -> empty .)


state 38

    (8) var_decl -> vector .

    PUBLIC          reduce using rule 8 (var_decl -> vector .)
    PRIVATE         reduce using rule 8 (var_decl -> vector .)
    ID              reduce using rule 8 (var_decl -> vector .)
    CONSTRUCTOR     reduce using rule 8 (var_decl -> vector .)
    }               reduce using rule 8 (var_decl -> vector .)
    CONSTANT        reduce using rule 8 (var_decl -> vector .)
    IF              reduce using rule 8 (var_decl -> vector .)
    PRINT           reduce using rule 8 (var_decl -> vector .)
    SCAN            reduce using rule 8 (var_decl -> vector .)
    RETURN          reduce using rule 8 (var_decl -> vector .)
    FOR             reduce using rule 8 (var_decl -> vector .)
    WHILE           reduce using rule 8 (var_decl -> vector .)
    VAR             reduce using rule 8 (var_decl -> vector .)
    VEC             reduce using rule 8 (var_decl -> vector .)
    MAT             reduce using rule 8 (var_decl -> vector .)


state 39

    (13) class_vars -> access var_decl . more_class_vars
    (14) more_class_vars -> . class_vars
    (15) more_class_vars -> . empty
    (13) class_vars -> . access var_decl more_class_vars
    (162) empty -> .
    (20) access -> . acc_scope dependent
    (21) acc_scope -> . PUBLIC
    (22) acc_scope -> . PRIVATE

  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
    ID              reduce using rule 162 (empty -> .)
    CONSTRUCTOR     reduce using rule 162 (empty -> .)
    }               reduce using rule 162 (empty -> .)
    PUBLIC          shift and go to state 23
    PRIVATE         shift and go to state 17

  ! PUBLIC          [ reduce using rule 162 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 162 (empty -> .) ]

    acc_scope                      shift and go to state 24
    more_class_vars                shift and go to state 61
    empty                          shift and go to state 62
    access                         shift and go to state 63
    class_vars                     shift and go to state 64

state 40

    (9) var_decl -> matrix .

    PUBLIC          reduce using rule 9 (var_decl -> matrix .)
    PRIVATE         reduce using rule 9 (var_decl -> matrix .)
    ID              reduce using rule 9 (var_decl -> matrix .)
    CONSTRUCTOR     reduce using rule 9 (var_decl -> matrix .)
    }               reduce using rule 9 (var_decl -> matrix .)
    CONSTANT        reduce using rule 9 (var_decl -> matrix .)
    IF              reduce using rule 9 (var_decl -> matrix .)
    PRINT           reduce using rule 9 (var_decl -> matrix .)
    SCAN            reduce using rule 9 (var_decl -> matrix .)
    RETURN          reduce using rule 9 (var_decl -> matrix .)
    FOR             reduce using rule 9 (var_decl -> matrix .)
    WHILE           reduce using rule 9 (var_decl -> matrix .)
    VAR             reduce using rule 9 (var_decl -> matrix .)
    VEC             reduce using rule 9 (var_decl -> matrix .)
    MAT             reduce using rule 9 (var_decl -> matrix .)


state 41

    (144) type -> INT .

    [               reduce using rule 144 (type -> INT .)
    ,               reduce using rule 144 (type -> INT .)
    )               reduce using rule 144 (type -> INT .)
    FUNC            reduce using rule 144 (type -> INT .)
    ID              reduce using rule 144 (type -> INT .)
    =               reduce using rule 144 (type -> INT .)
    ;               reduce using rule 144 (type -> INT .)


state 42

    (145) type -> DOUBLE .

    [               reduce using rule 145 (type -> DOUBLE .)
    ,               reduce using rule 145 (type -> DOUBLE .)
    )               reduce using rule 145 (type -> DOUBLE .)
    FUNC            reduce using rule 145 (type -> DOUBLE .)
    ID              reduce using rule 145 (type -> DOUBLE .)
    =               reduce using rule 145 (type -> DOUBLE .)
    ;               reduce using rule 145 (type -> DOUBLE .)


state 43

    (75) func_type -> ID .

    FUNC            reduce using rule 75 (func_type -> ID .)
    ID              reduce using rule 75 (func_type -> ID .)


state 44

    (28) vars -> VAR . ids : vars_type ;
    (25) ids -> . ID m_ids

    ID              shift and go to state 66

    ids                            shift and go to state 65

state 45

    (42) matrix -> MAT . ids : vec_mat_type [ CONST_I , CONST_I ] mat_assgn ;
    (25) ids -> . ID m_ids

    ID              shift and go to state 66

    ids                            shift and go to state 67

state 46

    (73) func_type -> VOID .

    FUNC            reduce using rule 73 (func_type -> VOID .)
    ID              reduce using rule 73 (func_type -> VOID .)


state 47

    (7) var_decl -> vars .

    PUBLIC          reduce using rule 7 (var_decl -> vars .)
    PRIVATE         reduce using rule 7 (var_decl -> vars .)
    ID              reduce using rule 7 (var_decl -> vars .)
    CONSTRUCTOR     reduce using rule 7 (var_decl -> vars .)
    }               reduce using rule 7 (var_decl -> vars .)
    CONSTANT        reduce using rule 7 (var_decl -> vars .)
    IF              reduce using rule 7 (var_decl -> vars .)
    PRINT           reduce using rule 7 (var_decl -> vars .)
    SCAN            reduce using rule 7 (var_decl -> vars .)
    RETURN          reduce using rule 7 (var_decl -> vars .)
    FOR             reduce using rule 7 (var_decl -> vars .)
    WHILE           reduce using rule 7 (var_decl -> vars .)
    VAR             reduce using rule 7 (var_decl -> vars .)
    VEC             reduce using rule 7 (var_decl -> vars .)
    MAT             reduce using rule 7 (var_decl -> vars .)


state 48

    (39) vector -> VEC . ids : vec_mat_type [ CONST_I ] vec_assgn ;
    (25) ids -> . ID m_ids

    ID              shift and go to state 66

    ids                            shift and go to state 68

state 49

    (74) func_type -> type .

    FUNC            reduce using rule 74 (func_type -> type .)
    ID              reduce using rule 74 (func_type -> type .)


state 50

    (71) func_spec -> access func_type . kw_func ID
    (76) kw_func -> . FUNC
    (77) kw_func -> . empty
    (162) empty -> .

    FUNC            shift and go to state 69
    ID              reduce using rule 162 (empty -> .)

    kw_func                        shift and go to state 71
    empty                          shift and go to state 70

state 51

    (147) type -> BOOL .

    [               reduce using rule 147 (type -> BOOL .)
    ,               reduce using rule 147 (type -> BOOL .)
    )               reduce using rule 147 (type -> BOOL .)
    FUNC            reduce using rule 147 (type -> BOOL .)
    ID              reduce using rule 147 (type -> BOOL .)
    =               reduce using rule 147 (type -> BOOL .)
    ;               reduce using rule 147 (type -> BOOL .)


state 52

    (146) type -> CHAR .

    [               reduce using rule 146 (type -> CHAR .)
    ,               reduce using rule 146 (type -> CHAR .)
    )               reduce using rule 146 (type -> CHAR .)
    FUNC            reduce using rule 146 (type -> CHAR .)
    ID              reduce using rule 146 (type -> CHAR .)
    =               reduce using rule 146 (type -> CHAR .)
    ;               reduce using rule 146 (type -> CHAR .)


state 53

    (70) method -> func_spec ( . method_param ) block
    (78) method_param -> . ID : param_type param_mat_vec more_params

    ID              shift and go to state 72

    method_param                   shift and go to state 73

state 54

    (16) class_asgs -> assignment class_asgs .

    CONSTRUCTOR     reduce using rule 16 (class_asgs -> assignment class_asgs .)
    PUBLIC          reduce using rule 16 (class_asgs -> assignment class_asgs .)
    PRIVATE         reduce using rule 16 (class_asgs -> assignment class_asgs .)
    }               reduce using rule 16 (class_asgs -> assignment class_asgs .)


state 55

    (11) class_blck_body -> class_vars class_asgs class_func .

    }               reduce using rule 11 (class_blck_body -> class_vars class_asgs class_func .)


state 56

    (46) id_mat_acc -> mat_vec_access .

    .               reduce using rule 46 (id_mat_acc -> mat_vec_access .)
    *               reduce using rule 46 (id_mat_acc -> mat_vec_access .)
    /               reduce using rule 46 (id_mat_acc -> mat_vec_access .)
    %               reduce using rule 46 (id_mat_acc -> mat_vec_access .)
    +               reduce using rule 46 (id_mat_acc -> mat_vec_access .)
    -               reduce using rule 46 (id_mat_acc -> mat_vec_access .)
    <               reduce using rule 46 (id_mat_acc -> mat_vec_access .)
    LESS_EQUAL_THAN reduce using rule 46 (id_mat_acc -> mat_vec_access .)
    >               reduce using rule 46 (id_mat_acc -> mat_vec_access .)
    GREATER_EQUAL_THAN reduce using rule 46 (id_mat_acc -> mat_vec_access .)
    EQUAL           reduce using rule 46 (id_mat_acc -> mat_vec_access .)
    NOT_EQUAL       reduce using rule 46 (id_mat_acc -> mat_vec_access .)
    AND             reduce using rule 46 (id_mat_acc -> mat_vec_access .)
    OR              reduce using rule 46 (id_mat_acc -> mat_vec_access .)
    XOR             reduce using rule 46 (id_mat_acc -> mat_vec_access .)
    ,               reduce using rule 46 (id_mat_acc -> mat_vec_access .)
    ]               reduce using rule 46 (id_mat_acc -> mat_vec_access .)
    ;               reduce using rule 46 (id_mat_acc -> mat_vec_access .)
    )               reduce using rule 46 (id_mat_acc -> mat_vec_access .)
    =               reduce using rule 46 (id_mat_acc -> mat_vec_access .)


state 57

    (50) assignment -> ID id_access . = ass_value ;

    =               shift and go to state 74


state 58

    (65) mat_vec_access -> [ . mat_vec_index mat_access ]
    (66) mat_vec_index -> . _
    (67) mat_vec_index -> . expression
    (120) expression -> . rel_expression expression_op
    (125) rel_expression -> . rel_expression_1 rel_exp_op
    (129) rel_expression_1 -> . exp rel_exp_1_op
    (135) exp -> . term exp_op
    (139) term -> . factor term_op
    (153) factor -> . fact_neg fact_body
    (154) fact_neg -> . -
    (155) fact_neg -> . ~
    (156) fact_neg -> . empty
    (162) empty -> .

    _               shift and go to state 81
    -               shift and go to state 85
    ~               shift and go to state 84
    (               reduce using rule 162 (empty -> .)
    ID              reduce using rule 162 (empty -> .)
    CONST_I         reduce using rule 162 (empty -> .)
    CONST_F         reduce using rule 162 (empty -> .)
    CONST_CHAR      reduce using rule 162 (empty -> .)
    CONST_STRING    reduce using rule 162 (empty -> .)
    CONST_BOOL      reduce using rule 162 (empty -> .)

    rel_expression                 shift and go to state 75
    term                           shift and go to state 76
    factor                         shift and go to state 77
    mat_vec_index                  shift and go to state 78
    rel_expression_1               shift and go to state 79
    fact_neg                       shift and go to state 80
    exp                            shift and go to state 82
    empty                          shift and go to state 83
    expression                     shift and go to state 86

state 59

    (45) id_access -> id_mat_acc . id_var_acc
    (48) id_var_acc -> . . ID id_mat_acc
    (49) id_var_acc -> . empty
    (162) empty -> .

    .               shift and go to state 87
    =               reduce using rule 162 (empty -> .)
    *               reduce using rule 162 (empty -> .)
    /               reduce using rule 162 (empty -> .)
    %               reduce using rule 162 (empty -> .)
    +               reduce using rule 162 (empty -> .)
    -               reduce using rule 162 (empty -> .)
    <               reduce using rule 162 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 162 (empty -> .)
    >               reduce using rule 162 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 162 (empty -> .)
    EQUAL           reduce using rule 162 (empty -> .)
    NOT_EQUAL       reduce using rule 162 (empty -> .)
    AND             reduce using rule 162 (empty -> .)
    OR              reduce using rule 162 (empty -> .)
    XOR             reduce using rule 162 (empty -> .)
    ,               reduce using rule 162 (empty -> .)
    ]               reduce using rule 162 (empty -> .)
    ;               reduce using rule 162 (empty -> .)
    )               reduce using rule 162 (empty -> .)

    empty                          shift and go to state 88
    id_var_acc                     shift and go to state 89

state 60

    (47) id_mat_acc -> empty .

    .               reduce using rule 47 (id_mat_acc -> empty .)
    *               reduce using rule 47 (id_mat_acc -> empty .)
    /               reduce using rule 47 (id_mat_acc -> empty .)
    %               reduce using rule 47 (id_mat_acc -> empty .)
    +               reduce using rule 47 (id_mat_acc -> empty .)
    -               reduce using rule 47 (id_mat_acc -> empty .)
    <               reduce using rule 47 (id_mat_acc -> empty .)
    LESS_EQUAL_THAN reduce using rule 47 (id_mat_acc -> empty .)
    >               reduce using rule 47 (id_mat_acc -> empty .)
    GREATER_EQUAL_THAN reduce using rule 47 (id_mat_acc -> empty .)
    EQUAL           reduce using rule 47 (id_mat_acc -> empty .)
    NOT_EQUAL       reduce using rule 47 (id_mat_acc -> empty .)
    AND             reduce using rule 47 (id_mat_acc -> empty .)
    OR              reduce using rule 47 (id_mat_acc -> empty .)
    XOR             reduce using rule 47 (id_mat_acc -> empty .)
    ,               reduce using rule 47 (id_mat_acc -> empty .)
    ]               reduce using rule 47 (id_mat_acc -> empty .)
    ;               reduce using rule 47 (id_mat_acc -> empty .)
    )               reduce using rule 47 (id_mat_acc -> empty .)
    =               reduce using rule 47 (id_mat_acc -> empty .)


state 61

    (13) class_vars -> access var_decl more_class_vars .

    ID              reduce using rule 13 (class_vars -> access var_decl more_class_vars .)
    CONSTRUCTOR     reduce using rule 13 (class_vars -> access var_decl more_class_vars .)
    PUBLIC          reduce using rule 13 (class_vars -> access var_decl more_class_vars .)
    PRIVATE         reduce using rule 13 (class_vars -> access var_decl more_class_vars .)
    }               reduce using rule 13 (class_vars -> access var_decl more_class_vars .)


state 62

    (15) more_class_vars -> empty .

    ID              reduce using rule 15 (more_class_vars -> empty .)
    CONSTRUCTOR     reduce using rule 15 (more_class_vars -> empty .)
    PUBLIC          reduce using rule 15 (more_class_vars -> empty .)
    PRIVATE         reduce using rule 15 (more_class_vars -> empty .)
    }               reduce using rule 15 (more_class_vars -> empty .)


state 63

    (13) class_vars -> access . var_decl more_class_vars
    (7) var_decl -> . vars
    (8) var_decl -> . vector
    (9) var_decl -> . matrix
    (28) vars -> . VAR ids : vars_type ;
    (39) vector -> . VEC ids : vec_mat_type [ CONST_I ] vec_assgn ;
    (42) matrix -> . MAT ids : vec_mat_type [ CONST_I , CONST_I ] mat_assgn ;

    VAR             shift and go to state 44
    VEC             shift and go to state 48
    MAT             shift and go to state 45

    vector                         shift and go to state 38
    var_decl                       shift and go to state 39
    vars                           shift and go to state 47
    matrix                         shift and go to state 40

state 64

    (14) more_class_vars -> class_vars .

    ID              reduce using rule 14 (more_class_vars -> class_vars .)
    CONSTRUCTOR     reduce using rule 14 (more_class_vars -> class_vars .)
    PUBLIC          reduce using rule 14 (more_class_vars -> class_vars .)
    PRIVATE         reduce using rule 14 (more_class_vars -> class_vars .)
    }               reduce using rule 14 (more_class_vars -> class_vars .)


state 65

    (28) vars -> VAR ids . : vars_type ;

    :               shift and go to state 90


state 66

    (25) ids -> ID . m_ids
    (26) m_ids -> . , ids
    (27) m_ids -> . empty
    (162) empty -> .

    ,               shift and go to state 93
    :               reduce using rule 162 (empty -> .)

    m_ids                          shift and go to state 91
    empty                          shift and go to state 92

state 67

    (42) matrix -> MAT ids . : vec_mat_type [ CONST_I , CONST_I ] mat_assgn ;

    :               shift and go to state 94


state 68

    (39) vector -> VEC ids . : vec_mat_type [ CONST_I ] vec_assgn ;

    :               shift and go to state 95


state 69

    (76) kw_func -> FUNC .

    ID              reduce using rule 76 (kw_func -> FUNC .)


state 70

    (77) kw_func -> empty .

    ID              reduce using rule 77 (kw_func -> empty .)


state 71

    (71) func_spec -> access func_type kw_func . ID

    ID              shift and go to state 96


state 72

    (78) method_param -> ID . : param_type param_mat_vec more_params

    :               shift and go to state 97


state 73

    (70) method -> func_spec ( method_param . ) block

    )               shift and go to state 98


state 74

    (50) assignment -> ID id_access = . ass_value ;
    (51) ass_value -> . create_obj
    (52) ass_value -> . expression
    (53) ass_value -> . matrix_exp
    (54) ass_value -> . vector_exp
    (87) create_obj -> . NEW func_call
    (120) expression -> . rel_expression expression_op
    (61) matrix_exp -> . { mat_elem }
    (55) vector_exp -> . [ vec_elem ]
    (125) rel_expression -> . rel_expression_1 rel_exp_op
    (129) rel_expression_1 -> . exp rel_exp_1_op
    (135) exp -> . term exp_op
    (139) term -> . factor term_op
    (153) factor -> . fact_neg fact_body
    (154) fact_neg -> . -
    (155) fact_neg -> . ~
    (156) fact_neg -> . empty
    (162) empty -> .

    NEW             shift and go to state 99
    {               shift and go to state 105
    [               shift and go to state 104
    -               shift and go to state 85
    ~               shift and go to state 84
    (               reduce using rule 162 (empty -> .)
    ID              reduce using rule 162 (empty -> .)
    CONST_I         reduce using rule 162 (empty -> .)
    CONST_F         reduce using rule 162 (empty -> .)
    CONST_CHAR      reduce using rule 162 (empty -> .)
    CONST_STRING    reduce using rule 162 (empty -> .)
    CONST_BOOL      reduce using rule 162 (empty -> .)

    factor                         shift and go to state 77
    create_obj                     shift and go to state 100
    matrix_exp                     shift and go to state 101
    empty                          shift and go to state 83
    ass_value                      shift and go to state 102
    rel_expression                 shift and go to state 75
    term                           shift and go to state 76
    vector_exp                     shift and go to state 103
    rel_expression_1               shift and go to state 79
    fact_neg                       shift and go to state 80
    exp                            shift and go to state 82
    expression                     shift and go to state 106

state 75

    (120) expression -> rel_expression . expression_op
    (121) expression_op -> . AND expression
    (122) expression_op -> . OR expression
    (123) expression_op -> . XOR expression
    (124) expression_op -> . empty
    (162) empty -> .

    AND             shift and go to state 107
    OR              shift and go to state 108
    XOR             shift and go to state 111
    ,               reduce using rule 162 (empty -> .)
    ]               reduce using rule 162 (empty -> .)
    ;               reduce using rule 162 (empty -> .)
    )               reduce using rule 162 (empty -> .)

    empty                          shift and go to state 109
    expression_op                  shift and go to state 110

state 76

    (135) exp -> term . exp_op
    (136) exp_op -> . + exp
    (137) exp_op -> . - exp
    (138) exp_op -> . empty
    (162) empty -> .

    +               shift and go to state 114
    -               shift and go to state 113
    <               reduce using rule 162 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 162 (empty -> .)
    >               reduce using rule 162 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 162 (empty -> .)
    EQUAL           reduce using rule 162 (empty -> .)
    NOT_EQUAL       reduce using rule 162 (empty -> .)
    AND             reduce using rule 162 (empty -> .)
    OR              reduce using rule 162 (empty -> .)
    XOR             reduce using rule 162 (empty -> .)
    ,               reduce using rule 162 (empty -> .)
    ]               reduce using rule 162 (empty -> .)
    ;               reduce using rule 162 (empty -> .)
    )               reduce using rule 162 (empty -> .)

    exp_op                         shift and go to state 112
    empty                          shift and go to state 115

state 77

    (139) term -> factor . term_op
    (140) term_op -> . * term
    (141) term_op -> . / term
    (142) term_op -> . % term
    (143) term_op -> . empty
    (162) empty -> .

    *               shift and go to state 119
    /               shift and go to state 116
    %               shift and go to state 120
    +               reduce using rule 162 (empty -> .)
    -               reduce using rule 162 (empty -> .)
    <               reduce using rule 162 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 162 (empty -> .)
    >               reduce using rule 162 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 162 (empty -> .)
    EQUAL           reduce using rule 162 (empty -> .)
    NOT_EQUAL       reduce using rule 162 (empty -> .)
    AND             reduce using rule 162 (empty -> .)
    OR              reduce using rule 162 (empty -> .)
    XOR             reduce using rule 162 (empty -> .)
    ,               reduce using rule 162 (empty -> .)
    ]               reduce using rule 162 (empty -> .)
    ;               reduce using rule 162 (empty -> .)
    )               reduce using rule 162 (empty -> .)

    empty                          shift and go to state 117
    term_op                        shift and go to state 118

state 78

    (65) mat_vec_access -> [ mat_vec_index . mat_access ]
    (68) mat_access -> . , mat_vec_index
    (69) mat_access -> . empty
    (162) empty -> .

    ,               shift and go to state 122
    ]               reduce using rule 162 (empty -> .)

    mat_access                     shift and go to state 123
    empty                          shift and go to state 121

state 79

    (125) rel_expression -> rel_expression_1 . rel_exp_op
    (126) rel_exp_op -> . EQUAL rel_expression
    (127) rel_exp_op -> . NOT_EQUAL rel_expression
    (128) rel_exp_op -> . empty
    (162) empty -> .

    EQUAL           shift and go to state 125
    NOT_EQUAL       shift and go to state 124
    AND             reduce using rule 162 (empty -> .)
    OR              reduce using rule 162 (empty -> .)
    XOR             reduce using rule 162 (empty -> .)
    ,               reduce using rule 162 (empty -> .)
    ]               reduce using rule 162 (empty -> .)
    ;               reduce using rule 162 (empty -> .)
    )               reduce using rule 162 (empty -> .)

    empty                          shift and go to state 126
    rel_exp_op                     shift and go to state 127

state 80

    (153) factor -> fact_neg . fact_body
    (157) fact_body -> . ( expression )
    (158) fact_body -> . var_cte
    (159) fact_body -> . ID fact_id
    (148) var_cte -> . CONST_I
    (149) var_cte -> . CONST_F
    (150) var_cte -> . CONST_CHAR
    (151) var_cte -> . CONST_STRING
    (152) var_cte -> . CONST_BOOL

    (               shift and go to state 133
    ID              shift and go to state 134
    CONST_I         shift and go to state 131
    CONST_F         shift and go to state 136
    CONST_CHAR      shift and go to state 128
    CONST_STRING    shift and go to state 129
    CONST_BOOL      shift and go to state 130

    var_cte                        shift and go to state 132
    fact_body                      shift and go to state 135

state 81

    (66) mat_vec_index -> _ .

    ,               reduce using rule 66 (mat_vec_index -> _ .)
    ]               reduce using rule 66 (mat_vec_index -> _ .)


state 82

    (129) rel_expression_1 -> exp . rel_exp_1_op
    (130) rel_exp_1_op -> . < rel_expression_1
    (131) rel_exp_1_op -> . LESS_EQUAL_THAN rel_expression_1
    (132) rel_exp_1_op -> . > rel_expression_1
    (133) rel_exp_1_op -> . GREATER_EQUAL_THAN rel_expression_1
    (134) rel_exp_1_op -> . empty
    (162) empty -> .

    <               shift and go to state 139
    LESS_EQUAL_THAN shift and go to state 138
    >               shift and go to state 140
    GREATER_EQUAL_THAN shift and go to state 142
    EQUAL           reduce using rule 162 (empty -> .)
    NOT_EQUAL       reduce using rule 162 (empty -> .)
    AND             reduce using rule 162 (empty -> .)
    OR              reduce using rule 162 (empty -> .)
    XOR             reduce using rule 162 (empty -> .)
    ,               reduce using rule 162 (empty -> .)
    ]               reduce using rule 162 (empty -> .)
    ;               reduce using rule 162 (empty -> .)
    )               reduce using rule 162 (empty -> .)

    rel_exp_1_op                   shift and go to state 137
    empty                          shift and go to state 141

state 83

    (156) fact_neg -> empty .

    (               reduce using rule 156 (fact_neg -> empty .)
    ID              reduce using rule 156 (fact_neg -> empty .)
    CONST_I         reduce using rule 156 (fact_neg -> empty .)
    CONST_F         reduce using rule 156 (fact_neg -> empty .)
    CONST_CHAR      reduce using rule 156 (fact_neg -> empty .)
    CONST_STRING    reduce using rule 156 (fact_neg -> empty .)
    CONST_BOOL      reduce using rule 156 (fact_neg -> empty .)


state 84

    (155) fact_neg -> ~ .

    (               reduce using rule 155 (fact_neg -> ~ .)
    ID              reduce using rule 155 (fact_neg -> ~ .)
    CONST_I         reduce using rule 155 (fact_neg -> ~ .)
    CONST_F         reduce using rule 155 (fact_neg -> ~ .)
    CONST_CHAR      reduce using rule 155 (fact_neg -> ~ .)
    CONST_STRING    reduce using rule 155 (fact_neg -> ~ .)
    CONST_BOOL      reduce using rule 155 (fact_neg -> ~ .)


state 85

    (154) fact_neg -> - .

    (               reduce using rule 154 (fact_neg -> - .)
    ID              reduce using rule 154 (fact_neg -> - .)
    CONST_I         reduce using rule 154 (fact_neg -> - .)
    CONST_F         reduce using rule 154 (fact_neg -> - .)
    CONST_CHAR      reduce using rule 154 (fact_neg -> - .)
    CONST_STRING    reduce using rule 154 (fact_neg -> - .)
    CONST_BOOL      reduce using rule 154 (fact_neg -> - .)


state 86

    (67) mat_vec_index -> expression .

    ,               reduce using rule 67 (mat_vec_index -> expression .)
    ]               reduce using rule 67 (mat_vec_index -> expression .)


state 87

    (48) id_var_acc -> . . ID id_mat_acc

    ID              shift and go to state 143


state 88

    (49) id_var_acc -> empty .

    =               reduce using rule 49 (id_var_acc -> empty .)
    *               reduce using rule 49 (id_var_acc -> empty .)
    /               reduce using rule 49 (id_var_acc -> empty .)
    %               reduce using rule 49 (id_var_acc -> empty .)
    +               reduce using rule 49 (id_var_acc -> empty .)
    -               reduce using rule 49 (id_var_acc -> empty .)
    <               reduce using rule 49 (id_var_acc -> empty .)
    LESS_EQUAL_THAN reduce using rule 49 (id_var_acc -> empty .)
    >               reduce using rule 49 (id_var_acc -> empty .)
    GREATER_EQUAL_THAN reduce using rule 49 (id_var_acc -> empty .)
    EQUAL           reduce using rule 49 (id_var_acc -> empty .)
    NOT_EQUAL       reduce using rule 49 (id_var_acc -> empty .)
    AND             reduce using rule 49 (id_var_acc -> empty .)
    OR              reduce using rule 49 (id_var_acc -> empty .)
    XOR             reduce using rule 49 (id_var_acc -> empty .)
    ,               reduce using rule 49 (id_var_acc -> empty .)
    ]               reduce using rule 49 (id_var_acc -> empty .)
    ;               reduce using rule 49 (id_var_acc -> empty .)
    )               reduce using rule 49 (id_var_acc -> empty .)


state 89

    (45) id_access -> id_mat_acc id_var_acc .

    =               reduce using rule 45 (id_access -> id_mat_acc id_var_acc .)
    *               reduce using rule 45 (id_access -> id_mat_acc id_var_acc .)
    /               reduce using rule 45 (id_access -> id_mat_acc id_var_acc .)
    %               reduce using rule 45 (id_access -> id_mat_acc id_var_acc .)
    +               reduce using rule 45 (id_access -> id_mat_acc id_var_acc .)
    -               reduce using rule 45 (id_access -> id_mat_acc id_var_acc .)
    <               reduce using rule 45 (id_access -> id_mat_acc id_var_acc .)
    LESS_EQUAL_THAN reduce using rule 45 (id_access -> id_mat_acc id_var_acc .)
    >               reduce using rule 45 (id_access -> id_mat_acc id_var_acc .)
    GREATER_EQUAL_THAN reduce using rule 45 (id_access -> id_mat_acc id_var_acc .)
    EQUAL           reduce using rule 45 (id_access -> id_mat_acc id_var_acc .)
    NOT_EQUAL       reduce using rule 45 (id_access -> id_mat_acc id_var_acc .)
    AND             reduce using rule 45 (id_access -> id_mat_acc id_var_acc .)
    OR              reduce using rule 45 (id_access -> id_mat_acc id_var_acc .)
    XOR             reduce using rule 45 (id_access -> id_mat_acc id_var_acc .)
    ,               reduce using rule 45 (id_access -> id_mat_acc id_var_acc .)
    ]               reduce using rule 45 (id_access -> id_mat_acc id_var_acc .)
    ;               reduce using rule 45 (id_access -> id_mat_acc id_var_acc .)
    )               reduce using rule 45 (id_access -> id_mat_acc id_var_acc .)


state 90

    (28) vars -> VAR ids : . vars_type ;
    (29) vars_type -> . type vars_tp_a
    (30) vars_type -> . ID vars_tp_b
    (144) type -> . INT
    (145) type -> . DOUBLE
    (146) type -> . CHAR
    (147) type -> . BOOL

    ID              shift and go to state 146
    INT             shift and go to state 41
    DOUBLE          shift and go to state 42
    CHAR            shift and go to state 52
    BOOL            shift and go to state 51

    vars_type                      shift and go to state 144
    type                           shift and go to state 145

state 91

    (25) ids -> ID m_ids .

    :               reduce using rule 25 (ids -> ID m_ids .)


state 92

    (27) m_ids -> empty .

    :               reduce using rule 27 (m_ids -> empty .)


state 93

    (26) m_ids -> , . ids
    (25) ids -> . ID m_ids

    ID              shift and go to state 66

    ids                            shift and go to state 147

state 94

    (42) matrix -> MAT ids : . vec_mat_type [ CONST_I , CONST_I ] mat_assgn ;
    (37) vec_mat_type -> . type
    (38) vec_mat_type -> . ID
    (144) type -> . INT
    (145) type -> . DOUBLE
    (146) type -> . CHAR
    (147) type -> . BOOL

    ID              shift and go to state 150
    INT             shift and go to state 41
    DOUBLE          shift and go to state 42
    CHAR            shift and go to state 52
    BOOL            shift and go to state 51

    type                           shift and go to state 148
    vec_mat_type                   shift and go to state 149

state 95

    (39) vector -> VEC ids : . vec_mat_type [ CONST_I ] vec_assgn ;
    (37) vec_mat_type -> . type
    (38) vec_mat_type -> . ID
    (144) type -> . INT
    (145) type -> . DOUBLE
    (146) type -> . CHAR
    (147) type -> . BOOL

    ID              shift and go to state 150
    INT             shift and go to state 41
    DOUBLE          shift and go to state 42
    CHAR            shift and go to state 52
    BOOL            shift and go to state 51

    vec_mat_type                   shift and go to state 151
    type                           shift and go to state 148

state 96

    (71) func_spec -> access func_type kw_func ID .

    (               reduce using rule 71 (func_spec -> access func_type kw_func ID .)


state 97

    (78) method_param -> ID : . param_type param_mat_vec more_params
    (81) param_type -> . type
    (82) param_type -> . ID
    (144) type -> . INT
    (145) type -> . DOUBLE
    (146) type -> . CHAR
    (147) type -> . BOOL

    ID              shift and go to state 152
    INT             shift and go to state 41
    DOUBLE          shift and go to state 42
    CHAR            shift and go to state 52
    BOOL            shift and go to state 51

    param_type                     shift and go to state 153
    type                           shift and go to state 154

state 98

    (70) method -> func_spec ( method_param ) . block
    (92) block -> . { bstmt }

    {               shift and go to state 156

    block                          shift and go to state 155

state 99

    (87) create_obj -> NEW . func_call
    (88) func_call -> . ( func_param )

    (               shift and go to state 157

    func_call                      shift and go to state 158

state 100

    (51) ass_value -> create_obj .

    ;               reduce using rule 51 (ass_value -> create_obj .)


state 101

    (53) ass_value -> matrix_exp .

    ;               reduce using rule 53 (ass_value -> matrix_exp .)


state 102

    (50) assignment -> ID id_access = ass_value . ;

    ;               shift and go to state 159


state 103

    (54) ass_value -> vector_exp .

    ;               reduce using rule 54 (ass_value -> vector_exp .)


state 104

    (55) vector_exp -> [ . vec_elem ]
    (56) vec_elem -> . vec_object vec_more
    (57) vec_object -> . create_obj
    (58) vec_object -> . expression
    (87) create_obj -> . NEW func_call
    (120) expression -> . rel_expression expression_op
    (125) rel_expression -> . rel_expression_1 rel_exp_op
    (129) rel_expression_1 -> . exp rel_exp_1_op
    (135) exp -> . term exp_op
    (139) term -> . factor term_op
    (153) factor -> . fact_neg fact_body
    (154) fact_neg -> . -
    (155) fact_neg -> . ~
    (156) fact_neg -> . empty
    (162) empty -> .

    NEW             shift and go to state 99
    -               shift and go to state 85
    ~               shift and go to state 84
    (               reduce using rule 162 (empty -> .)
    ID              reduce using rule 162 (empty -> .)
    CONST_I         reduce using rule 162 (empty -> .)
    CONST_F         reduce using rule 162 (empty -> .)
    CONST_CHAR      reduce using rule 162 (empty -> .)
    CONST_STRING    reduce using rule 162 (empty -> .)
    CONST_BOOL      reduce using rule 162 (empty -> .)

    rel_expression                 shift and go to state 75
    vec_object                     shift and go to state 162
    term                           shift and go to state 76
    factor                         shift and go to state 77
    fact_neg                       shift and go to state 80
    rel_expression_1               shift and go to state 79
    exp                            shift and go to state 82
    empty                          shift and go to state 83
    create_obj                     shift and go to state 160
    expression                     shift and go to state 163
    vec_elem                       shift and go to state 161

state 105

    (61) matrix_exp -> { . mat_elem }
    (62) mat_elem -> . vector_exp mat_more
    (55) vector_exp -> . [ vec_elem ]

    [               shift and go to state 104

    mat_elem                       shift and go to state 164
    vector_exp                     shift and go to state 165

state 106

    (52) ass_value -> expression .

    ;               reduce using rule 52 (ass_value -> expression .)


state 107

    (121) expression_op -> AND . expression
    (120) expression -> . rel_expression expression_op
    (125) rel_expression -> . rel_expression_1 rel_exp_op
    (129) rel_expression_1 -> . exp rel_exp_1_op
    (135) exp -> . term exp_op
    (139) term -> . factor term_op
    (153) factor -> . fact_neg fact_body
    (154) fact_neg -> . -
    (155) fact_neg -> . ~
    (156) fact_neg -> . empty
    (162) empty -> .

    -               shift and go to state 85
    ~               shift and go to state 84
    (               reduce using rule 162 (empty -> .)
    ID              reduce using rule 162 (empty -> .)
    CONST_I         reduce using rule 162 (empty -> .)
    CONST_F         reduce using rule 162 (empty -> .)
    CONST_CHAR      reduce using rule 162 (empty -> .)
    CONST_STRING    reduce using rule 162 (empty -> .)
    CONST_BOOL      reduce using rule 162 (empty -> .)

    rel_expression                 shift and go to state 75
    term                           shift and go to state 76
    factor                         shift and go to state 77
    fact_neg                       shift and go to state 80
    rel_expression_1               shift and go to state 79
    exp                            shift and go to state 82
    empty                          shift and go to state 83
    expression                     shift and go to state 166

state 108

    (122) expression_op -> OR . expression
    (120) expression -> . rel_expression expression_op
    (125) rel_expression -> . rel_expression_1 rel_exp_op
    (129) rel_expression_1 -> . exp rel_exp_1_op
    (135) exp -> . term exp_op
    (139) term -> . factor term_op
    (153) factor -> . fact_neg fact_body
    (154) fact_neg -> . -
    (155) fact_neg -> . ~
    (156) fact_neg -> . empty
    (162) empty -> .

    -               shift and go to state 85
    ~               shift and go to state 84
    (               reduce using rule 162 (empty -> .)
    ID              reduce using rule 162 (empty -> .)
    CONST_I         reduce using rule 162 (empty -> .)
    CONST_F         reduce using rule 162 (empty -> .)
    CONST_CHAR      reduce using rule 162 (empty -> .)
    CONST_STRING    reduce using rule 162 (empty -> .)
    CONST_BOOL      reduce using rule 162 (empty -> .)

    rel_expression                 shift and go to state 75
    term                           shift and go to state 76
    factor                         shift and go to state 77
    fact_neg                       shift and go to state 80
    rel_expression_1               shift and go to state 79
    exp                            shift and go to state 82
    empty                          shift and go to state 83
    expression                     shift and go to state 167

state 109

    (124) expression_op -> empty .

    ,               reduce using rule 124 (expression_op -> empty .)
    ]               reduce using rule 124 (expression_op -> empty .)
    ;               reduce using rule 124 (expression_op -> empty .)
    )               reduce using rule 124 (expression_op -> empty .)


state 110

    (120) expression -> rel_expression expression_op .

    ,               reduce using rule 120 (expression -> rel_expression expression_op .)
    ]               reduce using rule 120 (expression -> rel_expression expression_op .)
    ;               reduce using rule 120 (expression -> rel_expression expression_op .)
    )               reduce using rule 120 (expression -> rel_expression expression_op .)


state 111

    (123) expression_op -> XOR . expression
    (120) expression -> . rel_expression expression_op
    (125) rel_expression -> . rel_expression_1 rel_exp_op
    (129) rel_expression_1 -> . exp rel_exp_1_op
    (135) exp -> . term exp_op
    (139) term -> . factor term_op
    (153) factor -> . fact_neg fact_body
    (154) fact_neg -> . -
    (155) fact_neg -> . ~
    (156) fact_neg -> . empty
    (162) empty -> .

    -               shift and go to state 85
    ~               shift and go to state 84
    (               reduce using rule 162 (empty -> .)
    ID              reduce using rule 162 (empty -> .)
    CONST_I         reduce using rule 162 (empty -> .)
    CONST_F         reduce using rule 162 (empty -> .)
    CONST_CHAR      reduce using rule 162 (empty -> .)
    CONST_STRING    reduce using rule 162 (empty -> .)
    CONST_BOOL      reduce using rule 162 (empty -> .)

    rel_expression                 shift and go to state 75
    term                           shift and go to state 76
    factor                         shift and go to state 77
    fact_neg                       shift and go to state 80
    rel_expression_1               shift and go to state 79
    exp                            shift and go to state 82
    empty                          shift and go to state 83
    expression                     shift and go to state 168

state 112

    (135) exp -> term exp_op .

    <               reduce using rule 135 (exp -> term exp_op .)
    LESS_EQUAL_THAN reduce using rule 135 (exp -> term exp_op .)
    >               reduce using rule 135 (exp -> term exp_op .)
    GREATER_EQUAL_THAN reduce using rule 135 (exp -> term exp_op .)
    EQUAL           reduce using rule 135 (exp -> term exp_op .)
    NOT_EQUAL       reduce using rule 135 (exp -> term exp_op .)
    AND             reduce using rule 135 (exp -> term exp_op .)
    OR              reduce using rule 135 (exp -> term exp_op .)
    XOR             reduce using rule 135 (exp -> term exp_op .)
    ,               reduce using rule 135 (exp -> term exp_op .)
    )               reduce using rule 135 (exp -> term exp_op .)
    ]               reduce using rule 135 (exp -> term exp_op .)
    ;               reduce using rule 135 (exp -> term exp_op .)


state 113

    (137) exp_op -> - . exp
    (135) exp -> . term exp_op
    (139) term -> . factor term_op
    (153) factor -> . fact_neg fact_body
    (154) fact_neg -> . -
    (155) fact_neg -> . ~
    (156) fact_neg -> . empty
    (162) empty -> .

    -               shift and go to state 85
    ~               shift and go to state 84
    (               reduce using rule 162 (empty -> .)
    ID              reduce using rule 162 (empty -> .)
    CONST_I         reduce using rule 162 (empty -> .)
    CONST_F         reduce using rule 162 (empty -> .)
    CONST_CHAR      reduce using rule 162 (empty -> .)
    CONST_STRING    reduce using rule 162 (empty -> .)
    CONST_BOOL      reduce using rule 162 (empty -> .)

    fact_neg                       shift and go to state 80
    exp                            shift and go to state 169
    term                           shift and go to state 76
    factor                         shift and go to state 77
    empty                          shift and go to state 83

state 114

    (136) exp_op -> + . exp
    (135) exp -> . term exp_op
    (139) term -> . factor term_op
    (153) factor -> . fact_neg fact_body
    (154) fact_neg -> . -
    (155) fact_neg -> . ~
    (156) fact_neg -> . empty
    (162) empty -> .

    -               shift and go to state 85
    ~               shift and go to state 84
    (               reduce using rule 162 (empty -> .)
    ID              reduce using rule 162 (empty -> .)
    CONST_I         reduce using rule 162 (empty -> .)
    CONST_F         reduce using rule 162 (empty -> .)
    CONST_CHAR      reduce using rule 162 (empty -> .)
    CONST_STRING    reduce using rule 162 (empty -> .)
    CONST_BOOL      reduce using rule 162 (empty -> .)

    fact_neg                       shift and go to state 80
    exp                            shift and go to state 170
    term                           shift and go to state 76
    factor                         shift and go to state 77
    empty                          shift and go to state 83

state 115

    (138) exp_op -> empty .

    <               reduce using rule 138 (exp_op -> empty .)
    LESS_EQUAL_THAN reduce using rule 138 (exp_op -> empty .)
    >               reduce using rule 138 (exp_op -> empty .)
    GREATER_EQUAL_THAN reduce using rule 138 (exp_op -> empty .)
    EQUAL           reduce using rule 138 (exp_op -> empty .)
    NOT_EQUAL       reduce using rule 138 (exp_op -> empty .)
    AND             reduce using rule 138 (exp_op -> empty .)
    OR              reduce using rule 138 (exp_op -> empty .)
    XOR             reduce using rule 138 (exp_op -> empty .)
    ,               reduce using rule 138 (exp_op -> empty .)
    ]               reduce using rule 138 (exp_op -> empty .)
    ;               reduce using rule 138 (exp_op -> empty .)
    )               reduce using rule 138 (exp_op -> empty .)


state 116

    (141) term_op -> / . term
    (139) term -> . factor term_op
    (153) factor -> . fact_neg fact_body
    (154) fact_neg -> . -
    (155) fact_neg -> . ~
    (156) fact_neg -> . empty
    (162) empty -> .

    -               shift and go to state 85
    ~               shift and go to state 84
    (               reduce using rule 162 (empty -> .)
    ID              reduce using rule 162 (empty -> .)
    CONST_I         reduce using rule 162 (empty -> .)
    CONST_F         reduce using rule 162 (empty -> .)
    CONST_CHAR      reduce using rule 162 (empty -> .)
    CONST_STRING    reduce using rule 162 (empty -> .)
    CONST_BOOL      reduce using rule 162 (empty -> .)

    fact_neg                       shift and go to state 80
    term                           shift and go to state 171
    factor                         shift and go to state 77
    empty                          shift and go to state 83

state 117

    (143) term_op -> empty .

    +               reduce using rule 143 (term_op -> empty .)
    -               reduce using rule 143 (term_op -> empty .)
    <               reduce using rule 143 (term_op -> empty .)
    LESS_EQUAL_THAN reduce using rule 143 (term_op -> empty .)
    >               reduce using rule 143 (term_op -> empty .)
    GREATER_EQUAL_THAN reduce using rule 143 (term_op -> empty .)
    EQUAL           reduce using rule 143 (term_op -> empty .)
    NOT_EQUAL       reduce using rule 143 (term_op -> empty .)
    AND             reduce using rule 143 (term_op -> empty .)
    OR              reduce using rule 143 (term_op -> empty .)
    XOR             reduce using rule 143 (term_op -> empty .)
    ,               reduce using rule 143 (term_op -> empty .)
    ]               reduce using rule 143 (term_op -> empty .)
    ;               reduce using rule 143 (term_op -> empty .)
    )               reduce using rule 143 (term_op -> empty .)


state 118

    (139) term -> factor term_op .

    +               reduce using rule 139 (term -> factor term_op .)
    -               reduce using rule 139 (term -> factor term_op .)
    <               reduce using rule 139 (term -> factor term_op .)
    LESS_EQUAL_THAN reduce using rule 139 (term -> factor term_op .)
    >               reduce using rule 139 (term -> factor term_op .)
    GREATER_EQUAL_THAN reduce using rule 139 (term -> factor term_op .)
    EQUAL           reduce using rule 139 (term -> factor term_op .)
    NOT_EQUAL       reduce using rule 139 (term -> factor term_op .)
    AND             reduce using rule 139 (term -> factor term_op .)
    OR              reduce using rule 139 (term -> factor term_op .)
    XOR             reduce using rule 139 (term -> factor term_op .)
    ,               reduce using rule 139 (term -> factor term_op .)
    ]               reduce using rule 139 (term -> factor term_op .)
    ;               reduce using rule 139 (term -> factor term_op .)
    )               reduce using rule 139 (term -> factor term_op .)


state 119

    (140) term_op -> * . term
    (139) term -> . factor term_op
    (153) factor -> . fact_neg fact_body
    (154) fact_neg -> . -
    (155) fact_neg -> . ~
    (156) fact_neg -> . empty
    (162) empty -> .

    -               shift and go to state 85
    ~               shift and go to state 84
    (               reduce using rule 162 (empty -> .)
    ID              reduce using rule 162 (empty -> .)
    CONST_I         reduce using rule 162 (empty -> .)
    CONST_F         reduce using rule 162 (empty -> .)
    CONST_CHAR      reduce using rule 162 (empty -> .)
    CONST_STRING    reduce using rule 162 (empty -> .)
    CONST_BOOL      reduce using rule 162 (empty -> .)

    fact_neg                       shift and go to state 80
    term                           shift and go to state 172
    factor                         shift and go to state 77
    empty                          shift and go to state 83

state 120

    (142) term_op -> % . term
    (139) term -> . factor term_op
    (153) factor -> . fact_neg fact_body
    (154) fact_neg -> . -
    (155) fact_neg -> . ~
    (156) fact_neg -> . empty
    (162) empty -> .

    -               shift and go to state 85
    ~               shift and go to state 84
    (               reduce using rule 162 (empty -> .)
    ID              reduce using rule 162 (empty -> .)
    CONST_I         reduce using rule 162 (empty -> .)
    CONST_F         reduce using rule 162 (empty -> .)
    CONST_CHAR      reduce using rule 162 (empty -> .)
    CONST_STRING    reduce using rule 162 (empty -> .)
    CONST_BOOL      reduce using rule 162 (empty -> .)

    fact_neg                       shift and go to state 80
    term                           shift and go to state 173
    factor                         shift and go to state 77
    empty                          shift and go to state 83

state 121

    (69) mat_access -> empty .

    ]               reduce using rule 69 (mat_access -> empty .)


state 122

    (68) mat_access -> , . mat_vec_index
    (66) mat_vec_index -> . _
    (67) mat_vec_index -> . expression
    (120) expression -> . rel_expression expression_op
    (125) rel_expression -> . rel_expression_1 rel_exp_op
    (129) rel_expression_1 -> . exp rel_exp_1_op
    (135) exp -> . term exp_op
    (139) term -> . factor term_op
    (153) factor -> . fact_neg fact_body
    (154) fact_neg -> . -
    (155) fact_neg -> . ~
    (156) fact_neg -> . empty
    (162) empty -> .

    _               shift and go to state 81
    -               shift and go to state 85
    ~               shift and go to state 84
    (               reduce using rule 162 (empty -> .)
    ID              reduce using rule 162 (empty -> .)
    CONST_I         reduce using rule 162 (empty -> .)
    CONST_F         reduce using rule 162 (empty -> .)
    CONST_CHAR      reduce using rule 162 (empty -> .)
    CONST_STRING    reduce using rule 162 (empty -> .)
    CONST_BOOL      reduce using rule 162 (empty -> .)

    rel_expression                 shift and go to state 75
    term                           shift and go to state 76
    factor                         shift and go to state 77
    mat_vec_index                  shift and go to state 174
    rel_expression_1               shift and go to state 79
    fact_neg                       shift and go to state 80
    exp                            shift and go to state 82
    empty                          shift and go to state 83
    expression                     shift and go to state 86

state 123

    (65) mat_vec_access -> [ mat_vec_index mat_access . ]

    ]               shift and go to state 175


state 124

    (127) rel_exp_op -> NOT_EQUAL . rel_expression
    (125) rel_expression -> . rel_expression_1 rel_exp_op
    (129) rel_expression_1 -> . exp rel_exp_1_op
    (135) exp -> . term exp_op
    (139) term -> . factor term_op
    (153) factor -> . fact_neg fact_body
    (154) fact_neg -> . -
    (155) fact_neg -> . ~
    (156) fact_neg -> . empty
    (162) empty -> .

    -               shift and go to state 85
    ~               shift and go to state 84
    (               reduce using rule 162 (empty -> .)
    ID              reduce using rule 162 (empty -> .)
    CONST_I         reduce using rule 162 (empty -> .)
    CONST_F         reduce using rule 162 (empty -> .)
    CONST_CHAR      reduce using rule 162 (empty -> .)
    CONST_STRING    reduce using rule 162 (empty -> .)
    CONST_BOOL      reduce using rule 162 (empty -> .)

    rel_expression                 shift and go to state 176
    term                           shift and go to state 76
    factor                         shift and go to state 77
    fact_neg                       shift and go to state 80
    rel_expression_1               shift and go to state 79
    exp                            shift and go to state 82
    empty                          shift and go to state 83

state 125

    (126) rel_exp_op -> EQUAL . rel_expression
    (125) rel_expression -> . rel_expression_1 rel_exp_op
    (129) rel_expression_1 -> . exp rel_exp_1_op
    (135) exp -> . term exp_op
    (139) term -> . factor term_op
    (153) factor -> . fact_neg fact_body
    (154) fact_neg -> . -
    (155) fact_neg -> . ~
    (156) fact_neg -> . empty
    (162) empty -> .

    -               shift and go to state 85
    ~               shift and go to state 84
    (               reduce using rule 162 (empty -> .)
    ID              reduce using rule 162 (empty -> .)
    CONST_I         reduce using rule 162 (empty -> .)
    CONST_F         reduce using rule 162 (empty -> .)
    CONST_CHAR      reduce using rule 162 (empty -> .)
    CONST_STRING    reduce using rule 162 (empty -> .)
    CONST_BOOL      reduce using rule 162 (empty -> .)

    rel_expression                 shift and go to state 177
    term                           shift and go to state 76
    factor                         shift and go to state 77
    fact_neg                       shift and go to state 80
    rel_expression_1               shift and go to state 79
    exp                            shift and go to state 82
    empty                          shift and go to state 83

state 126

    (128) rel_exp_op -> empty .

    AND             reduce using rule 128 (rel_exp_op -> empty .)
    OR              reduce using rule 128 (rel_exp_op -> empty .)
    XOR             reduce using rule 128 (rel_exp_op -> empty .)
    ,               reduce using rule 128 (rel_exp_op -> empty .)
    ]               reduce using rule 128 (rel_exp_op -> empty .)
    ;               reduce using rule 128 (rel_exp_op -> empty .)
    )               reduce using rule 128 (rel_exp_op -> empty .)


state 127

    (125) rel_expression -> rel_expression_1 rel_exp_op .

    AND             reduce using rule 125 (rel_expression -> rel_expression_1 rel_exp_op .)
    OR              reduce using rule 125 (rel_expression -> rel_expression_1 rel_exp_op .)
    XOR             reduce using rule 125 (rel_expression -> rel_expression_1 rel_exp_op .)
    )               reduce using rule 125 (rel_expression -> rel_expression_1 rel_exp_op .)
    ,               reduce using rule 125 (rel_expression -> rel_expression_1 rel_exp_op .)
    ]               reduce using rule 125 (rel_expression -> rel_expression_1 rel_exp_op .)
    ;               reduce using rule 125 (rel_expression -> rel_expression_1 rel_exp_op .)


state 128

    (150) var_cte -> CONST_CHAR .

    *               reduce using rule 150 (var_cte -> CONST_CHAR .)
    /               reduce using rule 150 (var_cte -> CONST_CHAR .)
    %               reduce using rule 150 (var_cte -> CONST_CHAR .)
    +               reduce using rule 150 (var_cte -> CONST_CHAR .)
    -               reduce using rule 150 (var_cte -> CONST_CHAR .)
    <               reduce using rule 150 (var_cte -> CONST_CHAR .)
    LESS_EQUAL_THAN reduce using rule 150 (var_cte -> CONST_CHAR .)
    >               reduce using rule 150 (var_cte -> CONST_CHAR .)
    GREATER_EQUAL_THAN reduce using rule 150 (var_cte -> CONST_CHAR .)
    EQUAL           reduce using rule 150 (var_cte -> CONST_CHAR .)
    NOT_EQUAL       reduce using rule 150 (var_cte -> CONST_CHAR .)
    AND             reduce using rule 150 (var_cte -> CONST_CHAR .)
    OR              reduce using rule 150 (var_cte -> CONST_CHAR .)
    XOR             reduce using rule 150 (var_cte -> CONST_CHAR .)
    ,               reduce using rule 150 (var_cte -> CONST_CHAR .)
    ]               reduce using rule 150 (var_cte -> CONST_CHAR .)
    ;               reduce using rule 150 (var_cte -> CONST_CHAR .)
    )               reduce using rule 150 (var_cte -> CONST_CHAR .)


state 129

    (151) var_cte -> CONST_STRING .

    *               reduce using rule 151 (var_cte -> CONST_STRING .)
    /               reduce using rule 151 (var_cte -> CONST_STRING .)
    %               reduce using rule 151 (var_cte -> CONST_STRING .)
    +               reduce using rule 151 (var_cte -> CONST_STRING .)
    -               reduce using rule 151 (var_cte -> CONST_STRING .)
    <               reduce using rule 151 (var_cte -> CONST_STRING .)
    LESS_EQUAL_THAN reduce using rule 151 (var_cte -> CONST_STRING .)
    >               reduce using rule 151 (var_cte -> CONST_STRING .)
    GREATER_EQUAL_THAN reduce using rule 151 (var_cte -> CONST_STRING .)
    EQUAL           reduce using rule 151 (var_cte -> CONST_STRING .)
    NOT_EQUAL       reduce using rule 151 (var_cte -> CONST_STRING .)
    AND             reduce using rule 151 (var_cte -> CONST_STRING .)
    OR              reduce using rule 151 (var_cte -> CONST_STRING .)
    XOR             reduce using rule 151 (var_cte -> CONST_STRING .)
    ,               reduce using rule 151 (var_cte -> CONST_STRING .)
    ]               reduce using rule 151 (var_cte -> CONST_STRING .)
    ;               reduce using rule 151 (var_cte -> CONST_STRING .)
    )               reduce using rule 151 (var_cte -> CONST_STRING .)


state 130

    (152) var_cte -> CONST_BOOL .

    *               reduce using rule 152 (var_cte -> CONST_BOOL .)
    /               reduce using rule 152 (var_cte -> CONST_BOOL .)
    %               reduce using rule 152 (var_cte -> CONST_BOOL .)
    +               reduce using rule 152 (var_cte -> CONST_BOOL .)
    -               reduce using rule 152 (var_cte -> CONST_BOOL .)
    <               reduce using rule 152 (var_cte -> CONST_BOOL .)
    LESS_EQUAL_THAN reduce using rule 152 (var_cte -> CONST_BOOL .)
    >               reduce using rule 152 (var_cte -> CONST_BOOL .)
    GREATER_EQUAL_THAN reduce using rule 152 (var_cte -> CONST_BOOL .)
    EQUAL           reduce using rule 152 (var_cte -> CONST_BOOL .)
    NOT_EQUAL       reduce using rule 152 (var_cte -> CONST_BOOL .)
    AND             reduce using rule 152 (var_cte -> CONST_BOOL .)
    OR              reduce using rule 152 (var_cte -> CONST_BOOL .)
    XOR             reduce using rule 152 (var_cte -> CONST_BOOL .)
    ,               reduce using rule 152 (var_cte -> CONST_BOOL .)
    ]               reduce using rule 152 (var_cte -> CONST_BOOL .)
    ;               reduce using rule 152 (var_cte -> CONST_BOOL .)
    )               reduce using rule 152 (var_cte -> CONST_BOOL .)


state 131

    (148) var_cte -> CONST_I .

    *               reduce using rule 148 (var_cte -> CONST_I .)
    /               reduce using rule 148 (var_cte -> CONST_I .)
    %               reduce using rule 148 (var_cte -> CONST_I .)
    +               reduce using rule 148 (var_cte -> CONST_I .)
    -               reduce using rule 148 (var_cte -> CONST_I .)
    <               reduce using rule 148 (var_cte -> CONST_I .)
    LESS_EQUAL_THAN reduce using rule 148 (var_cte -> CONST_I .)
    >               reduce using rule 148 (var_cte -> CONST_I .)
    GREATER_EQUAL_THAN reduce using rule 148 (var_cte -> CONST_I .)
    EQUAL           reduce using rule 148 (var_cte -> CONST_I .)
    NOT_EQUAL       reduce using rule 148 (var_cte -> CONST_I .)
    AND             reduce using rule 148 (var_cte -> CONST_I .)
    OR              reduce using rule 148 (var_cte -> CONST_I .)
    XOR             reduce using rule 148 (var_cte -> CONST_I .)
    ,               reduce using rule 148 (var_cte -> CONST_I .)
    ]               reduce using rule 148 (var_cte -> CONST_I .)
    ;               reduce using rule 148 (var_cte -> CONST_I .)
    )               reduce using rule 148 (var_cte -> CONST_I .)


state 132

    (158) fact_body -> var_cte .

    *               reduce using rule 158 (fact_body -> var_cte .)
    /               reduce using rule 158 (fact_body -> var_cte .)
    %               reduce using rule 158 (fact_body -> var_cte .)
    +               reduce using rule 158 (fact_body -> var_cte .)
    -               reduce using rule 158 (fact_body -> var_cte .)
    <               reduce using rule 158 (fact_body -> var_cte .)
    LESS_EQUAL_THAN reduce using rule 158 (fact_body -> var_cte .)
    >               reduce using rule 158 (fact_body -> var_cte .)
    GREATER_EQUAL_THAN reduce using rule 158 (fact_body -> var_cte .)
    EQUAL           reduce using rule 158 (fact_body -> var_cte .)
    NOT_EQUAL       reduce using rule 158 (fact_body -> var_cte .)
    AND             reduce using rule 158 (fact_body -> var_cte .)
    OR              reduce using rule 158 (fact_body -> var_cte .)
    XOR             reduce using rule 158 (fact_body -> var_cte .)
    ,               reduce using rule 158 (fact_body -> var_cte .)
    ]               reduce using rule 158 (fact_body -> var_cte .)
    ;               reduce using rule 158 (fact_body -> var_cte .)
    )               reduce using rule 158 (fact_body -> var_cte .)


state 133

    (157) fact_body -> ( . expression )
    (120) expression -> . rel_expression expression_op
    (125) rel_expression -> . rel_expression_1 rel_exp_op
    (129) rel_expression_1 -> . exp rel_exp_1_op
    (135) exp -> . term exp_op
    (139) term -> . factor term_op
    (153) factor -> . fact_neg fact_body
    (154) fact_neg -> . -
    (155) fact_neg -> . ~
    (156) fact_neg -> . empty
    (162) empty -> .

    -               shift and go to state 85
    ~               shift and go to state 84
    (               reduce using rule 162 (empty -> .)
    ID              reduce using rule 162 (empty -> .)
    CONST_I         reduce using rule 162 (empty -> .)
    CONST_F         reduce using rule 162 (empty -> .)
    CONST_CHAR      reduce using rule 162 (empty -> .)
    CONST_STRING    reduce using rule 162 (empty -> .)
    CONST_BOOL      reduce using rule 162 (empty -> .)

    rel_expression                 shift and go to state 75
    term                           shift and go to state 76
    factor                         shift and go to state 77
    fact_neg                       shift and go to state 80
    rel_expression_1               shift and go to state 79
    exp                            shift and go to state 82
    empty                          shift and go to state 83
    expression                     shift and go to state 178

state 134

    (159) fact_body -> ID . fact_id
    (160) fact_id -> . func_call
    (161) fact_id -> . id_access
    (88) func_call -> . ( func_param )
    (45) id_access -> . id_mat_acc id_var_acc
    (46) id_mat_acc -> . mat_vec_access
    (47) id_mat_acc -> . empty
    (65) mat_vec_access -> . [ mat_vec_index mat_access ]
    (162) empty -> .

    (               shift and go to state 157
    [               shift and go to state 58
    .               reduce using rule 162 (empty -> .)
    *               reduce using rule 162 (empty -> .)
    /               reduce using rule 162 (empty -> .)
    %               reduce using rule 162 (empty -> .)
    +               reduce using rule 162 (empty -> .)
    -               reduce using rule 162 (empty -> .)
    <               reduce using rule 162 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 162 (empty -> .)
    >               reduce using rule 162 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 162 (empty -> .)
    EQUAL           reduce using rule 162 (empty -> .)
    NOT_EQUAL       reduce using rule 162 (empty -> .)
    AND             reduce using rule 162 (empty -> .)
    OR              reduce using rule 162 (empty -> .)
    XOR             reduce using rule 162 (empty -> .)
    ,               reduce using rule 162 (empty -> .)
    ]               reduce using rule 162 (empty -> .)
    ;               reduce using rule 162 (empty -> .)
    )               reduce using rule 162 (empty -> .)

    func_call                      shift and go to state 181
    mat_vec_access                 shift and go to state 56
    empty                          shift and go to state 60
    fact_id                        shift and go to state 179
    id_mat_acc                     shift and go to state 59
    id_access                      shift and go to state 180

state 135

    (153) factor -> fact_neg fact_body .

    *               reduce using rule 153 (factor -> fact_neg fact_body .)
    /               reduce using rule 153 (factor -> fact_neg fact_body .)
    %               reduce using rule 153 (factor -> fact_neg fact_body .)
    +               reduce using rule 153 (factor -> fact_neg fact_body .)
    -               reduce using rule 153 (factor -> fact_neg fact_body .)
    <               reduce using rule 153 (factor -> fact_neg fact_body .)
    LESS_EQUAL_THAN reduce using rule 153 (factor -> fact_neg fact_body .)
    >               reduce using rule 153 (factor -> fact_neg fact_body .)
    GREATER_EQUAL_THAN reduce using rule 153 (factor -> fact_neg fact_body .)
    EQUAL           reduce using rule 153 (factor -> fact_neg fact_body .)
    NOT_EQUAL       reduce using rule 153 (factor -> fact_neg fact_body .)
    AND             reduce using rule 153 (factor -> fact_neg fact_body .)
    OR              reduce using rule 153 (factor -> fact_neg fact_body .)
    XOR             reduce using rule 153 (factor -> fact_neg fact_body .)
    ,               reduce using rule 153 (factor -> fact_neg fact_body .)
    ]               reduce using rule 153 (factor -> fact_neg fact_body .)
    ;               reduce using rule 153 (factor -> fact_neg fact_body .)
    )               reduce using rule 153 (factor -> fact_neg fact_body .)


state 136

    (149) var_cte -> CONST_F .

    *               reduce using rule 149 (var_cte -> CONST_F .)
    /               reduce using rule 149 (var_cte -> CONST_F .)
    %               reduce using rule 149 (var_cte -> CONST_F .)
    +               reduce using rule 149 (var_cte -> CONST_F .)
    -               reduce using rule 149 (var_cte -> CONST_F .)
    <               reduce using rule 149 (var_cte -> CONST_F .)
    LESS_EQUAL_THAN reduce using rule 149 (var_cte -> CONST_F .)
    >               reduce using rule 149 (var_cte -> CONST_F .)
    GREATER_EQUAL_THAN reduce using rule 149 (var_cte -> CONST_F .)
    EQUAL           reduce using rule 149 (var_cte -> CONST_F .)
    NOT_EQUAL       reduce using rule 149 (var_cte -> CONST_F .)
    AND             reduce using rule 149 (var_cte -> CONST_F .)
    OR              reduce using rule 149 (var_cte -> CONST_F .)
    XOR             reduce using rule 149 (var_cte -> CONST_F .)
    ,               reduce using rule 149 (var_cte -> CONST_F .)
    ]               reduce using rule 149 (var_cte -> CONST_F .)
    ;               reduce using rule 149 (var_cte -> CONST_F .)
    )               reduce using rule 149 (var_cte -> CONST_F .)


state 137

    (129) rel_expression_1 -> exp rel_exp_1_op .

    EQUAL           reduce using rule 129 (rel_expression_1 -> exp rel_exp_1_op .)
    NOT_EQUAL       reduce using rule 129 (rel_expression_1 -> exp rel_exp_1_op .)
    AND             reduce using rule 129 (rel_expression_1 -> exp rel_exp_1_op .)
    OR              reduce using rule 129 (rel_expression_1 -> exp rel_exp_1_op .)
    XOR             reduce using rule 129 (rel_expression_1 -> exp rel_exp_1_op .)
    ,               reduce using rule 129 (rel_expression_1 -> exp rel_exp_1_op .)
    ]               reduce using rule 129 (rel_expression_1 -> exp rel_exp_1_op .)
    ;               reduce using rule 129 (rel_expression_1 -> exp rel_exp_1_op .)
    )               reduce using rule 129 (rel_expression_1 -> exp rel_exp_1_op .)


state 138

    (131) rel_exp_1_op -> LESS_EQUAL_THAN . rel_expression_1
    (129) rel_expression_1 -> . exp rel_exp_1_op
    (135) exp -> . term exp_op
    (139) term -> . factor term_op
    (153) factor -> . fact_neg fact_body
    (154) fact_neg -> . -
    (155) fact_neg -> . ~
    (156) fact_neg -> . empty
    (162) empty -> .

    -               shift and go to state 85
    ~               shift and go to state 84
    (               reduce using rule 162 (empty -> .)
    ID              reduce using rule 162 (empty -> .)
    CONST_I         reduce using rule 162 (empty -> .)
    CONST_F         reduce using rule 162 (empty -> .)
    CONST_CHAR      reduce using rule 162 (empty -> .)
    CONST_STRING    reduce using rule 162 (empty -> .)
    CONST_BOOL      reduce using rule 162 (empty -> .)

    exp                            shift and go to state 82
    term                           shift and go to state 76
    factor                         shift and go to state 77
    empty                          shift and go to state 83
    fact_neg                       shift and go to state 80
    rel_expression_1               shift and go to state 182

state 139

    (130) rel_exp_1_op -> < . rel_expression_1
    (129) rel_expression_1 -> . exp rel_exp_1_op
    (135) exp -> . term exp_op
    (139) term -> . factor term_op
    (153) factor -> . fact_neg fact_body
    (154) fact_neg -> . -
    (155) fact_neg -> . ~
    (156) fact_neg -> . empty
    (162) empty -> .

    -               shift and go to state 85
    ~               shift and go to state 84
    (               reduce using rule 162 (empty -> .)
    ID              reduce using rule 162 (empty -> .)
    CONST_I         reduce using rule 162 (empty -> .)
    CONST_F         reduce using rule 162 (empty -> .)
    CONST_CHAR      reduce using rule 162 (empty -> .)
    CONST_STRING    reduce using rule 162 (empty -> .)
    CONST_BOOL      reduce using rule 162 (empty -> .)

    exp                            shift and go to state 82
    term                           shift and go to state 76
    factor                         shift and go to state 77
    empty                          shift and go to state 83
    fact_neg                       shift and go to state 80
    rel_expression_1               shift and go to state 183

state 140

    (132) rel_exp_1_op -> > . rel_expression_1
    (129) rel_expression_1 -> . exp rel_exp_1_op
    (135) exp -> . term exp_op
    (139) term -> . factor term_op
    (153) factor -> . fact_neg fact_body
    (154) fact_neg -> . -
    (155) fact_neg -> . ~
    (156) fact_neg -> . empty
    (162) empty -> .

    -               shift and go to state 85
    ~               shift and go to state 84
    (               reduce using rule 162 (empty -> .)
    ID              reduce using rule 162 (empty -> .)
    CONST_I         reduce using rule 162 (empty -> .)
    CONST_F         reduce using rule 162 (empty -> .)
    CONST_CHAR      reduce using rule 162 (empty -> .)
    CONST_STRING    reduce using rule 162 (empty -> .)
    CONST_BOOL      reduce using rule 162 (empty -> .)

    exp                            shift and go to state 82
    term                           shift and go to state 76
    factor                         shift and go to state 77
    empty                          shift and go to state 83
    fact_neg                       shift and go to state 80
    rel_expression_1               shift and go to state 184

state 141

    (134) rel_exp_1_op -> empty .

    EQUAL           reduce using rule 134 (rel_exp_1_op -> empty .)
    NOT_EQUAL       reduce using rule 134 (rel_exp_1_op -> empty .)
    AND             reduce using rule 134 (rel_exp_1_op -> empty .)
    OR              reduce using rule 134 (rel_exp_1_op -> empty .)
    XOR             reduce using rule 134 (rel_exp_1_op -> empty .)
    ,               reduce using rule 134 (rel_exp_1_op -> empty .)
    ]               reduce using rule 134 (rel_exp_1_op -> empty .)
    ;               reduce using rule 134 (rel_exp_1_op -> empty .)
    )               reduce using rule 134 (rel_exp_1_op -> empty .)


state 142

    (133) rel_exp_1_op -> GREATER_EQUAL_THAN . rel_expression_1
    (129) rel_expression_1 -> . exp rel_exp_1_op
    (135) exp -> . term exp_op
    (139) term -> . factor term_op
    (153) factor -> . fact_neg fact_body
    (154) fact_neg -> . -
    (155) fact_neg -> . ~
    (156) fact_neg -> . empty
    (162) empty -> .

    -               shift and go to state 85
    ~               shift and go to state 84
    (               reduce using rule 162 (empty -> .)
    ID              reduce using rule 162 (empty -> .)
    CONST_I         reduce using rule 162 (empty -> .)
    CONST_F         reduce using rule 162 (empty -> .)
    CONST_CHAR      reduce using rule 162 (empty -> .)
    CONST_STRING    reduce using rule 162 (empty -> .)
    CONST_BOOL      reduce using rule 162 (empty -> .)

    exp                            shift and go to state 82
    term                           shift and go to state 76
    factor                         shift and go to state 77
    empty                          shift and go to state 83
    fact_neg                       shift and go to state 80
    rel_expression_1               shift and go to state 185

state 143

    (48) id_var_acc -> . ID . id_mat_acc
    (46) id_mat_acc -> . mat_vec_access
    (47) id_mat_acc -> . empty
    (65) mat_vec_access -> . [ mat_vec_index mat_access ]
    (162) empty -> .

    [               shift and go to state 58
    =               reduce using rule 162 (empty -> .)
    *               reduce using rule 162 (empty -> .)
    /               reduce using rule 162 (empty -> .)
    %               reduce using rule 162 (empty -> .)
    +               reduce using rule 162 (empty -> .)
    -               reduce using rule 162 (empty -> .)
    <               reduce using rule 162 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 162 (empty -> .)
    >               reduce using rule 162 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 162 (empty -> .)
    EQUAL           reduce using rule 162 (empty -> .)
    NOT_EQUAL       reduce using rule 162 (empty -> .)
    AND             reduce using rule 162 (empty -> .)
    OR              reduce using rule 162 (empty -> .)
    XOR             reduce using rule 162 (empty -> .)
    ,               reduce using rule 162 (empty -> .)
    ]               reduce using rule 162 (empty -> .)
    ;               reduce using rule 162 (empty -> .)
    )               reduce using rule 162 (empty -> .)

    id_mat_acc                     shift and go to state 186
    mat_vec_access                 shift and go to state 56
    empty                          shift and go to state 60

state 144

    (28) vars -> VAR ids : vars_type . ;

    ;               shift and go to state 187


state 145

    (29) vars_type -> type . vars_tp_a
    (31) vars_tp_a -> . = expression
    (32) vars_tp_a -> . empty
    (162) empty -> .

    =               shift and go to state 189
    ;               reduce using rule 162 (empty -> .)

    vars_tp_a                      shift and go to state 188
    empty                          shift and go to state 190

state 146

    (30) vars_type -> ID . vars_tp_b
    (33) vars_tp_b -> . = vars_assgn
    (34) vars_tp_b -> . empty
    (162) empty -> .

    =               shift and go to state 192
    ;               reduce using rule 162 (empty -> .)

    vars_tp_b                      shift and go to state 191
    empty                          shift and go to state 193

state 147

    (26) m_ids -> , ids .

    :               reduce using rule 26 (m_ids -> , ids .)


state 148

    (37) vec_mat_type -> type .

    [               reduce using rule 37 (vec_mat_type -> type .)


state 149

    (42) matrix -> MAT ids : vec_mat_type . [ CONST_I , CONST_I ] mat_assgn ;

    [               shift and go to state 194


state 150

    (38) vec_mat_type -> ID .

    [               reduce using rule 38 (vec_mat_type -> ID .)


state 151

    (39) vector -> VEC ids : vec_mat_type . [ CONST_I ] vec_assgn ;

    [               shift and go to state 195


state 152

    (82) param_type -> ID .

    [               reduce using rule 82 (param_type -> ID .)
    ,               reduce using rule 82 (param_type -> ID .)
    )               reduce using rule 82 (param_type -> ID .)


state 153

    (78) method_param -> ID : param_type . param_mat_vec more_params
    (83) param_mat_vec -> . [ param_mat ]
    (84) param_mat_vec -> . empty
    (162) empty -> .

    [               shift and go to state 196
    ,               reduce using rule 162 (empty -> .)
    )               reduce using rule 162 (empty -> .)

    empty                          shift and go to state 197
    param_mat_vec                  shift and go to state 198

state 154

    (81) param_type -> type .

    [               reduce using rule 81 (param_type -> type .)
    ,               reduce using rule 81 (param_type -> type .)
    )               reduce using rule 81 (param_type -> type .)


state 155

    (70) method -> func_spec ( method_param ) block .

    CONSTRUCTOR     reduce using rule 70 (method -> func_spec ( method_param ) block .)
    PUBLIC          reduce using rule 70 (method -> func_spec ( method_param ) block .)
    PRIVATE         reduce using rule 70 (method -> func_spec ( method_param ) block .)
    }               reduce using rule 70 (method -> func_spec ( method_param ) block .)


state 156

    (92) block -> { . bstmt }
    (93) bstmt -> . statement bstmt
    (94) bstmt -> . empty
    (95) statement -> . assignment
    (96) statement -> . condition
    (97) statement -> . loop
    (98) statement -> . in_out
    (99) statement -> . return
    (100) statement -> . var_decl
    (101) statement -> . CONSTANT var_decl
    (162) empty -> .
    (50) assignment -> . ID id_access = ass_value ;
    (102) condition -> . IF cond_body
    (107) loop -> . for_loop
    (108) loop -> . while_loop
    (111) in_out -> . PRINT ( print_exp ) ;
    (112) in_out -> . SCAN ( ID id_access ) ;
    (117) return -> . RETURN ret_val ;
    (7) var_decl -> . vars
    (8) var_decl -> . vector
    (9) var_decl -> . matrix
    (109) for_loop -> . FOR ( assignment expression ; ID = expression ) block
    (110) while_loop -> . WHILE ( expression ) block
    (28) vars -> . VAR ids : vars_type ;
    (39) vector -> . VEC ids : vec_mat_type [ CONST_I ] vec_assgn ;
    (42) matrix -> . MAT ids : vec_mat_type [ CONST_I , CONST_I ] mat_assgn ;

    CONSTANT        shift and go to state 216
    }               reduce using rule 162 (empty -> .)
    ID              shift and go to state 33
    IF              shift and go to state 211
    PRINT           shift and go to state 214
    SCAN            shift and go to state 206
    RETURN          shift and go to state 210
    FOR             shift and go to state 202
    WHILE           shift and go to state 207
    VAR             shift and go to state 44
    VEC             shift and go to state 48
    MAT             shift and go to state 45

    vector                         shift and go to state 38
    return                         shift and go to state 199
    var_decl                       shift and go to state 200
    in_out                         shift and go to state 201
    empty                          shift and go to state 208
    bstmt                          shift and go to state 203
    statement                      shift and go to state 209
    while_loop                     shift and go to state 204
    loop                           shift and go to state 205
    vars                           shift and go to state 47
    assignment                     shift and go to state 212
    condition                      shift and go to state 213
    matrix                         shift and go to state 40
    for_loop                       shift and go to state 215

state 157

    (88) func_call -> ( . func_param )
    (89) func_param -> . expression more_fpar
    (120) expression -> . rel_expression expression_op
    (125) rel_expression -> . rel_expression_1 rel_exp_op
    (129) rel_expression_1 -> . exp rel_exp_1_op
    (135) exp -> . term exp_op
    (139) term -> . factor term_op
    (153) factor -> . fact_neg fact_body
    (154) fact_neg -> . -
    (155) fact_neg -> . ~
    (156) fact_neg -> . empty
    (162) empty -> .

    -               shift and go to state 85
    ~               shift and go to state 84
    (               reduce using rule 162 (empty -> .)
    ID              reduce using rule 162 (empty -> .)
    CONST_I         reduce using rule 162 (empty -> .)
    CONST_F         reduce using rule 162 (empty -> .)
    CONST_CHAR      reduce using rule 162 (empty -> .)
    CONST_STRING    reduce using rule 162 (empty -> .)
    CONST_BOOL      reduce using rule 162 (empty -> .)

    rel_expression                 shift and go to state 75
    term                           shift and go to state 76
    factor                         shift and go to state 77
    fact_neg                       shift and go to state 80
    rel_expression_1               shift and go to state 79
    exp                            shift and go to state 82
    empty                          shift and go to state 83
    func_param                     shift and go to state 217
    expression                     shift and go to state 218

state 158

    (87) create_obj -> NEW func_call .

    ,               reduce using rule 87 (create_obj -> NEW func_call .)
    ]               reduce using rule 87 (create_obj -> NEW func_call .)
    ;               reduce using rule 87 (create_obj -> NEW func_call .)


state 159

    (50) assignment -> ID id_access = ass_value ; .

    CONSTANT        reduce using rule 50 (assignment -> ID id_access = ass_value ; .)
    ID              reduce using rule 50 (assignment -> ID id_access = ass_value ; .)
    IF              reduce using rule 50 (assignment -> ID id_access = ass_value ; .)
    PRINT           reduce using rule 50 (assignment -> ID id_access = ass_value ; .)
    SCAN            reduce using rule 50 (assignment -> ID id_access = ass_value ; .)
    RETURN          reduce using rule 50 (assignment -> ID id_access = ass_value ; .)
    FOR             reduce using rule 50 (assignment -> ID id_access = ass_value ; .)
    WHILE           reduce using rule 50 (assignment -> ID id_access = ass_value ; .)
    VAR             reduce using rule 50 (assignment -> ID id_access = ass_value ; .)
    VEC             reduce using rule 50 (assignment -> ID id_access = ass_value ; .)
    MAT             reduce using rule 50 (assignment -> ID id_access = ass_value ; .)
    }               reduce using rule 50 (assignment -> ID id_access = ass_value ; .)
    -               reduce using rule 50 (assignment -> ID id_access = ass_value ; .)
    ~               reduce using rule 50 (assignment -> ID id_access = ass_value ; .)
    (               reduce using rule 50 (assignment -> ID id_access = ass_value ; .)
    CONST_I         reduce using rule 50 (assignment -> ID id_access = ass_value ; .)
    CONST_F         reduce using rule 50 (assignment -> ID id_access = ass_value ; .)
    CONST_CHAR      reduce using rule 50 (assignment -> ID id_access = ass_value ; .)
    CONST_STRING    reduce using rule 50 (assignment -> ID id_access = ass_value ; .)
    CONST_BOOL      reduce using rule 50 (assignment -> ID id_access = ass_value ; .)
    CONSTRUCTOR     reduce using rule 50 (assignment -> ID id_access = ass_value ; .)
    PUBLIC          reduce using rule 50 (assignment -> ID id_access = ass_value ; .)
    PRIVATE         reduce using rule 50 (assignment -> ID id_access = ass_value ; .)


state 160

    (57) vec_object -> create_obj .

    ,               reduce using rule 57 (vec_object -> create_obj .)
    ]               reduce using rule 57 (vec_object -> create_obj .)


state 161

    (55) vector_exp -> [ vec_elem . ]

    ]               shift and go to state 219


state 162

    (56) vec_elem -> vec_object . vec_more
    (59) vec_more -> . , vec_elem
    (60) vec_more -> . empty
    (162) empty -> .

    ,               shift and go to state 222
    ]               reduce using rule 162 (empty -> .)

    vec_more                       shift and go to state 220
    empty                          shift and go to state 221

state 163

    (58) vec_object -> expression .

    ,               reduce using rule 58 (vec_object -> expression .)
    ]               reduce using rule 58 (vec_object -> expression .)


state 164

    (61) matrix_exp -> { mat_elem . }

    }               shift and go to state 223


state 165

    (62) mat_elem -> vector_exp . mat_more
    (63) mat_more -> . , mat_elem
    (64) mat_more -> . empty
    (162) empty -> .

    ,               shift and go to state 224
    }               reduce using rule 162 (empty -> .)

    empty                          shift and go to state 225
    mat_more                       shift and go to state 226

state 166

    (121) expression_op -> AND expression .

    ,               reduce using rule 121 (expression_op -> AND expression .)
    ]               reduce using rule 121 (expression_op -> AND expression .)
    ;               reduce using rule 121 (expression_op -> AND expression .)
    )               reduce using rule 121 (expression_op -> AND expression .)


state 167

    (122) expression_op -> OR expression .

    ,               reduce using rule 122 (expression_op -> OR expression .)
    ]               reduce using rule 122 (expression_op -> OR expression .)
    ;               reduce using rule 122 (expression_op -> OR expression .)
    )               reduce using rule 122 (expression_op -> OR expression .)


state 168

    (123) expression_op -> XOR expression .

    ,               reduce using rule 123 (expression_op -> XOR expression .)
    ]               reduce using rule 123 (expression_op -> XOR expression .)
    ;               reduce using rule 123 (expression_op -> XOR expression .)
    )               reduce using rule 123 (expression_op -> XOR expression .)


state 169

    (137) exp_op -> - exp .

    <               reduce using rule 137 (exp_op -> - exp .)
    LESS_EQUAL_THAN reduce using rule 137 (exp_op -> - exp .)
    >               reduce using rule 137 (exp_op -> - exp .)
    GREATER_EQUAL_THAN reduce using rule 137 (exp_op -> - exp .)
    EQUAL           reduce using rule 137 (exp_op -> - exp .)
    NOT_EQUAL       reduce using rule 137 (exp_op -> - exp .)
    AND             reduce using rule 137 (exp_op -> - exp .)
    OR              reduce using rule 137 (exp_op -> - exp .)
    XOR             reduce using rule 137 (exp_op -> - exp .)
    ,               reduce using rule 137 (exp_op -> - exp .)
    ]               reduce using rule 137 (exp_op -> - exp .)
    ;               reduce using rule 137 (exp_op -> - exp .)
    )               reduce using rule 137 (exp_op -> - exp .)


state 170

    (136) exp_op -> + exp .

    <               reduce using rule 136 (exp_op -> + exp .)
    LESS_EQUAL_THAN reduce using rule 136 (exp_op -> + exp .)
    >               reduce using rule 136 (exp_op -> + exp .)
    GREATER_EQUAL_THAN reduce using rule 136 (exp_op -> + exp .)
    EQUAL           reduce using rule 136 (exp_op -> + exp .)
    NOT_EQUAL       reduce using rule 136 (exp_op -> + exp .)
    AND             reduce using rule 136 (exp_op -> + exp .)
    OR              reduce using rule 136 (exp_op -> + exp .)
    XOR             reduce using rule 136 (exp_op -> + exp .)
    ,               reduce using rule 136 (exp_op -> + exp .)
    ]               reduce using rule 136 (exp_op -> + exp .)
    ;               reduce using rule 136 (exp_op -> + exp .)
    )               reduce using rule 136 (exp_op -> + exp .)


state 171

    (141) term_op -> / term .

    +               reduce using rule 141 (term_op -> / term .)
    -               reduce using rule 141 (term_op -> / term .)
    <               reduce using rule 141 (term_op -> / term .)
    LESS_EQUAL_THAN reduce using rule 141 (term_op -> / term .)
    >               reduce using rule 141 (term_op -> / term .)
    GREATER_EQUAL_THAN reduce using rule 141 (term_op -> / term .)
    EQUAL           reduce using rule 141 (term_op -> / term .)
    NOT_EQUAL       reduce using rule 141 (term_op -> / term .)
    AND             reduce using rule 141 (term_op -> / term .)
    OR              reduce using rule 141 (term_op -> / term .)
    XOR             reduce using rule 141 (term_op -> / term .)
    ,               reduce using rule 141 (term_op -> / term .)
    ]               reduce using rule 141 (term_op -> / term .)
    ;               reduce using rule 141 (term_op -> / term .)
    )               reduce using rule 141 (term_op -> / term .)


state 172

    (140) term_op -> * term .

    +               reduce using rule 140 (term_op -> * term .)
    -               reduce using rule 140 (term_op -> * term .)
    <               reduce using rule 140 (term_op -> * term .)
    LESS_EQUAL_THAN reduce using rule 140 (term_op -> * term .)
    >               reduce using rule 140 (term_op -> * term .)
    GREATER_EQUAL_THAN reduce using rule 140 (term_op -> * term .)
    EQUAL           reduce using rule 140 (term_op -> * term .)
    NOT_EQUAL       reduce using rule 140 (term_op -> * term .)
    AND             reduce using rule 140 (term_op -> * term .)
    OR              reduce using rule 140 (term_op -> * term .)
    XOR             reduce using rule 140 (term_op -> * term .)
    ,               reduce using rule 140 (term_op -> * term .)
    ]               reduce using rule 140 (term_op -> * term .)
    ;               reduce using rule 140 (term_op -> * term .)
    )               reduce using rule 140 (term_op -> * term .)


state 173

    (142) term_op -> % term .

    +               reduce using rule 142 (term_op -> % term .)
    -               reduce using rule 142 (term_op -> % term .)
    <               reduce using rule 142 (term_op -> % term .)
    LESS_EQUAL_THAN reduce using rule 142 (term_op -> % term .)
    >               reduce using rule 142 (term_op -> % term .)
    GREATER_EQUAL_THAN reduce using rule 142 (term_op -> % term .)
    EQUAL           reduce using rule 142 (term_op -> % term .)
    NOT_EQUAL       reduce using rule 142 (term_op -> % term .)
    AND             reduce using rule 142 (term_op -> % term .)
    OR              reduce using rule 142 (term_op -> % term .)
    XOR             reduce using rule 142 (term_op -> % term .)
    ,               reduce using rule 142 (term_op -> % term .)
    ]               reduce using rule 142 (term_op -> % term .)
    ;               reduce using rule 142 (term_op -> % term .)
    )               reduce using rule 142 (term_op -> % term .)


state 174

    (68) mat_access -> , mat_vec_index .

    ]               reduce using rule 68 (mat_access -> , mat_vec_index .)


state 175

    (65) mat_vec_access -> [ mat_vec_index mat_access ] .

    =               reduce using rule 65 (mat_vec_access -> [ mat_vec_index mat_access ] .)
    *               reduce using rule 65 (mat_vec_access -> [ mat_vec_index mat_access ] .)
    /               reduce using rule 65 (mat_vec_access -> [ mat_vec_index mat_access ] .)
    %               reduce using rule 65 (mat_vec_access -> [ mat_vec_index mat_access ] .)
    +               reduce using rule 65 (mat_vec_access -> [ mat_vec_index mat_access ] .)
    -               reduce using rule 65 (mat_vec_access -> [ mat_vec_index mat_access ] .)
    <               reduce using rule 65 (mat_vec_access -> [ mat_vec_index mat_access ] .)
    LESS_EQUAL_THAN reduce using rule 65 (mat_vec_access -> [ mat_vec_index mat_access ] .)
    >               reduce using rule 65 (mat_vec_access -> [ mat_vec_index mat_access ] .)
    GREATER_EQUAL_THAN reduce using rule 65 (mat_vec_access -> [ mat_vec_index mat_access ] .)
    EQUAL           reduce using rule 65 (mat_vec_access -> [ mat_vec_index mat_access ] .)
    NOT_EQUAL       reduce using rule 65 (mat_vec_access -> [ mat_vec_index mat_access ] .)
    AND             reduce using rule 65 (mat_vec_access -> [ mat_vec_index mat_access ] .)
    OR              reduce using rule 65 (mat_vec_access -> [ mat_vec_index mat_access ] .)
    XOR             reduce using rule 65 (mat_vec_access -> [ mat_vec_index mat_access ] .)
    ,               reduce using rule 65 (mat_vec_access -> [ mat_vec_index mat_access ] .)
    ]               reduce using rule 65 (mat_vec_access -> [ mat_vec_index mat_access ] .)
    ;               reduce using rule 65 (mat_vec_access -> [ mat_vec_index mat_access ] .)
    )               reduce using rule 65 (mat_vec_access -> [ mat_vec_index mat_access ] .)
    .               reduce using rule 65 (mat_vec_access -> [ mat_vec_index mat_access ] .)


state 176

    (127) rel_exp_op -> NOT_EQUAL rel_expression .

    AND             reduce using rule 127 (rel_exp_op -> NOT_EQUAL rel_expression .)
    OR              reduce using rule 127 (rel_exp_op -> NOT_EQUAL rel_expression .)
    XOR             reduce using rule 127 (rel_exp_op -> NOT_EQUAL rel_expression .)
    ,               reduce using rule 127 (rel_exp_op -> NOT_EQUAL rel_expression .)
    ]               reduce using rule 127 (rel_exp_op -> NOT_EQUAL rel_expression .)
    ;               reduce using rule 127 (rel_exp_op -> NOT_EQUAL rel_expression .)
    )               reduce using rule 127 (rel_exp_op -> NOT_EQUAL rel_expression .)


state 177

    (126) rel_exp_op -> EQUAL rel_expression .

    AND             reduce using rule 126 (rel_exp_op -> EQUAL rel_expression .)
    OR              reduce using rule 126 (rel_exp_op -> EQUAL rel_expression .)
    XOR             reduce using rule 126 (rel_exp_op -> EQUAL rel_expression .)
    ,               reduce using rule 126 (rel_exp_op -> EQUAL rel_expression .)
    ]               reduce using rule 126 (rel_exp_op -> EQUAL rel_expression .)
    ;               reduce using rule 126 (rel_exp_op -> EQUAL rel_expression .)
    )               reduce using rule 126 (rel_exp_op -> EQUAL rel_expression .)


state 178

    (157) fact_body -> ( expression . )

    )               shift and go to state 227


state 179

    (159) fact_body -> ID fact_id .

    *               reduce using rule 159 (fact_body -> ID fact_id .)
    /               reduce using rule 159 (fact_body -> ID fact_id .)
    %               reduce using rule 159 (fact_body -> ID fact_id .)
    +               reduce using rule 159 (fact_body -> ID fact_id .)
    -               reduce using rule 159 (fact_body -> ID fact_id .)
    <               reduce using rule 159 (fact_body -> ID fact_id .)
    LESS_EQUAL_THAN reduce using rule 159 (fact_body -> ID fact_id .)
    >               reduce using rule 159 (fact_body -> ID fact_id .)
    GREATER_EQUAL_THAN reduce using rule 159 (fact_body -> ID fact_id .)
    EQUAL           reduce using rule 159 (fact_body -> ID fact_id .)
    NOT_EQUAL       reduce using rule 159 (fact_body -> ID fact_id .)
    AND             reduce using rule 159 (fact_body -> ID fact_id .)
    OR              reduce using rule 159 (fact_body -> ID fact_id .)
    XOR             reduce using rule 159 (fact_body -> ID fact_id .)
    ,               reduce using rule 159 (fact_body -> ID fact_id .)
    ]               reduce using rule 159 (fact_body -> ID fact_id .)
    ;               reduce using rule 159 (fact_body -> ID fact_id .)
    )               reduce using rule 159 (fact_body -> ID fact_id .)


state 180

    (161) fact_id -> id_access .

    *               reduce using rule 161 (fact_id -> id_access .)
    /               reduce using rule 161 (fact_id -> id_access .)
    %               reduce using rule 161 (fact_id -> id_access .)
    +               reduce using rule 161 (fact_id -> id_access .)
    -               reduce using rule 161 (fact_id -> id_access .)
    <               reduce using rule 161 (fact_id -> id_access .)
    LESS_EQUAL_THAN reduce using rule 161 (fact_id -> id_access .)
    >               reduce using rule 161 (fact_id -> id_access .)
    GREATER_EQUAL_THAN reduce using rule 161 (fact_id -> id_access .)
    EQUAL           reduce using rule 161 (fact_id -> id_access .)
    NOT_EQUAL       reduce using rule 161 (fact_id -> id_access .)
    AND             reduce using rule 161 (fact_id -> id_access .)
    OR              reduce using rule 161 (fact_id -> id_access .)
    XOR             reduce using rule 161 (fact_id -> id_access .)
    ,               reduce using rule 161 (fact_id -> id_access .)
    ]               reduce using rule 161 (fact_id -> id_access .)
    ;               reduce using rule 161 (fact_id -> id_access .)
    )               reduce using rule 161 (fact_id -> id_access .)


state 181

    (160) fact_id -> func_call .

    *               reduce using rule 160 (fact_id -> func_call .)
    /               reduce using rule 160 (fact_id -> func_call .)
    %               reduce using rule 160 (fact_id -> func_call .)
    +               reduce using rule 160 (fact_id -> func_call .)
    -               reduce using rule 160 (fact_id -> func_call .)
    <               reduce using rule 160 (fact_id -> func_call .)
    LESS_EQUAL_THAN reduce using rule 160 (fact_id -> func_call .)
    >               reduce using rule 160 (fact_id -> func_call .)
    GREATER_EQUAL_THAN reduce using rule 160 (fact_id -> func_call .)
    EQUAL           reduce using rule 160 (fact_id -> func_call .)
    NOT_EQUAL       reduce using rule 160 (fact_id -> func_call .)
    AND             reduce using rule 160 (fact_id -> func_call .)
    OR              reduce using rule 160 (fact_id -> func_call .)
    XOR             reduce using rule 160 (fact_id -> func_call .)
    ,               reduce using rule 160 (fact_id -> func_call .)
    ]               reduce using rule 160 (fact_id -> func_call .)
    ;               reduce using rule 160 (fact_id -> func_call .)
    )               reduce using rule 160 (fact_id -> func_call .)


state 182

    (131) rel_exp_1_op -> LESS_EQUAL_THAN rel_expression_1 .

    EQUAL           reduce using rule 131 (rel_exp_1_op -> LESS_EQUAL_THAN rel_expression_1 .)
    NOT_EQUAL       reduce using rule 131 (rel_exp_1_op -> LESS_EQUAL_THAN rel_expression_1 .)
    AND             reduce using rule 131 (rel_exp_1_op -> LESS_EQUAL_THAN rel_expression_1 .)
    OR              reduce using rule 131 (rel_exp_1_op -> LESS_EQUAL_THAN rel_expression_1 .)
    XOR             reduce using rule 131 (rel_exp_1_op -> LESS_EQUAL_THAN rel_expression_1 .)
    ,               reduce using rule 131 (rel_exp_1_op -> LESS_EQUAL_THAN rel_expression_1 .)
    ]               reduce using rule 131 (rel_exp_1_op -> LESS_EQUAL_THAN rel_expression_1 .)
    ;               reduce using rule 131 (rel_exp_1_op -> LESS_EQUAL_THAN rel_expression_1 .)
    )               reduce using rule 131 (rel_exp_1_op -> LESS_EQUAL_THAN rel_expression_1 .)


state 183

    (130) rel_exp_1_op -> < rel_expression_1 .

    EQUAL           reduce using rule 130 (rel_exp_1_op -> < rel_expression_1 .)
    NOT_EQUAL       reduce using rule 130 (rel_exp_1_op -> < rel_expression_1 .)
    AND             reduce using rule 130 (rel_exp_1_op -> < rel_expression_1 .)
    OR              reduce using rule 130 (rel_exp_1_op -> < rel_expression_1 .)
    XOR             reduce using rule 130 (rel_exp_1_op -> < rel_expression_1 .)
    ,               reduce using rule 130 (rel_exp_1_op -> < rel_expression_1 .)
    ]               reduce using rule 130 (rel_exp_1_op -> < rel_expression_1 .)
    ;               reduce using rule 130 (rel_exp_1_op -> < rel_expression_1 .)
    )               reduce using rule 130 (rel_exp_1_op -> < rel_expression_1 .)


state 184

    (132) rel_exp_1_op -> > rel_expression_1 .

    EQUAL           reduce using rule 132 (rel_exp_1_op -> > rel_expression_1 .)
    NOT_EQUAL       reduce using rule 132 (rel_exp_1_op -> > rel_expression_1 .)
    AND             reduce using rule 132 (rel_exp_1_op -> > rel_expression_1 .)
    OR              reduce using rule 132 (rel_exp_1_op -> > rel_expression_1 .)
    XOR             reduce using rule 132 (rel_exp_1_op -> > rel_expression_1 .)
    ,               reduce using rule 132 (rel_exp_1_op -> > rel_expression_1 .)
    ]               reduce using rule 132 (rel_exp_1_op -> > rel_expression_1 .)
    ;               reduce using rule 132 (rel_exp_1_op -> > rel_expression_1 .)
    )               reduce using rule 132 (rel_exp_1_op -> > rel_expression_1 .)


state 185

    (133) rel_exp_1_op -> GREATER_EQUAL_THAN rel_expression_1 .

    EQUAL           reduce using rule 133 (rel_exp_1_op -> GREATER_EQUAL_THAN rel_expression_1 .)
    NOT_EQUAL       reduce using rule 133 (rel_exp_1_op -> GREATER_EQUAL_THAN rel_expression_1 .)
    AND             reduce using rule 133 (rel_exp_1_op -> GREATER_EQUAL_THAN rel_expression_1 .)
    OR              reduce using rule 133 (rel_exp_1_op -> GREATER_EQUAL_THAN rel_expression_1 .)
    XOR             reduce using rule 133 (rel_exp_1_op -> GREATER_EQUAL_THAN rel_expression_1 .)
    ,               reduce using rule 133 (rel_exp_1_op -> GREATER_EQUAL_THAN rel_expression_1 .)
    ]               reduce using rule 133 (rel_exp_1_op -> GREATER_EQUAL_THAN rel_expression_1 .)
    ;               reduce using rule 133 (rel_exp_1_op -> GREATER_EQUAL_THAN rel_expression_1 .)
    )               reduce using rule 133 (rel_exp_1_op -> GREATER_EQUAL_THAN rel_expression_1 .)


state 186

    (48) id_var_acc -> . ID id_mat_acc .

    =               reduce using rule 48 (id_var_acc -> . ID id_mat_acc .)
    *               reduce using rule 48 (id_var_acc -> . ID id_mat_acc .)
    /               reduce using rule 48 (id_var_acc -> . ID id_mat_acc .)
    %               reduce using rule 48 (id_var_acc -> . ID id_mat_acc .)
    +               reduce using rule 48 (id_var_acc -> . ID id_mat_acc .)
    -               reduce using rule 48 (id_var_acc -> . ID id_mat_acc .)
    <               reduce using rule 48 (id_var_acc -> . ID id_mat_acc .)
    LESS_EQUAL_THAN reduce using rule 48 (id_var_acc -> . ID id_mat_acc .)
    >               reduce using rule 48 (id_var_acc -> . ID id_mat_acc .)
    GREATER_EQUAL_THAN reduce using rule 48 (id_var_acc -> . ID id_mat_acc .)
    EQUAL           reduce using rule 48 (id_var_acc -> . ID id_mat_acc .)
    NOT_EQUAL       reduce using rule 48 (id_var_acc -> . ID id_mat_acc .)
    AND             reduce using rule 48 (id_var_acc -> . ID id_mat_acc .)
    OR              reduce using rule 48 (id_var_acc -> . ID id_mat_acc .)
    XOR             reduce using rule 48 (id_var_acc -> . ID id_mat_acc .)
    ,               reduce using rule 48 (id_var_acc -> . ID id_mat_acc .)
    ]               reduce using rule 48 (id_var_acc -> . ID id_mat_acc .)
    ;               reduce using rule 48 (id_var_acc -> . ID id_mat_acc .)
    )               reduce using rule 48 (id_var_acc -> . ID id_mat_acc .)


state 187

    (28) vars -> VAR ids : vars_type ; .

    CONSTANT        reduce using rule 28 (vars -> VAR ids : vars_type ; .)
    ID              reduce using rule 28 (vars -> VAR ids : vars_type ; .)
    IF              reduce using rule 28 (vars -> VAR ids : vars_type ; .)
    PRINT           reduce using rule 28 (vars -> VAR ids : vars_type ; .)
    SCAN            reduce using rule 28 (vars -> VAR ids : vars_type ; .)
    RETURN          reduce using rule 28 (vars -> VAR ids : vars_type ; .)
    FOR             reduce using rule 28 (vars -> VAR ids : vars_type ; .)
    WHILE           reduce using rule 28 (vars -> VAR ids : vars_type ; .)
    VAR             reduce using rule 28 (vars -> VAR ids : vars_type ; .)
    VEC             reduce using rule 28 (vars -> VAR ids : vars_type ; .)
    MAT             reduce using rule 28 (vars -> VAR ids : vars_type ; .)
    }               reduce using rule 28 (vars -> VAR ids : vars_type ; .)
    PUBLIC          reduce using rule 28 (vars -> VAR ids : vars_type ; .)
    PRIVATE         reduce using rule 28 (vars -> VAR ids : vars_type ; .)
    CONSTRUCTOR     reduce using rule 28 (vars -> VAR ids : vars_type ; .)


state 188

    (29) vars_type -> type vars_tp_a .

    ;               reduce using rule 29 (vars_type -> type vars_tp_a .)


state 189

    (31) vars_tp_a -> = . expression
    (120) expression -> . rel_expression expression_op
    (125) rel_expression -> . rel_expression_1 rel_exp_op
    (129) rel_expression_1 -> . exp rel_exp_1_op
    (135) exp -> . term exp_op
    (139) term -> . factor term_op
    (153) factor -> . fact_neg fact_body
    (154) fact_neg -> . -
    (155) fact_neg -> . ~
    (156) fact_neg -> . empty
    (162) empty -> .

    -               shift and go to state 85
    ~               shift and go to state 84
    (               reduce using rule 162 (empty -> .)
    ID              reduce using rule 162 (empty -> .)
    CONST_I         reduce using rule 162 (empty -> .)
    CONST_F         reduce using rule 162 (empty -> .)
    CONST_CHAR      reduce using rule 162 (empty -> .)
    CONST_STRING    reduce using rule 162 (empty -> .)
    CONST_BOOL      reduce using rule 162 (empty -> .)

    rel_expression                 shift and go to state 75
    term                           shift and go to state 76
    factor                         shift and go to state 77
    fact_neg                       shift and go to state 80
    rel_expression_1               shift and go to state 79
    exp                            shift and go to state 82
    empty                          shift and go to state 83
    expression                     shift and go to state 228

state 190

    (32) vars_tp_a -> empty .

    ;               reduce using rule 32 (vars_tp_a -> empty .)


state 191

    (30) vars_type -> ID vars_tp_b .

    ;               reduce using rule 30 (vars_type -> ID vars_tp_b .)


state 192

    (33) vars_tp_b -> = . vars_assgn
    (35) vars_assgn -> . create_obj
    (36) vars_assgn -> . expression
    (87) create_obj -> . NEW func_call
    (120) expression -> . rel_expression expression_op
    (125) rel_expression -> . rel_expression_1 rel_exp_op
    (129) rel_expression_1 -> . exp rel_exp_1_op
    (135) exp -> . term exp_op
    (139) term -> . factor term_op
    (153) factor -> . fact_neg fact_body
    (154) fact_neg -> . -
    (155) fact_neg -> . ~
    (156) fact_neg -> . empty
    (162) empty -> .

    NEW             shift and go to state 99
    -               shift and go to state 85
    ~               shift and go to state 84
    (               reduce using rule 162 (empty -> .)
    ID              reduce using rule 162 (empty -> .)
    CONST_I         reduce using rule 162 (empty -> .)
    CONST_F         reduce using rule 162 (empty -> .)
    CONST_CHAR      reduce using rule 162 (empty -> .)
    CONST_STRING    reduce using rule 162 (empty -> .)
    CONST_BOOL      reduce using rule 162 (empty -> .)

    rel_expression                 shift and go to state 75
    term                           shift and go to state 76
    factor                         shift and go to state 77
    vars_assgn                     shift and go to state 229
    fact_neg                       shift and go to state 80
    rel_expression_1               shift and go to state 79
    exp                            shift and go to state 82
    empty                          shift and go to state 83
    create_obj                     shift and go to state 230
    expression                     shift and go to state 231

state 193

    (34) vars_tp_b -> empty .

    ;               reduce using rule 34 (vars_tp_b -> empty .)


state 194

    (42) matrix -> MAT ids : vec_mat_type [ . CONST_I , CONST_I ] mat_assgn ;

    CONST_I         shift and go to state 232


state 195

    (39) vector -> VEC ids : vec_mat_type [ . CONST_I ] vec_assgn ;

    CONST_I         shift and go to state 233


state 196

    (83) param_mat_vec -> [ . param_mat ]
    (85) param_mat -> . ,
    (86) param_mat -> . empty
    (162) empty -> .

    ,               shift and go to state 234
    ]               reduce using rule 162 (empty -> .)

    empty                          shift and go to state 236
    param_mat                      shift and go to state 235

state 197

    (84) param_mat_vec -> empty .

    ,               reduce using rule 84 (param_mat_vec -> empty .)
    )               reduce using rule 84 (param_mat_vec -> empty .)


state 198

    (78) method_param -> ID : param_type param_mat_vec . more_params
    (79) more_params -> . , method_param
    (80) more_params -> . empty
    (162) empty -> .

    ,               shift and go to state 238
    )               reduce using rule 162 (empty -> .)

    empty                          shift and go to state 239
    more_params                    shift and go to state 237

state 199

    (99) statement -> return .

    CONSTANT        reduce using rule 99 (statement -> return .)
    ID              reduce using rule 99 (statement -> return .)
    IF              reduce using rule 99 (statement -> return .)
    PRINT           reduce using rule 99 (statement -> return .)
    SCAN            reduce using rule 99 (statement -> return .)
    RETURN          reduce using rule 99 (statement -> return .)
    FOR             reduce using rule 99 (statement -> return .)
    WHILE           reduce using rule 99 (statement -> return .)
    VAR             reduce using rule 99 (statement -> return .)
    VEC             reduce using rule 99 (statement -> return .)
    MAT             reduce using rule 99 (statement -> return .)
    }               reduce using rule 99 (statement -> return .)


state 200

    (100) statement -> var_decl .

    CONSTANT        reduce using rule 100 (statement -> var_decl .)
    ID              reduce using rule 100 (statement -> var_decl .)
    IF              reduce using rule 100 (statement -> var_decl .)
    PRINT           reduce using rule 100 (statement -> var_decl .)
    SCAN            reduce using rule 100 (statement -> var_decl .)
    RETURN          reduce using rule 100 (statement -> var_decl .)
    FOR             reduce using rule 100 (statement -> var_decl .)
    WHILE           reduce using rule 100 (statement -> var_decl .)
    VAR             reduce using rule 100 (statement -> var_decl .)
    VEC             reduce using rule 100 (statement -> var_decl .)
    MAT             reduce using rule 100 (statement -> var_decl .)
    }               reduce using rule 100 (statement -> var_decl .)


state 201

    (98) statement -> in_out .

    CONSTANT        reduce using rule 98 (statement -> in_out .)
    ID              reduce using rule 98 (statement -> in_out .)
    IF              reduce using rule 98 (statement -> in_out .)
    PRINT           reduce using rule 98 (statement -> in_out .)
    SCAN            reduce using rule 98 (statement -> in_out .)
    RETURN          reduce using rule 98 (statement -> in_out .)
    FOR             reduce using rule 98 (statement -> in_out .)
    WHILE           reduce using rule 98 (statement -> in_out .)
    VAR             reduce using rule 98 (statement -> in_out .)
    VEC             reduce using rule 98 (statement -> in_out .)
    MAT             reduce using rule 98 (statement -> in_out .)
    }               reduce using rule 98 (statement -> in_out .)


state 202

    (109) for_loop -> FOR . ( assignment expression ; ID = expression ) block

    (               shift and go to state 240


state 203

    (92) block -> { bstmt . }

    }               shift and go to state 241


state 204

    (108) loop -> while_loop .

    CONSTANT        reduce using rule 108 (loop -> while_loop .)
    ID              reduce using rule 108 (loop -> while_loop .)
    IF              reduce using rule 108 (loop -> while_loop .)
    PRINT           reduce using rule 108 (loop -> while_loop .)
    SCAN            reduce using rule 108 (loop -> while_loop .)
    RETURN          reduce using rule 108 (loop -> while_loop .)
    FOR             reduce using rule 108 (loop -> while_loop .)
    WHILE           reduce using rule 108 (loop -> while_loop .)
    VAR             reduce using rule 108 (loop -> while_loop .)
    VEC             reduce using rule 108 (loop -> while_loop .)
    MAT             reduce using rule 108 (loop -> while_loop .)
    }               reduce using rule 108 (loop -> while_loop .)


state 205

    (97) statement -> loop .

    CONSTANT        reduce using rule 97 (statement -> loop .)
    ID              reduce using rule 97 (statement -> loop .)
    IF              reduce using rule 97 (statement -> loop .)
    PRINT           reduce using rule 97 (statement -> loop .)
    SCAN            reduce using rule 97 (statement -> loop .)
    RETURN          reduce using rule 97 (statement -> loop .)
    FOR             reduce using rule 97 (statement -> loop .)
    WHILE           reduce using rule 97 (statement -> loop .)
    VAR             reduce using rule 97 (statement -> loop .)
    VEC             reduce using rule 97 (statement -> loop .)
    MAT             reduce using rule 97 (statement -> loop .)
    }               reduce using rule 97 (statement -> loop .)


state 206

    (112) in_out -> SCAN . ( ID id_access ) ;

    (               shift and go to state 242


state 207

    (110) while_loop -> WHILE . ( expression ) block

    (               shift and go to state 243


state 208

    (94) bstmt -> empty .

    }               reduce using rule 94 (bstmt -> empty .)


state 209

    (93) bstmt -> statement . bstmt
    (93) bstmt -> . statement bstmt
    (94) bstmt -> . empty
    (95) statement -> . assignment
    (96) statement -> . condition
    (97) statement -> . loop
    (98) statement -> . in_out
    (99) statement -> . return
    (100) statement -> . var_decl
    (101) statement -> . CONSTANT var_decl
    (162) empty -> .
    (50) assignment -> . ID id_access = ass_value ;
    (102) condition -> . IF cond_body
    (107) loop -> . for_loop
    (108) loop -> . while_loop
    (111) in_out -> . PRINT ( print_exp ) ;
    (112) in_out -> . SCAN ( ID id_access ) ;
    (117) return -> . RETURN ret_val ;
    (7) var_decl -> . vars
    (8) var_decl -> . vector
    (9) var_decl -> . matrix
    (109) for_loop -> . FOR ( assignment expression ; ID = expression ) block
    (110) while_loop -> . WHILE ( expression ) block
    (28) vars -> . VAR ids : vars_type ;
    (39) vector -> . VEC ids : vec_mat_type [ CONST_I ] vec_assgn ;
    (42) matrix -> . MAT ids : vec_mat_type [ CONST_I , CONST_I ] mat_assgn ;

    CONSTANT        shift and go to state 216
    }               reduce using rule 162 (empty -> .)
    ID              shift and go to state 33
    IF              shift and go to state 211
    PRINT           shift and go to state 214
    SCAN            shift and go to state 206
    RETURN          shift and go to state 210
    FOR             shift and go to state 202
    WHILE           shift and go to state 207
    VAR             shift and go to state 44
    VEC             shift and go to state 48
    MAT             shift and go to state 45

    vector                         shift and go to state 38
    return                         shift and go to state 199
    var_decl                       shift and go to state 200
    in_out                         shift and go to state 201
    empty                          shift and go to state 208
    bstmt                          shift and go to state 244
    statement                      shift and go to state 209
    while_loop                     shift and go to state 204
    loop                           shift and go to state 205
    vars                           shift and go to state 47
    assignment                     shift and go to state 212
    condition                      shift and go to state 213
    matrix                         shift and go to state 40
    for_loop                       shift and go to state 215

state 210

    (117) return -> RETURN . ret_val ;
    (118) ret_val -> . expression
    (119) ret_val -> . empty
    (120) expression -> . rel_expression expression_op
    (162) empty -> .
    (125) rel_expression -> . rel_expression_1 rel_exp_op
    (129) rel_expression_1 -> . exp rel_exp_1_op
    (135) exp -> . term exp_op
    (139) term -> . factor term_op
    (153) factor -> . fact_neg fact_body
    (154) fact_neg -> . -
    (155) fact_neg -> . ~
    (156) fact_neg -> . empty

    ;               reduce using rule 162 (empty -> .)
    (               reduce using rule 162 (empty -> .)
    ID              reduce using rule 162 (empty -> .)
    CONST_I         reduce using rule 162 (empty -> .)
    CONST_F         reduce using rule 162 (empty -> .)
    CONST_CHAR      reduce using rule 162 (empty -> .)
    CONST_STRING    reduce using rule 162 (empty -> .)
    CONST_BOOL      reduce using rule 162 (empty -> .)
    -               shift and go to state 85
    ~               shift and go to state 84

    rel_expression                 shift and go to state 75
    term                           shift and go to state 76
    ret_val                        shift and go to state 245
    factor                         shift and go to state 77
    fact_neg                       shift and go to state 80
    rel_expression_1               shift and go to state 79
    exp                            shift and go to state 82
    empty                          shift and go to state 247
    expression                     shift and go to state 246

state 211

    (102) condition -> IF . cond_body
    (103) cond_body -> . ( expression ) block cond_else

    (               shift and go to state 248

    cond_body                      shift and go to state 249

state 212

    (95) statement -> assignment .

    CONSTANT        reduce using rule 95 (statement -> assignment .)
    ID              reduce using rule 95 (statement -> assignment .)
    IF              reduce using rule 95 (statement -> assignment .)
    PRINT           reduce using rule 95 (statement -> assignment .)
    SCAN            reduce using rule 95 (statement -> assignment .)
    RETURN          reduce using rule 95 (statement -> assignment .)
    FOR             reduce using rule 95 (statement -> assignment .)
    WHILE           reduce using rule 95 (statement -> assignment .)
    VAR             reduce using rule 95 (statement -> assignment .)
    VEC             reduce using rule 95 (statement -> assignment .)
    MAT             reduce using rule 95 (statement -> assignment .)
    }               reduce using rule 95 (statement -> assignment .)


state 213

    (96) statement -> condition .

    CONSTANT        reduce using rule 96 (statement -> condition .)
    ID              reduce using rule 96 (statement -> condition .)
    IF              reduce using rule 96 (statement -> condition .)
    PRINT           reduce using rule 96 (statement -> condition .)
    SCAN            reduce using rule 96 (statement -> condition .)
    RETURN          reduce using rule 96 (statement -> condition .)
    FOR             reduce using rule 96 (statement -> condition .)
    WHILE           reduce using rule 96 (statement -> condition .)
    VAR             reduce using rule 96 (statement -> condition .)
    VEC             reduce using rule 96 (statement -> condition .)
    MAT             reduce using rule 96 (statement -> condition .)
    }               reduce using rule 96 (statement -> condition .)


state 214

    (111) in_out -> PRINT . ( print_exp ) ;

    (               shift and go to state 250


state 215

    (107) loop -> for_loop .

    CONSTANT        reduce using rule 107 (loop -> for_loop .)
    ID              reduce using rule 107 (loop -> for_loop .)
    IF              reduce using rule 107 (loop -> for_loop .)
    PRINT           reduce using rule 107 (loop -> for_loop .)
    SCAN            reduce using rule 107 (loop -> for_loop .)
    RETURN          reduce using rule 107 (loop -> for_loop .)
    FOR             reduce using rule 107 (loop -> for_loop .)
    WHILE           reduce using rule 107 (loop -> for_loop .)
    VAR             reduce using rule 107 (loop -> for_loop .)
    VEC             reduce using rule 107 (loop -> for_loop .)
    MAT             reduce using rule 107 (loop -> for_loop .)
    }               reduce using rule 107 (loop -> for_loop .)


state 216

    (101) statement -> CONSTANT . var_decl
    (7) var_decl -> . vars
    (8) var_decl -> . vector
    (9) var_decl -> . matrix
    (28) vars -> . VAR ids : vars_type ;
    (39) vector -> . VEC ids : vec_mat_type [ CONST_I ] vec_assgn ;
    (42) matrix -> . MAT ids : vec_mat_type [ CONST_I , CONST_I ] mat_assgn ;

    VAR             shift and go to state 44
    VEC             shift and go to state 48
    MAT             shift and go to state 45

    vector                         shift and go to state 38
    var_decl                       shift and go to state 251
    vars                           shift and go to state 47
    matrix                         shift and go to state 40

state 217

    (88) func_call -> ( func_param . )

    )               shift and go to state 252


state 218

    (89) func_param -> expression . more_fpar
    (90) more_fpar -> . , func_param
    (91) more_fpar -> . empty
    (162) empty -> .

    ,               shift and go to state 254
    )               reduce using rule 162 (empty -> .)

    more_fpar                      shift and go to state 253
    empty                          shift and go to state 255

state 219

    (55) vector_exp -> [ vec_elem ] .

    ,               reduce using rule 55 (vector_exp -> [ vec_elem ] .)
    }               reduce using rule 55 (vector_exp -> [ vec_elem ] .)
    ;               reduce using rule 55 (vector_exp -> [ vec_elem ] .)


state 220

    (56) vec_elem -> vec_object vec_more .

    ]               reduce using rule 56 (vec_elem -> vec_object vec_more .)


state 221

    (60) vec_more -> empty .

    ]               reduce using rule 60 (vec_more -> empty .)


state 222

    (59) vec_more -> , . vec_elem
    (56) vec_elem -> . vec_object vec_more
    (57) vec_object -> . create_obj
    (58) vec_object -> . expression
    (87) create_obj -> . NEW func_call
    (120) expression -> . rel_expression expression_op
    (125) rel_expression -> . rel_expression_1 rel_exp_op
    (129) rel_expression_1 -> . exp rel_exp_1_op
    (135) exp -> . term exp_op
    (139) term -> . factor term_op
    (153) factor -> . fact_neg fact_body
    (154) fact_neg -> . -
    (155) fact_neg -> . ~
    (156) fact_neg -> . empty
    (162) empty -> .

    NEW             shift and go to state 99
    -               shift and go to state 85
    ~               shift and go to state 84
    (               reduce using rule 162 (empty -> .)
    ID              reduce using rule 162 (empty -> .)
    CONST_I         reduce using rule 162 (empty -> .)
    CONST_F         reduce using rule 162 (empty -> .)
    CONST_CHAR      reduce using rule 162 (empty -> .)
    CONST_STRING    reduce using rule 162 (empty -> .)
    CONST_BOOL      reduce using rule 162 (empty -> .)

    rel_expression                 shift and go to state 75
    vec_object                     shift and go to state 162
    term                           shift and go to state 76
    factor                         shift and go to state 77
    fact_neg                       shift and go to state 80
    rel_expression_1               shift and go to state 79
    exp                            shift and go to state 82
    empty                          shift and go to state 83
    create_obj                     shift and go to state 160
    expression                     shift and go to state 163
    vec_elem                       shift and go to state 256

state 223

    (61) matrix_exp -> { mat_elem } .

    ;               reduce using rule 61 (matrix_exp -> { mat_elem } .)


state 224

    (63) mat_more -> , . mat_elem
    (62) mat_elem -> . vector_exp mat_more
    (55) vector_exp -> . [ vec_elem ]

    [               shift and go to state 104

    mat_elem                       shift and go to state 257
    vector_exp                     shift and go to state 165

state 225

    (64) mat_more -> empty .

    }               reduce using rule 64 (mat_more -> empty .)


state 226

    (62) mat_elem -> vector_exp mat_more .

    }               reduce using rule 62 (mat_elem -> vector_exp mat_more .)


state 227

    (157) fact_body -> ( expression ) .

    *               reduce using rule 157 (fact_body -> ( expression ) .)
    /               reduce using rule 157 (fact_body -> ( expression ) .)
    %               reduce using rule 157 (fact_body -> ( expression ) .)
    +               reduce using rule 157 (fact_body -> ( expression ) .)
    -               reduce using rule 157 (fact_body -> ( expression ) .)
    <               reduce using rule 157 (fact_body -> ( expression ) .)
    LESS_EQUAL_THAN reduce using rule 157 (fact_body -> ( expression ) .)
    >               reduce using rule 157 (fact_body -> ( expression ) .)
    GREATER_EQUAL_THAN reduce using rule 157 (fact_body -> ( expression ) .)
    EQUAL           reduce using rule 157 (fact_body -> ( expression ) .)
    NOT_EQUAL       reduce using rule 157 (fact_body -> ( expression ) .)
    AND             reduce using rule 157 (fact_body -> ( expression ) .)
    OR              reduce using rule 157 (fact_body -> ( expression ) .)
    XOR             reduce using rule 157 (fact_body -> ( expression ) .)
    ,               reduce using rule 157 (fact_body -> ( expression ) .)
    ]               reduce using rule 157 (fact_body -> ( expression ) .)
    ;               reduce using rule 157 (fact_body -> ( expression ) .)
    )               reduce using rule 157 (fact_body -> ( expression ) .)


state 228

    (31) vars_tp_a -> = expression .

    ;               reduce using rule 31 (vars_tp_a -> = expression .)


state 229

    (33) vars_tp_b -> = vars_assgn .

    ;               reduce using rule 33 (vars_tp_b -> = vars_assgn .)


state 230

    (35) vars_assgn -> create_obj .

    ;               reduce using rule 35 (vars_assgn -> create_obj .)


state 231

    (36) vars_assgn -> expression .

    ;               reduce using rule 36 (vars_assgn -> expression .)


state 232

    (42) matrix -> MAT ids : vec_mat_type [ CONST_I . , CONST_I ] mat_assgn ;

    ,               shift and go to state 258


state 233

    (39) vector -> VEC ids : vec_mat_type [ CONST_I . ] vec_assgn ;

    ]               shift and go to state 259


state 234

    (85) param_mat -> , .

    ]               reduce using rule 85 (param_mat -> , .)


state 235

    (83) param_mat_vec -> [ param_mat . ]

    ]               shift and go to state 260


state 236

    (86) param_mat -> empty .

    ]               reduce using rule 86 (param_mat -> empty .)


state 237

    (78) method_param -> ID : param_type param_mat_vec more_params .

    )               reduce using rule 78 (method_param -> ID : param_type param_mat_vec more_params .)


state 238

    (79) more_params -> , . method_param
    (78) method_param -> . ID : param_type param_mat_vec more_params

    ID              shift and go to state 72

    method_param                   shift and go to state 261

state 239

    (80) more_params -> empty .

    )               reduce using rule 80 (more_params -> empty .)


state 240

    (109) for_loop -> FOR ( . assignment expression ; ID = expression ) block
    (50) assignment -> . ID id_access = ass_value ;

    ID              shift and go to state 33

    assignment                     shift and go to state 262

state 241

    (92) block -> { bstmt } .

    ELSE            reduce using rule 92 (block -> { bstmt } .)
    ELSEIF          reduce using rule 92 (block -> { bstmt } .)
    CONSTANT        reduce using rule 92 (block -> { bstmt } .)
    ID              reduce using rule 92 (block -> { bstmt } .)
    IF              reduce using rule 92 (block -> { bstmt } .)
    PRINT           reduce using rule 92 (block -> { bstmt } .)
    SCAN            reduce using rule 92 (block -> { bstmt } .)
    RETURN          reduce using rule 92 (block -> { bstmt } .)
    FOR             reduce using rule 92 (block -> { bstmt } .)
    WHILE           reduce using rule 92 (block -> { bstmt } .)
    VAR             reduce using rule 92 (block -> { bstmt } .)
    VEC             reduce using rule 92 (block -> { bstmt } .)
    MAT             reduce using rule 92 (block -> { bstmt } .)
    }               reduce using rule 92 (block -> { bstmt } .)
    CONSTRUCTOR     reduce using rule 92 (block -> { bstmt } .)
    PUBLIC          reduce using rule 92 (block -> { bstmt } .)
    PRIVATE         reduce using rule 92 (block -> { bstmt } .)


state 242

    (112) in_out -> SCAN ( . ID id_access ) ;

    ID              shift and go to state 263


state 243

    (110) while_loop -> WHILE ( . expression ) block
    (120) expression -> . rel_expression expression_op
    (125) rel_expression -> . rel_expression_1 rel_exp_op
    (129) rel_expression_1 -> . exp rel_exp_1_op
    (135) exp -> . term exp_op
    (139) term -> . factor term_op
    (153) factor -> . fact_neg fact_body
    (154) fact_neg -> . -
    (155) fact_neg -> . ~
    (156) fact_neg -> . empty
    (162) empty -> .

    -               shift and go to state 85
    ~               shift and go to state 84
    (               reduce using rule 162 (empty -> .)
    ID              reduce using rule 162 (empty -> .)
    CONST_I         reduce using rule 162 (empty -> .)
    CONST_F         reduce using rule 162 (empty -> .)
    CONST_CHAR      reduce using rule 162 (empty -> .)
    CONST_STRING    reduce using rule 162 (empty -> .)
    CONST_BOOL      reduce using rule 162 (empty -> .)

    rel_expression                 shift and go to state 75
    term                           shift and go to state 76
    factor                         shift and go to state 77
    fact_neg                       shift and go to state 80
    rel_expression_1               shift and go to state 79
    exp                            shift and go to state 82
    empty                          shift and go to state 83
    expression                     shift and go to state 264

state 244

    (93) bstmt -> statement bstmt .

    }               reduce using rule 93 (bstmt -> statement bstmt .)


state 245

    (117) return -> RETURN ret_val . ;

    ;               shift and go to state 265


state 246

    (118) ret_val -> expression .

    ;               reduce using rule 118 (ret_val -> expression .)


state 247

    (119) ret_val -> empty .
    (156) fact_neg -> empty .

    ;               reduce using rule 119 (ret_val -> empty .)
    (               reduce using rule 156 (fact_neg -> empty .)
    ID              reduce using rule 156 (fact_neg -> empty .)
    CONST_I         reduce using rule 156 (fact_neg -> empty .)
    CONST_F         reduce using rule 156 (fact_neg -> empty .)
    CONST_CHAR      reduce using rule 156 (fact_neg -> empty .)
    CONST_STRING    reduce using rule 156 (fact_neg -> empty .)
    CONST_BOOL      reduce using rule 156 (fact_neg -> empty .)


state 248

    (103) cond_body -> ( . expression ) block cond_else
    (120) expression -> . rel_expression expression_op
    (125) rel_expression -> . rel_expression_1 rel_exp_op
    (129) rel_expression_1 -> . exp rel_exp_1_op
    (135) exp -> . term exp_op
    (139) term -> . factor term_op
    (153) factor -> . fact_neg fact_body
    (154) fact_neg -> . -
    (155) fact_neg -> . ~
    (156) fact_neg -> . empty
    (162) empty -> .

    -               shift and go to state 85
    ~               shift and go to state 84
    (               reduce using rule 162 (empty -> .)
    ID              reduce using rule 162 (empty -> .)
    CONST_I         reduce using rule 162 (empty -> .)
    CONST_F         reduce using rule 162 (empty -> .)
    CONST_CHAR      reduce using rule 162 (empty -> .)
    CONST_STRING    reduce using rule 162 (empty -> .)
    CONST_BOOL      reduce using rule 162 (empty -> .)

    rel_expression                 shift and go to state 75
    term                           shift and go to state 76
    factor                         shift and go to state 77
    fact_neg                       shift and go to state 80
    rel_expression_1               shift and go to state 79
    exp                            shift and go to state 82
    empty                          shift and go to state 83
    expression                     shift and go to state 266

state 249

    (102) condition -> IF cond_body .

    CONSTANT        reduce using rule 102 (condition -> IF cond_body .)
    ID              reduce using rule 102 (condition -> IF cond_body .)
    IF              reduce using rule 102 (condition -> IF cond_body .)
    PRINT           reduce using rule 102 (condition -> IF cond_body .)
    SCAN            reduce using rule 102 (condition -> IF cond_body .)
    RETURN          reduce using rule 102 (condition -> IF cond_body .)
    FOR             reduce using rule 102 (condition -> IF cond_body .)
    WHILE           reduce using rule 102 (condition -> IF cond_body .)
    VAR             reduce using rule 102 (condition -> IF cond_body .)
    VEC             reduce using rule 102 (condition -> IF cond_body .)
    MAT             reduce using rule 102 (condition -> IF cond_body .)
    }               reduce using rule 102 (condition -> IF cond_body .)


state 250

    (111) in_out -> PRINT ( . print_exp ) ;
    (113) print_exp -> . print_val print_more
    (114) print_val -> . expression
    (120) expression -> . rel_expression expression_op
    (125) rel_expression -> . rel_expression_1 rel_exp_op
    (129) rel_expression_1 -> . exp rel_exp_1_op
    (135) exp -> . term exp_op
    (139) term -> . factor term_op
    (153) factor -> . fact_neg fact_body
    (154) fact_neg -> . -
    (155) fact_neg -> . ~
    (156) fact_neg -> . empty
    (162) empty -> .

    -               shift and go to state 85
    ~               shift and go to state 84
    (               reduce using rule 162 (empty -> .)
    ID              reduce using rule 162 (empty -> .)
    CONST_I         reduce using rule 162 (empty -> .)
    CONST_F         reduce using rule 162 (empty -> .)
    CONST_CHAR      reduce using rule 162 (empty -> .)
    CONST_STRING    reduce using rule 162 (empty -> .)
    CONST_BOOL      reduce using rule 162 (empty -> .)

    rel_expression                 shift and go to state 75
    term                           shift and go to state 76
    factor                         shift and go to state 77
    fact_neg                       shift and go to state 80
    rel_expression_1               shift and go to state 79
    exp                            shift and go to state 82
    print_exp                      shift and go to state 267
    empty                          shift and go to state 83
    expression                     shift and go to state 268
    print_val                      shift and go to state 269

state 251

    (101) statement -> CONSTANT var_decl .

    CONSTANT        reduce using rule 101 (statement -> CONSTANT var_decl .)
    ID              reduce using rule 101 (statement -> CONSTANT var_decl .)
    IF              reduce using rule 101 (statement -> CONSTANT var_decl .)
    PRINT           reduce using rule 101 (statement -> CONSTANT var_decl .)
    SCAN            reduce using rule 101 (statement -> CONSTANT var_decl .)
    RETURN          reduce using rule 101 (statement -> CONSTANT var_decl .)
    FOR             reduce using rule 101 (statement -> CONSTANT var_decl .)
    WHILE           reduce using rule 101 (statement -> CONSTANT var_decl .)
    VAR             reduce using rule 101 (statement -> CONSTANT var_decl .)
    VEC             reduce using rule 101 (statement -> CONSTANT var_decl .)
    MAT             reduce using rule 101 (statement -> CONSTANT var_decl .)
    }               reduce using rule 101 (statement -> CONSTANT var_decl .)


state 252

    (88) func_call -> ( func_param ) .

    *               reduce using rule 88 (func_call -> ( func_param ) .)
    /               reduce using rule 88 (func_call -> ( func_param ) .)
    %               reduce using rule 88 (func_call -> ( func_param ) .)
    +               reduce using rule 88 (func_call -> ( func_param ) .)
    -               reduce using rule 88 (func_call -> ( func_param ) .)
    <               reduce using rule 88 (func_call -> ( func_param ) .)
    LESS_EQUAL_THAN reduce using rule 88 (func_call -> ( func_param ) .)
    >               reduce using rule 88 (func_call -> ( func_param ) .)
    GREATER_EQUAL_THAN reduce using rule 88 (func_call -> ( func_param ) .)
    EQUAL           reduce using rule 88 (func_call -> ( func_param ) .)
    NOT_EQUAL       reduce using rule 88 (func_call -> ( func_param ) .)
    AND             reduce using rule 88 (func_call -> ( func_param ) .)
    OR              reduce using rule 88 (func_call -> ( func_param ) .)
    XOR             reduce using rule 88 (func_call -> ( func_param ) .)
    ,               reduce using rule 88 (func_call -> ( func_param ) .)
    ]               reduce using rule 88 (func_call -> ( func_param ) .)
    ;               reduce using rule 88 (func_call -> ( func_param ) .)
    )               reduce using rule 88 (func_call -> ( func_param ) .)


state 253

    (89) func_param -> expression more_fpar .

    )               reduce using rule 89 (func_param -> expression more_fpar .)


state 254

    (90) more_fpar -> , . func_param
    (89) func_param -> . expression more_fpar
    (120) expression -> . rel_expression expression_op
    (125) rel_expression -> . rel_expression_1 rel_exp_op
    (129) rel_expression_1 -> . exp rel_exp_1_op
    (135) exp -> . term exp_op
    (139) term -> . factor term_op
    (153) factor -> . fact_neg fact_body
    (154) fact_neg -> . -
    (155) fact_neg -> . ~
    (156) fact_neg -> . empty
    (162) empty -> .

    -               shift and go to state 85
    ~               shift and go to state 84
    (               reduce using rule 162 (empty -> .)
    ID              reduce using rule 162 (empty -> .)
    CONST_I         reduce using rule 162 (empty -> .)
    CONST_F         reduce using rule 162 (empty -> .)
    CONST_CHAR      reduce using rule 162 (empty -> .)
    CONST_STRING    reduce using rule 162 (empty -> .)
    CONST_BOOL      reduce using rule 162 (empty -> .)

    rel_expression                 shift and go to state 75
    term                           shift and go to state 76
    factor                         shift and go to state 77
    fact_neg                       shift and go to state 80
    rel_expression_1               shift and go to state 79
    exp                            shift and go to state 82
    empty                          shift and go to state 83
    func_param                     shift and go to state 270
    expression                     shift and go to state 218

state 255

    (91) more_fpar -> empty .

    )               reduce using rule 91 (more_fpar -> empty .)


state 256

    (59) vec_more -> , vec_elem .

    ]               reduce using rule 59 (vec_more -> , vec_elem .)


state 257

    (63) mat_more -> , mat_elem .

    }               reduce using rule 63 (mat_more -> , mat_elem .)


state 258

    (42) matrix -> MAT ids : vec_mat_type [ CONST_I , . CONST_I ] mat_assgn ;

    CONST_I         shift and go to state 271


state 259

    (39) vector -> VEC ids : vec_mat_type [ CONST_I ] . vec_assgn ;
    (40) vec_assgn -> . = vector_exp
    (41) vec_assgn -> . empty
    (162) empty -> .

    =               shift and go to state 273
    ;               reduce using rule 162 (empty -> .)

    empty                          shift and go to state 274
    vec_assgn                      shift and go to state 272

state 260

    (83) param_mat_vec -> [ param_mat ] .

    ,               reduce using rule 83 (param_mat_vec -> [ param_mat ] .)
    )               reduce using rule 83 (param_mat_vec -> [ param_mat ] .)


state 261

    (79) more_params -> , method_param .

    )               reduce using rule 79 (more_params -> , method_param .)


state 262

    (109) for_loop -> FOR ( assignment . expression ; ID = expression ) block
    (120) expression -> . rel_expression expression_op
    (125) rel_expression -> . rel_expression_1 rel_exp_op
    (129) rel_expression_1 -> . exp rel_exp_1_op
    (135) exp -> . term exp_op
    (139) term -> . factor term_op
    (153) factor -> . fact_neg fact_body
    (154) fact_neg -> . -
    (155) fact_neg -> . ~
    (156) fact_neg -> . empty
    (162) empty -> .

    -               shift and go to state 85
    ~               shift and go to state 84
    (               reduce using rule 162 (empty -> .)
    ID              reduce using rule 162 (empty -> .)
    CONST_I         reduce using rule 162 (empty -> .)
    CONST_F         reduce using rule 162 (empty -> .)
    CONST_CHAR      reduce using rule 162 (empty -> .)
    CONST_STRING    reduce using rule 162 (empty -> .)
    CONST_BOOL      reduce using rule 162 (empty -> .)

    rel_expression                 shift and go to state 75
    term                           shift and go to state 76
    factor                         shift and go to state 77
    fact_neg                       shift and go to state 80
    rel_expression_1               shift and go to state 79
    exp                            shift and go to state 82
    empty                          shift and go to state 83
    expression                     shift and go to state 275

state 263

    (112) in_out -> SCAN ( ID . id_access ) ;
    (45) id_access -> . id_mat_acc id_var_acc
    (46) id_mat_acc -> . mat_vec_access
    (47) id_mat_acc -> . empty
    (65) mat_vec_access -> . [ mat_vec_index mat_access ]
    (162) empty -> .

    [               shift and go to state 58
    .               reduce using rule 162 (empty -> .)
    )               reduce using rule 162 (empty -> .)

    mat_vec_access                 shift and go to state 56
    empty                          shift and go to state 60
    id_mat_acc                     shift and go to state 59
    id_access                      shift and go to state 276

state 264

    (110) while_loop -> WHILE ( expression . ) block

    )               shift and go to state 277


state 265

    (117) return -> RETURN ret_val ; .

    CONSTANT        reduce using rule 117 (return -> RETURN ret_val ; .)
    ID              reduce using rule 117 (return -> RETURN ret_val ; .)
    IF              reduce using rule 117 (return -> RETURN ret_val ; .)
    PRINT           reduce using rule 117 (return -> RETURN ret_val ; .)
    SCAN            reduce using rule 117 (return -> RETURN ret_val ; .)
    RETURN          reduce using rule 117 (return -> RETURN ret_val ; .)
    FOR             reduce using rule 117 (return -> RETURN ret_val ; .)
    WHILE           reduce using rule 117 (return -> RETURN ret_val ; .)
    VAR             reduce using rule 117 (return -> RETURN ret_val ; .)
    VEC             reduce using rule 117 (return -> RETURN ret_val ; .)
    MAT             reduce using rule 117 (return -> RETURN ret_val ; .)
    }               reduce using rule 117 (return -> RETURN ret_val ; .)


state 266

    (103) cond_body -> ( expression . ) block cond_else

    )               shift and go to state 278


state 267

    (111) in_out -> PRINT ( print_exp . ) ;

    )               shift and go to state 279


state 268

    (114) print_val -> expression .

    ,               reduce using rule 114 (print_val -> expression .)
    )               reduce using rule 114 (print_val -> expression .)


state 269

    (113) print_exp -> print_val . print_more
    (115) print_more -> . , print_exp
    (116) print_more -> . empty
    (162) empty -> .

    ,               shift and go to state 282
    )               reduce using rule 162 (empty -> .)

    print_more                     shift and go to state 280
    empty                          shift and go to state 281

state 270

    (90) more_fpar -> , func_param .

    )               reduce using rule 90 (more_fpar -> , func_param .)


state 271

    (42) matrix -> MAT ids : vec_mat_type [ CONST_I , CONST_I . ] mat_assgn ;

    ]               shift and go to state 283


state 272

    (39) vector -> VEC ids : vec_mat_type [ CONST_I ] vec_assgn . ;

    ;               shift and go to state 284


state 273

    (40) vec_assgn -> = . vector_exp
    (55) vector_exp -> . [ vec_elem ]

    [               shift and go to state 104

    vector_exp                     shift and go to state 285

state 274

    (41) vec_assgn -> empty .

    ;               reduce using rule 41 (vec_assgn -> empty .)


state 275

    (109) for_loop -> FOR ( assignment expression . ; ID = expression ) block

    ;               shift and go to state 286


state 276

    (112) in_out -> SCAN ( ID id_access . ) ;

    )               shift and go to state 287


state 277

    (110) while_loop -> WHILE ( expression ) . block
    (92) block -> . { bstmt }

    {               shift and go to state 156

    block                          shift and go to state 288

state 278

    (103) cond_body -> ( expression ) . block cond_else
    (92) block -> . { bstmt }

    {               shift and go to state 156

    block                          shift and go to state 289

state 279

    (111) in_out -> PRINT ( print_exp ) . ;

    ;               shift and go to state 290


state 280

    (113) print_exp -> print_val print_more .

    )               reduce using rule 113 (print_exp -> print_val print_more .)


state 281

    (116) print_more -> empty .

    )               reduce using rule 116 (print_more -> empty .)


state 282

    (115) print_more -> , . print_exp
    (113) print_exp -> . print_val print_more
    (114) print_val -> . expression
    (120) expression -> . rel_expression expression_op
    (125) rel_expression -> . rel_expression_1 rel_exp_op
    (129) rel_expression_1 -> . exp rel_exp_1_op
    (135) exp -> . term exp_op
    (139) term -> . factor term_op
    (153) factor -> . fact_neg fact_body
    (154) fact_neg -> . -
    (155) fact_neg -> . ~
    (156) fact_neg -> . empty
    (162) empty -> .

    -               shift and go to state 85
    ~               shift and go to state 84
    (               reduce using rule 162 (empty -> .)
    ID              reduce using rule 162 (empty -> .)
    CONST_I         reduce using rule 162 (empty -> .)
    CONST_F         reduce using rule 162 (empty -> .)
    CONST_CHAR      reduce using rule 162 (empty -> .)
    CONST_STRING    reduce using rule 162 (empty -> .)
    CONST_BOOL      reduce using rule 162 (empty -> .)

    rel_expression                 shift and go to state 75
    term                           shift and go to state 76
    factor                         shift and go to state 77
    fact_neg                       shift and go to state 80
    rel_expression_1               shift and go to state 79
    exp                            shift and go to state 82
    print_exp                      shift and go to state 291
    empty                          shift and go to state 83
    expression                     shift and go to state 268
    print_val                      shift and go to state 269

state 283

    (42) matrix -> MAT ids : vec_mat_type [ CONST_I , CONST_I ] . mat_assgn ;
    (43) mat_assgn -> . = matrix_exp
    (44) mat_assgn -> . empty
    (162) empty -> .

    =               shift and go to state 292
    ;               reduce using rule 162 (empty -> .)

    empty                          shift and go to state 293
    mat_assgn                      shift and go to state 294

state 284

    (39) vector -> VEC ids : vec_mat_type [ CONST_I ] vec_assgn ; .

    CONSTANT        reduce using rule 39 (vector -> VEC ids : vec_mat_type [ CONST_I ] vec_assgn ; .)
    ID              reduce using rule 39 (vector -> VEC ids : vec_mat_type [ CONST_I ] vec_assgn ; .)
    IF              reduce using rule 39 (vector -> VEC ids : vec_mat_type [ CONST_I ] vec_assgn ; .)
    PRINT           reduce using rule 39 (vector -> VEC ids : vec_mat_type [ CONST_I ] vec_assgn ; .)
    SCAN            reduce using rule 39 (vector -> VEC ids : vec_mat_type [ CONST_I ] vec_assgn ; .)
    RETURN          reduce using rule 39 (vector -> VEC ids : vec_mat_type [ CONST_I ] vec_assgn ; .)
    FOR             reduce using rule 39 (vector -> VEC ids : vec_mat_type [ CONST_I ] vec_assgn ; .)
    WHILE           reduce using rule 39 (vector -> VEC ids : vec_mat_type [ CONST_I ] vec_assgn ; .)
    VAR             reduce using rule 39 (vector -> VEC ids : vec_mat_type [ CONST_I ] vec_assgn ; .)
    VEC             reduce using rule 39 (vector -> VEC ids : vec_mat_type [ CONST_I ] vec_assgn ; .)
    MAT             reduce using rule 39 (vector -> VEC ids : vec_mat_type [ CONST_I ] vec_assgn ; .)
    }               reduce using rule 39 (vector -> VEC ids : vec_mat_type [ CONST_I ] vec_assgn ; .)
    PUBLIC          reduce using rule 39 (vector -> VEC ids : vec_mat_type [ CONST_I ] vec_assgn ; .)
    PRIVATE         reduce using rule 39 (vector -> VEC ids : vec_mat_type [ CONST_I ] vec_assgn ; .)
    CONSTRUCTOR     reduce using rule 39 (vector -> VEC ids : vec_mat_type [ CONST_I ] vec_assgn ; .)


state 285

    (40) vec_assgn -> = vector_exp .

    ;               reduce using rule 40 (vec_assgn -> = vector_exp .)


state 286

    (109) for_loop -> FOR ( assignment expression ; . ID = expression ) block

    ID              shift and go to state 295


state 287

    (112) in_out -> SCAN ( ID id_access ) . ;

    ;               shift and go to state 296


state 288

    (110) while_loop -> WHILE ( expression ) block .

    CONSTANT        reduce using rule 110 (while_loop -> WHILE ( expression ) block .)
    ID              reduce using rule 110 (while_loop -> WHILE ( expression ) block .)
    IF              reduce using rule 110 (while_loop -> WHILE ( expression ) block .)
    PRINT           reduce using rule 110 (while_loop -> WHILE ( expression ) block .)
    SCAN            reduce using rule 110 (while_loop -> WHILE ( expression ) block .)
    RETURN          reduce using rule 110 (while_loop -> WHILE ( expression ) block .)
    FOR             reduce using rule 110 (while_loop -> WHILE ( expression ) block .)
    WHILE           reduce using rule 110 (while_loop -> WHILE ( expression ) block .)
    VAR             reduce using rule 110 (while_loop -> WHILE ( expression ) block .)
    VEC             reduce using rule 110 (while_loop -> WHILE ( expression ) block .)
    MAT             reduce using rule 110 (while_loop -> WHILE ( expression ) block .)
    }               reduce using rule 110 (while_loop -> WHILE ( expression ) block .)


state 289

    (103) cond_body -> ( expression ) block . cond_else
    (104) cond_else -> . ELSE block
    (105) cond_else -> . ELSEIF cond_body
    (106) cond_else -> . empty
    (162) empty -> .

    ELSE            shift and go to state 297
    ELSEIF          shift and go to state 299
    CONSTANT        reduce using rule 162 (empty -> .)
    ID              reduce using rule 162 (empty -> .)
    IF              reduce using rule 162 (empty -> .)
    PRINT           reduce using rule 162 (empty -> .)
    SCAN            reduce using rule 162 (empty -> .)
    RETURN          reduce using rule 162 (empty -> .)
    FOR             reduce using rule 162 (empty -> .)
    WHILE           reduce using rule 162 (empty -> .)
    VAR             reduce using rule 162 (empty -> .)
    VEC             reduce using rule 162 (empty -> .)
    MAT             reduce using rule 162 (empty -> .)
    }               reduce using rule 162 (empty -> .)

    empty                          shift and go to state 298
    cond_else                      shift and go to state 300

state 290

    (111) in_out -> PRINT ( print_exp ) ; .

    CONSTANT        reduce using rule 111 (in_out -> PRINT ( print_exp ) ; .)
    ID              reduce using rule 111 (in_out -> PRINT ( print_exp ) ; .)
    IF              reduce using rule 111 (in_out -> PRINT ( print_exp ) ; .)
    PRINT           reduce using rule 111 (in_out -> PRINT ( print_exp ) ; .)
    SCAN            reduce using rule 111 (in_out -> PRINT ( print_exp ) ; .)
    RETURN          reduce using rule 111 (in_out -> PRINT ( print_exp ) ; .)
    FOR             reduce using rule 111 (in_out -> PRINT ( print_exp ) ; .)
    WHILE           reduce using rule 111 (in_out -> PRINT ( print_exp ) ; .)
    VAR             reduce using rule 111 (in_out -> PRINT ( print_exp ) ; .)
    VEC             reduce using rule 111 (in_out -> PRINT ( print_exp ) ; .)
    MAT             reduce using rule 111 (in_out -> PRINT ( print_exp ) ; .)
    }               reduce using rule 111 (in_out -> PRINT ( print_exp ) ; .)


state 291

    (115) print_more -> , print_exp .

    )               reduce using rule 115 (print_more -> , print_exp .)


state 292

    (43) mat_assgn -> = . matrix_exp
    (61) matrix_exp -> . { mat_elem }

    {               shift and go to state 105

    matrix_exp                     shift and go to state 301

state 293

    (44) mat_assgn -> empty .

    ;               reduce using rule 44 (mat_assgn -> empty .)


state 294

    (42) matrix -> MAT ids : vec_mat_type [ CONST_I , CONST_I ] mat_assgn . ;

    ;               shift and go to state 302


state 295

    (109) for_loop -> FOR ( assignment expression ; ID . = expression ) block

    =               shift and go to state 303


state 296

    (112) in_out -> SCAN ( ID id_access ) ; .

    CONSTANT        reduce using rule 112 (in_out -> SCAN ( ID id_access ) ; .)
    ID              reduce using rule 112 (in_out -> SCAN ( ID id_access ) ; .)
    IF              reduce using rule 112 (in_out -> SCAN ( ID id_access ) ; .)
    PRINT           reduce using rule 112 (in_out -> SCAN ( ID id_access ) ; .)
    SCAN            reduce using rule 112 (in_out -> SCAN ( ID id_access ) ; .)
    RETURN          reduce using rule 112 (in_out -> SCAN ( ID id_access ) ; .)
    FOR             reduce using rule 112 (in_out -> SCAN ( ID id_access ) ; .)
    WHILE           reduce using rule 112 (in_out -> SCAN ( ID id_access ) ; .)
    VAR             reduce using rule 112 (in_out -> SCAN ( ID id_access ) ; .)
    VEC             reduce using rule 112 (in_out -> SCAN ( ID id_access ) ; .)
    MAT             reduce using rule 112 (in_out -> SCAN ( ID id_access ) ; .)
    }               reduce using rule 112 (in_out -> SCAN ( ID id_access ) ; .)


state 297

    (104) cond_else -> ELSE . block
    (92) block -> . { bstmt }

    {               shift and go to state 156

    block                          shift and go to state 304

state 298

    (106) cond_else -> empty .

    CONSTANT        reduce using rule 106 (cond_else -> empty .)
    ID              reduce using rule 106 (cond_else -> empty .)
    IF              reduce using rule 106 (cond_else -> empty .)
    PRINT           reduce using rule 106 (cond_else -> empty .)
    SCAN            reduce using rule 106 (cond_else -> empty .)
    RETURN          reduce using rule 106 (cond_else -> empty .)
    FOR             reduce using rule 106 (cond_else -> empty .)
    WHILE           reduce using rule 106 (cond_else -> empty .)
    VAR             reduce using rule 106 (cond_else -> empty .)
    VEC             reduce using rule 106 (cond_else -> empty .)
    MAT             reduce using rule 106 (cond_else -> empty .)
    }               reduce using rule 106 (cond_else -> empty .)


state 299

    (105) cond_else -> ELSEIF . cond_body
    (103) cond_body -> . ( expression ) block cond_else

    (               shift and go to state 248

    cond_body                      shift and go to state 305

state 300

    (103) cond_body -> ( expression ) block cond_else .

    CONSTANT        reduce using rule 103 (cond_body -> ( expression ) block cond_else .)
    ID              reduce using rule 103 (cond_body -> ( expression ) block cond_else .)
    IF              reduce using rule 103 (cond_body -> ( expression ) block cond_else .)
    PRINT           reduce using rule 103 (cond_body -> ( expression ) block cond_else .)
    SCAN            reduce using rule 103 (cond_body -> ( expression ) block cond_else .)
    RETURN          reduce using rule 103 (cond_body -> ( expression ) block cond_else .)
    FOR             reduce using rule 103 (cond_body -> ( expression ) block cond_else .)
    WHILE           reduce using rule 103 (cond_body -> ( expression ) block cond_else .)
    VAR             reduce using rule 103 (cond_body -> ( expression ) block cond_else .)
    VEC             reduce using rule 103 (cond_body -> ( expression ) block cond_else .)
    MAT             reduce using rule 103 (cond_body -> ( expression ) block cond_else .)
    }               reduce using rule 103 (cond_body -> ( expression ) block cond_else .)


state 301

    (43) mat_assgn -> = matrix_exp .

    ;               reduce using rule 43 (mat_assgn -> = matrix_exp .)


state 302

    (42) matrix -> MAT ids : vec_mat_type [ CONST_I , CONST_I ] mat_assgn ; .

    CONSTANT        reduce using rule 42 (matrix -> MAT ids : vec_mat_type [ CONST_I , CONST_I ] mat_assgn ; .)
    ID              reduce using rule 42 (matrix -> MAT ids : vec_mat_type [ CONST_I , CONST_I ] mat_assgn ; .)
    IF              reduce using rule 42 (matrix -> MAT ids : vec_mat_type [ CONST_I , CONST_I ] mat_assgn ; .)
    PRINT           reduce using rule 42 (matrix -> MAT ids : vec_mat_type [ CONST_I , CONST_I ] mat_assgn ; .)
    SCAN            reduce using rule 42 (matrix -> MAT ids : vec_mat_type [ CONST_I , CONST_I ] mat_assgn ; .)
    RETURN          reduce using rule 42 (matrix -> MAT ids : vec_mat_type [ CONST_I , CONST_I ] mat_assgn ; .)
    FOR             reduce using rule 42 (matrix -> MAT ids : vec_mat_type [ CONST_I , CONST_I ] mat_assgn ; .)
    WHILE           reduce using rule 42 (matrix -> MAT ids : vec_mat_type [ CONST_I , CONST_I ] mat_assgn ; .)
    VAR             reduce using rule 42 (matrix -> MAT ids : vec_mat_type [ CONST_I , CONST_I ] mat_assgn ; .)
    VEC             reduce using rule 42 (matrix -> MAT ids : vec_mat_type [ CONST_I , CONST_I ] mat_assgn ; .)
    MAT             reduce using rule 42 (matrix -> MAT ids : vec_mat_type [ CONST_I , CONST_I ] mat_assgn ; .)
    }               reduce using rule 42 (matrix -> MAT ids : vec_mat_type [ CONST_I , CONST_I ] mat_assgn ; .)
    PUBLIC          reduce using rule 42 (matrix -> MAT ids : vec_mat_type [ CONST_I , CONST_I ] mat_assgn ; .)
    PRIVATE         reduce using rule 42 (matrix -> MAT ids : vec_mat_type [ CONST_I , CONST_I ] mat_assgn ; .)
    CONSTRUCTOR     reduce using rule 42 (matrix -> MAT ids : vec_mat_type [ CONST_I , CONST_I ] mat_assgn ; .)


state 303

    (109) for_loop -> FOR ( assignment expression ; ID = . expression ) block
    (120) expression -> . rel_expression expression_op
    (125) rel_expression -> . rel_expression_1 rel_exp_op
    (129) rel_expression_1 -> . exp rel_exp_1_op
    (135) exp -> . term exp_op
    (139) term -> . factor term_op
    (153) factor -> . fact_neg fact_body
    (154) fact_neg -> . -
    (155) fact_neg -> . ~
    (156) fact_neg -> . empty
    (162) empty -> .

    -               shift and go to state 85
    ~               shift and go to state 84
    (               reduce using rule 162 (empty -> .)
    ID              reduce using rule 162 (empty -> .)
    CONST_I         reduce using rule 162 (empty -> .)
    CONST_F         reduce using rule 162 (empty -> .)
    CONST_CHAR      reduce using rule 162 (empty -> .)
    CONST_STRING    reduce using rule 162 (empty -> .)
    CONST_BOOL      reduce using rule 162 (empty -> .)

    rel_expression                 shift and go to state 75
    term                           shift and go to state 76
    factor                         shift and go to state 77
    fact_neg                       shift and go to state 80
    rel_expression_1               shift and go to state 79
    exp                            shift and go to state 82
    empty                          shift and go to state 83
    expression                     shift and go to state 306

state 304

    (104) cond_else -> ELSE block .

    CONSTANT        reduce using rule 104 (cond_else -> ELSE block .)
    ID              reduce using rule 104 (cond_else -> ELSE block .)
    IF              reduce using rule 104 (cond_else -> ELSE block .)
    PRINT           reduce using rule 104 (cond_else -> ELSE block .)
    SCAN            reduce using rule 104 (cond_else -> ELSE block .)
    RETURN          reduce using rule 104 (cond_else -> ELSE block .)
    FOR             reduce using rule 104 (cond_else -> ELSE block .)
    WHILE           reduce using rule 104 (cond_else -> ELSE block .)
    VAR             reduce using rule 104 (cond_else -> ELSE block .)
    VEC             reduce using rule 104 (cond_else -> ELSE block .)
    MAT             reduce using rule 104 (cond_else -> ELSE block .)
    }               reduce using rule 104 (cond_else -> ELSE block .)


state 305

    (105) cond_else -> ELSEIF cond_body .

    CONSTANT        reduce using rule 105 (cond_else -> ELSEIF cond_body .)
    ID              reduce using rule 105 (cond_else -> ELSEIF cond_body .)
    IF              reduce using rule 105 (cond_else -> ELSEIF cond_body .)
    PRINT           reduce using rule 105 (cond_else -> ELSEIF cond_body .)
    SCAN            reduce using rule 105 (cond_else -> ELSEIF cond_body .)
    RETURN          reduce using rule 105 (cond_else -> ELSEIF cond_body .)
    FOR             reduce using rule 105 (cond_else -> ELSEIF cond_body .)
    WHILE           reduce using rule 105 (cond_else -> ELSEIF cond_body .)
    VAR             reduce using rule 105 (cond_else -> ELSEIF cond_body .)
    VEC             reduce using rule 105 (cond_else -> ELSEIF cond_body .)
    MAT             reduce using rule 105 (cond_else -> ELSEIF cond_body .)
    }               reduce using rule 105 (cond_else -> ELSEIF cond_body .)


state 306

    (109) for_loop -> FOR ( assignment expression ; ID = expression . ) block

    )               shift and go to state 307


state 307

    (109) for_loop -> FOR ( assignment expression ; ID = expression ) . block
    (92) block -> . { bstmt }

    {               shift and go to state 156

    block                          shift and go to state 308

state 308

    (109) for_loop -> FOR ( assignment expression ; ID = expression ) block .

    CONSTANT        reduce using rule 109 (for_loop -> FOR ( assignment expression ; ID = expression ) block .)
    ID              reduce using rule 109 (for_loop -> FOR ( assignment expression ; ID = expression ) block .)
    IF              reduce using rule 109 (for_loop -> FOR ( assignment expression ; ID = expression ) block .)
    PRINT           reduce using rule 109 (for_loop -> FOR ( assignment expression ; ID = expression ) block .)
    SCAN            reduce using rule 109 (for_loop -> FOR ( assignment expression ; ID = expression ) block .)
    RETURN          reduce using rule 109 (for_loop -> FOR ( assignment expression ; ID = expression ) block .)
    FOR             reduce using rule 109 (for_loop -> FOR ( assignment expression ; ID = expression ) block .)
    WHILE           reduce using rule 109 (for_loop -> FOR ( assignment expression ; ID = expression ) block .)
    VAR             reduce using rule 109 (for_loop -> FOR ( assignment expression ; ID = expression ) block .)
    VEC             reduce using rule 109 (for_loop -> FOR ( assignment expression ; ID = expression ) block .)
    MAT             reduce using rule 109 (for_loop -> FOR ( assignment expression ; ID = expression ) block .)
    }               reduce using rule 109 (for_loop -> FOR ( assignment expression ; ID = expression ) block .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PUBLIC in state 39 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 39 resolved as shift
