Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> imports CLASS ID prog_inh class_block
Rule 2     prog_inh -> INHERITS ID
Rule 3     prog_inh -> empty
Rule 4     imports -> IMPORT CONST_STRING ; imports
Rule 5     imports -> empty
Rule 6     var_decl -> vars
Rule 7     var_decl -> vector
Rule 8     var_decl -> matrix
Rule 9     class_block -> { class_blck_body }
Rule 10    class_blck_body -> class_vars class_asgs class_func
Rule 11    class_blck_body -> class_func
Rule 12    class_vars -> access var_decl more_class_vars
Rule 13    more_class_vars -> class_vars
Rule 14    more_class_vars -> empty
Rule 15    class_asgs -> assignment class_asgs
Rule 16    class_asgs -> empty
Rule 17    class_func -> method class_func
Rule 18    class_func -> empty
Rule 19    access -> acc_scope dependent
Rule 20    acc_scope -> PUBLIC
Rule 21    acc_scope -> PRIVATE
Rule 22    dependent -> INDEPENDENT
Rule 23    dependent -> empty
Rule 24    method_access -> met_acc_scope dependent
Rule 25    met_acc_scope -> PUBLIC_FUNC
Rule 26    met_acc_scope -> PRIVATE_FUNC
Rule 27    ids -> ID m_ids
Rule 28    m_ids -> , ids
Rule 29    m_ids -> empty
Rule 30    vars -> VAR ids : vars_type ;
Rule 31    vars_type -> type vars_tp_a
Rule 32    vars_type -> ID vars_tp_b
Rule 33    vars_tp_a -> = expression
Rule 34    vars_tp_a -> empty
Rule 35    vars_tp_b -> = vars_assgn
Rule 36    vars_tp_b -> empty
Rule 37    vars_assgn -> create_obj
Rule 38    vars_assgn -> expression
Rule 39    vec_mat_type -> type
Rule 40    vec_mat_type -> ID
Rule 41    vector -> VEC ids : vec_mat_type [ CONST_I ] vec_assgn ;
Rule 42    vec_assgn -> = vector_exp
Rule 43    vec_assgn -> empty
Rule 44    matrix -> MAT ids : vec_mat_type [ CONST_I , CONST_I ] mat_assgn ;
Rule 45    mat_assgn -> = matrix_exp
Rule 46    mat_assgn -> empty
Rule 47    id_access -> id_mat_acc id_var_acc
Rule 48    id_mat_acc -> mat_vec_access
Rule 49    id_mat_acc -> empty
Rule 50    id_var_acc -> . ID id_mat_acc
Rule 51    id_var_acc -> empty
Rule 52    assignment -> ID id_access = ass_value ;
Rule 53    ass_value -> create_obj
Rule 54    ass_value -> expression
Rule 55    ass_value -> matrix_exp
Rule 56    ass_value -> vector_exp
Rule 57    vector_exp -> [ vec_elem ]
Rule 58    vec_elem -> vec_object vec_more
Rule 59    vec_object -> create_obj
Rule 60    vec_object -> expression
Rule 61    vec_more -> , vec_elem
Rule 62    vec_more -> empty
Rule 63    matrix_exp -> { mat_elem }
Rule 64    mat_elem -> vector_exp mat_more
Rule 65    mat_more -> , mat_elem
Rule 66    mat_more -> empty
Rule 67    mat_vec_access -> [ mat_vec_index mat_access ]
Rule 68    mat_vec_index -> _
Rule 69    mat_vec_index -> expression
Rule 70    mat_access -> , mat_vec_index
Rule 71    mat_access -> empty
Rule 72    method -> func_spec ( opt_method_param ) block
Rule 73    func_spec -> method_access func_type ID
Rule 74    func_spec -> CONSTRUCTOR
Rule 75    func_type -> VOID
Rule 76    func_type -> type
Rule 77    func_type -> ID
Rule 78    opt_method_param -> method_param
Rule 79    opt_method_param -> empty
Rule 80    method_param -> ID : param_type param_mat_vec more_params
Rule 81    more_params -> , method_param
Rule 82    more_params -> empty
Rule 83    param_type -> type
Rule 84    param_type -> ID
Rule 85    param_mat_vec -> [ param_mat ]
Rule 86    param_mat_vec -> empty
Rule 87    param_mat -> ,
Rule 88    param_mat -> empty
Rule 89    create_obj -> NEW func_call
Rule 90    func_call -> ( func_param )
Rule 91    func_param -> expression more_fpar
Rule 92    more_fpar -> , func_param
Rule 93    more_fpar -> empty
Rule 94    block -> { bstmt }
Rule 95    bstmt -> statement bstmt
Rule 96    bstmt -> empty
Rule 97    statement -> assignment
Rule 98    statement -> condition
Rule 99    statement -> loop
Rule 100   statement -> in_out
Rule 101   statement -> return
Rule 102   statement -> var_decl
Rule 103   statement -> CONSTANT var_decl
Rule 104   condition -> IF cond_body
Rule 105   cond_body -> ( expression ) block cond_else
Rule 106   cond_else -> ELSE block
Rule 107   cond_else -> ELSEIF cond_body
Rule 108   cond_else -> empty
Rule 109   loop -> for_loop
Rule 110   loop -> while_loop
Rule 111   for_loop -> FOR ( assignment expression ; ID = expression ) block
Rule 112   while_loop -> WHILE ( expression ) block
Rule 113   in_out -> PRINT ( print_exp ) ;
Rule 114   in_out -> SCAN ( ID id_access ) ;
Rule 115   print_exp -> print_val print_more
Rule 116   print_val -> expression
Rule 117   print_more -> , print_exp
Rule 118   print_more -> empty
Rule 119   return -> RETURN ret_val ;
Rule 120   ret_val -> expression
Rule 121   ret_val -> empty
Rule 122   expression -> rel_expression expression_op
Rule 123   expression_op -> AND expression
Rule 124   expression_op -> OR expression
Rule 125   expression_op -> XOR expression
Rule 126   expression_op -> empty
Rule 127   rel_expression -> rel_expression_1 rel_exp_op
Rule 128   rel_exp_op -> EQUAL rel_expression
Rule 129   rel_exp_op -> NOT_EQUAL rel_expression
Rule 130   rel_exp_op -> empty
Rule 131   rel_expression_1 -> exp rel_exp_1_op
Rule 132   rel_exp_1_op -> < rel_expression_1
Rule 133   rel_exp_1_op -> LESS_EQUAL_THAN rel_expression_1
Rule 134   rel_exp_1_op -> > rel_expression_1
Rule 135   rel_exp_1_op -> GREATER_EQUAL_THAN rel_expression_1
Rule 136   rel_exp_1_op -> empty
Rule 137   exp -> term exp_op
Rule 138   exp_op -> + exp
Rule 139   exp_op -> - exp
Rule 140   exp_op -> empty
Rule 141   term -> factor term_op
Rule 142   term_op -> * term
Rule 143   term_op -> / term
Rule 144   term_op -> % term
Rule 145   term_op -> empty
Rule 146   type -> INT
Rule 147   type -> DOUBLE
Rule 148   type -> CHAR
Rule 149   type -> BOOL
Rule 150   var_cte -> CONST_I
Rule 151   var_cte -> CONST_F
Rule 152   var_cte -> CONST_CHAR
Rule 153   var_cte -> CONST_STRING
Rule 154   var_cte -> CONST_BOOL
Rule 155   factor -> fact_neg fact_body
Rule 156   fact_neg -> -
Rule 157   fact_neg -> ~
Rule 158   fact_neg -> empty
Rule 159   fact_body -> ( expression )
Rule 160   fact_body -> var_cte
Rule 161   fact_body -> ID fact_id
Rule 162   fact_id -> func_call
Rule 163   fact_id -> id_access
Rule 164   empty -> <empty>

Terminals, with rules where they appear

%                    : 144
(                    : 72 90 105 111 112 113 114 159
)                    : 72 90 105 111 112 113 114 159
*                    : 142
+                    : 138
,                    : 28 44 61 65 70 81 87 92 117
-                    : 139 156
.                    : 50
/                    : 143
:                    : 30 41 44 80
;                    : 4 30 41 44 52 111 113 114 119
<                    : 132
=                    : 33 35 42 45 52 111
>                    : 134
AND                  : 123
BOOL                 : 149
CHAR                 : 148
CLASS                : 1
CONSTANT             : 103
CONSTRUCTOR          : 74
CONST_BOOL           : 154
CONST_CHAR           : 152
CONST_F              : 151
CONST_I              : 41 44 44 150
CONST_STRING         : 4 153
DOUBLE               : 147
ELSE                 : 106
ELSEIF               : 107
EQUAL                : 128
FOR                  : 111
GREATER_EQUAL_THAN   : 135
ID                   : 1 2 27 32 40 50 52 73 77 80 84 111 114 161
IF                   : 104
IMPORT               : 4
INDEPENDENT          : 22
INHERITS             : 2
INT                  : 146
LESS_EQUAL_THAN      : 133
MAT                  : 44
NEW                  : 89
NOT_EQUAL            : 129
OR                   : 124
PRINT                : 113
PRIVATE              : 21
PRIVATE_FUNC         : 26
PUBLIC               : 20
PUBLIC_FUNC          : 25
RETURN               : 119
SCAN                 : 114
VAR                  : 30
VEC                  : 41
VOID                 : 75
WHILE                : 112
XOR                  : 125
[                    : 41 44 57 67 85
]                    : 41 44 57 67 85
_                    : 68
error                : 
{                    : 9 63 94
}                    : 9 63 94
~                    : 157

Nonterminals, with rules where they appear

acc_scope            : 19
access               : 12
ass_value            : 52
assignment           : 15 97 111
block                : 72 105 106 111 112
bstmt                : 94 95
class_asgs           : 10 15
class_blck_body      : 9
class_block          : 1
class_func           : 10 11 17
class_vars           : 10 13
cond_body            : 104 107
cond_else            : 105
condition            : 98
create_obj           : 37 53 59
dependent            : 19 24
empty                : 3 5 14 16 18 23 29 34 36 43 46 49 51 62 66 71 79 82 86 88 93 96 108 118 121 126 130 136 140 145 158
exp                  : 131 138 139
exp_op               : 137
expression           : 33 38 54 60 69 91 105 111 111 112 116 120 123 124 125 159
expression_op        : 122
fact_body            : 155
fact_id              : 161
fact_neg             : 155
factor               : 141
for_loop             : 109
func_call            : 89 162
func_param           : 90 92
func_spec            : 72
func_type            : 73
id_access            : 52 114 163
id_mat_acc           : 47 50
id_var_acc           : 47
ids                  : 28 30 41 44
imports              : 1 4
in_out               : 100
loop                 : 99
m_ids                : 27
mat_access           : 67
mat_assgn            : 44
mat_elem             : 63 65
mat_more             : 64
mat_vec_access       : 48
mat_vec_index        : 67 70
matrix               : 8
matrix_exp           : 45 55
met_acc_scope        : 24
method               : 17
method_access        : 73
method_param         : 78 81
more_class_vars      : 12
more_fpar            : 91
more_params          : 80
opt_method_param     : 72
param_mat            : 85
param_mat_vec        : 80
param_type           : 80
print_exp            : 113 117
print_more           : 115
print_val            : 115
prog_inh             : 1
program              : 0
rel_exp_1_op         : 131
rel_exp_op           : 127
rel_expression       : 122 128 129
rel_expression_1     : 127 132 133 134 135
ret_val              : 119
return               : 101
statement            : 95
term                 : 137 142 143 144
term_op              : 141
type                 : 31 39 76 83
var_cte              : 160
var_decl             : 12 102 103
vars                 : 6
vars_assgn           : 35
vars_tp_a            : 31
vars_tp_b            : 32
vars_type            : 30
vec_assgn            : 41
vec_elem             : 57 61
vec_mat_type         : 41 44
vec_more             : 58
vec_object           : 58
vector               : 7
vector_exp           : 42 56 64
while_loop           : 110

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . imports CLASS ID prog_inh class_block
    (4) imports -> . IMPORT CONST_STRING ; imports
    (5) imports -> . empty
    (164) empty -> .

    IMPORT          shift and go to state 3
    CLASS           reduce using rule 164 (empty -> .)

    program                        shift and go to state 1
    imports                        shift and go to state 2
    empty                          shift and go to state 4

state 1

    (0) S' -> program .



state 2

    (1) program -> imports . CLASS ID prog_inh class_block

    CLASS           shift and go to state 5


state 3

    (4) imports -> IMPORT . CONST_STRING ; imports

    CONST_STRING    shift and go to state 6


state 4

    (5) imports -> empty .

    CLASS           reduce using rule 5 (imports -> empty .)


state 5

    (1) program -> imports CLASS . ID prog_inh class_block

    ID              shift and go to state 7


state 6

    (4) imports -> IMPORT CONST_STRING . ; imports

    ;               shift and go to state 8


state 7

    (1) program -> imports CLASS ID . prog_inh class_block
    (2) prog_inh -> . INHERITS ID
    (3) prog_inh -> . empty
    (164) empty -> .

    INHERITS        shift and go to state 10
    {               reduce using rule 164 (empty -> .)

    prog_inh                       shift and go to state 9
    empty                          shift and go to state 11

state 8

    (4) imports -> IMPORT CONST_STRING ; . imports
    (4) imports -> . IMPORT CONST_STRING ; imports
    (5) imports -> . empty
    (164) empty -> .

    IMPORT          shift and go to state 3
    CLASS           reduce using rule 164 (empty -> .)

    imports                        shift and go to state 12
    empty                          shift and go to state 4

state 9

    (1) program -> imports CLASS ID prog_inh . class_block
    (9) class_block -> . { class_blck_body }

    {               shift and go to state 14

    class_block                    shift and go to state 13

state 10

    (2) prog_inh -> INHERITS . ID

    ID              shift and go to state 15


state 11

    (3) prog_inh -> empty .

    {               reduce using rule 3 (prog_inh -> empty .)


state 12

    (4) imports -> IMPORT CONST_STRING ; imports .

    CLASS           reduce using rule 4 (imports -> IMPORT CONST_STRING ; imports .)


state 13

    (1) program -> imports CLASS ID prog_inh class_block .

    $end            reduce using rule 1 (program -> imports CLASS ID prog_inh class_block .)


state 14

    (9) class_block -> { . class_blck_body }
    (10) class_blck_body -> . class_vars class_asgs class_func
    (11) class_blck_body -> . class_func
    (12) class_vars -> . access var_decl more_class_vars
    (17) class_func -> . method class_func
    (18) class_func -> . empty
    (19) access -> . acc_scope dependent
    (72) method -> . func_spec ( opt_method_param ) block
    (164) empty -> .
    (20) acc_scope -> . PUBLIC
    (21) acc_scope -> . PRIVATE
    (73) func_spec -> . method_access func_type ID
    (74) func_spec -> . CONSTRUCTOR
    (24) method_access -> . met_acc_scope dependent
    (25) met_acc_scope -> . PUBLIC_FUNC
    (26) met_acc_scope -> . PRIVATE_FUNC

    }               reduce using rule 164 (empty -> .)
    PUBLIC          shift and go to state 24
    PRIVATE         shift and go to state 25
    CONSTRUCTOR     shift and go to state 27
    PUBLIC_FUNC     shift and go to state 29
    PRIVATE_FUNC    shift and go to state 30

    class_blck_body                shift and go to state 16
    class_vars                     shift and go to state 17
    class_func                     shift and go to state 18
    access                         shift and go to state 19
    method                         shift and go to state 20
    empty                          shift and go to state 21
    acc_scope                      shift and go to state 22
    func_spec                      shift and go to state 23
    method_access                  shift and go to state 26
    met_acc_scope                  shift and go to state 28

state 15

    (2) prog_inh -> INHERITS ID .

    {               reduce using rule 2 (prog_inh -> INHERITS ID .)


state 16

    (9) class_block -> { class_blck_body . }

    }               shift and go to state 31


state 17

    (10) class_blck_body -> class_vars . class_asgs class_func
    (15) class_asgs -> . assignment class_asgs
    (16) class_asgs -> . empty
    (52) assignment -> . ID id_access = ass_value ;
    (164) empty -> .

    ID              shift and go to state 35
    CONSTRUCTOR     reduce using rule 164 (empty -> .)
    PUBLIC_FUNC     reduce using rule 164 (empty -> .)
    PRIVATE_FUNC    reduce using rule 164 (empty -> .)
    }               reduce using rule 164 (empty -> .)

    class_asgs                     shift and go to state 32
    assignment                     shift and go to state 33
    empty                          shift and go to state 34

state 18

    (11) class_blck_body -> class_func .

    }               reduce using rule 11 (class_blck_body -> class_func .)


state 19

    (12) class_vars -> access . var_decl more_class_vars
    (6) var_decl -> . vars
    (7) var_decl -> . vector
    (8) var_decl -> . matrix
    (30) vars -> . VAR ids : vars_type ;
    (41) vector -> . VEC ids : vec_mat_type [ CONST_I ] vec_assgn ;
    (44) matrix -> . MAT ids : vec_mat_type [ CONST_I , CONST_I ] mat_assgn ;

    VAR             shift and go to state 40
    VEC             shift and go to state 41
    MAT             shift and go to state 42

    var_decl                       shift and go to state 36
    vars                           shift and go to state 37
    vector                         shift and go to state 38
    matrix                         shift and go to state 39

state 20

    (17) class_func -> method . class_func
    (17) class_func -> . method class_func
    (18) class_func -> . empty
    (72) method -> . func_spec ( opt_method_param ) block
    (164) empty -> .
    (73) func_spec -> . method_access func_type ID
    (74) func_spec -> . CONSTRUCTOR
    (24) method_access -> . met_acc_scope dependent
    (25) met_acc_scope -> . PUBLIC_FUNC
    (26) met_acc_scope -> . PRIVATE_FUNC

    }               reduce using rule 164 (empty -> .)
    CONSTRUCTOR     shift and go to state 27
    PUBLIC_FUNC     shift and go to state 29
    PRIVATE_FUNC    shift and go to state 30

    method                         shift and go to state 20
    class_func                     shift and go to state 43
    empty                          shift and go to state 21
    func_spec                      shift and go to state 23
    method_access                  shift and go to state 26
    met_acc_scope                  shift and go to state 28

state 21

    (18) class_func -> empty .

    }               reduce using rule 18 (class_func -> empty .)


state 22

    (19) access -> acc_scope . dependent
    (22) dependent -> . INDEPENDENT
    (23) dependent -> . empty
    (164) empty -> .

    INDEPENDENT     shift and go to state 45
    VAR             reduce using rule 164 (empty -> .)
    VEC             reduce using rule 164 (empty -> .)
    MAT             reduce using rule 164 (empty -> .)

    dependent                      shift and go to state 44
    empty                          shift and go to state 46

state 23

    (72) method -> func_spec . ( opt_method_param ) block

    (               shift and go to state 47


state 24

    (20) acc_scope -> PUBLIC .

    INDEPENDENT     reduce using rule 20 (acc_scope -> PUBLIC .)
    VAR             reduce using rule 20 (acc_scope -> PUBLIC .)
    VEC             reduce using rule 20 (acc_scope -> PUBLIC .)
    MAT             reduce using rule 20 (acc_scope -> PUBLIC .)


state 25

    (21) acc_scope -> PRIVATE .

    INDEPENDENT     reduce using rule 21 (acc_scope -> PRIVATE .)
    VAR             reduce using rule 21 (acc_scope -> PRIVATE .)
    VEC             reduce using rule 21 (acc_scope -> PRIVATE .)
    MAT             reduce using rule 21 (acc_scope -> PRIVATE .)


state 26

    (73) func_spec -> method_access . func_type ID
    (75) func_type -> . VOID
    (76) func_type -> . type
    (77) func_type -> . ID
    (146) type -> . INT
    (147) type -> . DOUBLE
    (148) type -> . CHAR
    (149) type -> . BOOL

    VOID            shift and go to state 50
    ID              shift and go to state 49
    INT             shift and go to state 52
    DOUBLE          shift and go to state 53
    CHAR            shift and go to state 54
    BOOL            shift and go to state 55

    func_type                      shift and go to state 48
    type                           shift and go to state 51

state 27

    (74) func_spec -> CONSTRUCTOR .

    (               reduce using rule 74 (func_spec -> CONSTRUCTOR .)


state 28

    (24) method_access -> met_acc_scope . dependent
    (22) dependent -> . INDEPENDENT
    (23) dependent -> . empty
    (164) empty -> .

    INDEPENDENT     shift and go to state 45
    VOID            reduce using rule 164 (empty -> .)
    ID              reduce using rule 164 (empty -> .)
    INT             reduce using rule 164 (empty -> .)
    DOUBLE          reduce using rule 164 (empty -> .)
    CHAR            reduce using rule 164 (empty -> .)
    BOOL            reduce using rule 164 (empty -> .)

    dependent                      shift and go to state 56
    empty                          shift and go to state 46

state 29

    (25) met_acc_scope -> PUBLIC_FUNC .

    INDEPENDENT     reduce using rule 25 (met_acc_scope -> PUBLIC_FUNC .)
    VOID            reduce using rule 25 (met_acc_scope -> PUBLIC_FUNC .)
    ID              reduce using rule 25 (met_acc_scope -> PUBLIC_FUNC .)
    INT             reduce using rule 25 (met_acc_scope -> PUBLIC_FUNC .)
    DOUBLE          reduce using rule 25 (met_acc_scope -> PUBLIC_FUNC .)
    CHAR            reduce using rule 25 (met_acc_scope -> PUBLIC_FUNC .)
    BOOL            reduce using rule 25 (met_acc_scope -> PUBLIC_FUNC .)


state 30

    (26) met_acc_scope -> PRIVATE_FUNC .

    INDEPENDENT     reduce using rule 26 (met_acc_scope -> PRIVATE_FUNC .)
    VOID            reduce using rule 26 (met_acc_scope -> PRIVATE_FUNC .)
    ID              reduce using rule 26 (met_acc_scope -> PRIVATE_FUNC .)
    INT             reduce using rule 26 (met_acc_scope -> PRIVATE_FUNC .)
    DOUBLE          reduce using rule 26 (met_acc_scope -> PRIVATE_FUNC .)
    CHAR            reduce using rule 26 (met_acc_scope -> PRIVATE_FUNC .)
    BOOL            reduce using rule 26 (met_acc_scope -> PRIVATE_FUNC .)


state 31

    (9) class_block -> { class_blck_body } .

    $end            reduce using rule 9 (class_block -> { class_blck_body } .)


state 32

    (10) class_blck_body -> class_vars class_asgs . class_func
    (17) class_func -> . method class_func
    (18) class_func -> . empty
    (72) method -> . func_spec ( opt_method_param ) block
    (164) empty -> .
    (73) func_spec -> . method_access func_type ID
    (74) func_spec -> . CONSTRUCTOR
    (24) method_access -> . met_acc_scope dependent
    (25) met_acc_scope -> . PUBLIC_FUNC
    (26) met_acc_scope -> . PRIVATE_FUNC

    }               reduce using rule 164 (empty -> .)
    CONSTRUCTOR     shift and go to state 27
    PUBLIC_FUNC     shift and go to state 29
    PRIVATE_FUNC    shift and go to state 30

    class_func                     shift and go to state 57
    method                         shift and go to state 20
    empty                          shift and go to state 21
    func_spec                      shift and go to state 23
    method_access                  shift and go to state 26
    met_acc_scope                  shift and go to state 28

state 33

    (15) class_asgs -> assignment . class_asgs
    (15) class_asgs -> . assignment class_asgs
    (16) class_asgs -> . empty
    (52) assignment -> . ID id_access = ass_value ;
    (164) empty -> .

    ID              shift and go to state 35
    CONSTRUCTOR     reduce using rule 164 (empty -> .)
    PUBLIC_FUNC     reduce using rule 164 (empty -> .)
    PRIVATE_FUNC    reduce using rule 164 (empty -> .)
    }               reduce using rule 164 (empty -> .)

    assignment                     shift and go to state 33
    class_asgs                     shift and go to state 58
    empty                          shift and go to state 34

state 34

    (16) class_asgs -> empty .

    CONSTRUCTOR     reduce using rule 16 (class_asgs -> empty .)
    PUBLIC_FUNC     reduce using rule 16 (class_asgs -> empty .)
    PRIVATE_FUNC    reduce using rule 16 (class_asgs -> empty .)
    }               reduce using rule 16 (class_asgs -> empty .)


state 35

    (52) assignment -> ID . id_access = ass_value ;
    (47) id_access -> . id_mat_acc id_var_acc
    (48) id_mat_acc -> . mat_vec_access
    (49) id_mat_acc -> . empty
    (67) mat_vec_access -> . [ mat_vec_index mat_access ]
    (164) empty -> .

    [               shift and go to state 63
    .               reduce using rule 164 (empty -> .)
    =               reduce using rule 164 (empty -> .)

    id_access                      shift and go to state 59
    id_mat_acc                     shift and go to state 60
    mat_vec_access                 shift and go to state 61
    empty                          shift and go to state 62

state 36

    (12) class_vars -> access var_decl . more_class_vars
    (13) more_class_vars -> . class_vars
    (14) more_class_vars -> . empty
    (12) class_vars -> . access var_decl more_class_vars
    (164) empty -> .
    (19) access -> . acc_scope dependent
    (20) acc_scope -> . PUBLIC
    (21) acc_scope -> . PRIVATE

    ID              reduce using rule 164 (empty -> .)
    CONSTRUCTOR     reduce using rule 164 (empty -> .)
    PUBLIC_FUNC     reduce using rule 164 (empty -> .)
    PRIVATE_FUNC    reduce using rule 164 (empty -> .)
    }               reduce using rule 164 (empty -> .)
    PUBLIC          shift and go to state 24
    PRIVATE         shift and go to state 25

    access                         shift and go to state 19
    more_class_vars                shift and go to state 64
    class_vars                     shift and go to state 65
    empty                          shift and go to state 66
    acc_scope                      shift and go to state 22

state 37

    (6) var_decl -> vars .

    PUBLIC          reduce using rule 6 (var_decl -> vars .)
    PRIVATE         reduce using rule 6 (var_decl -> vars .)
    ID              reduce using rule 6 (var_decl -> vars .)
    CONSTRUCTOR     reduce using rule 6 (var_decl -> vars .)
    PUBLIC_FUNC     reduce using rule 6 (var_decl -> vars .)
    PRIVATE_FUNC    reduce using rule 6 (var_decl -> vars .)
    }               reduce using rule 6 (var_decl -> vars .)
    CONSTANT        reduce using rule 6 (var_decl -> vars .)
    IF              reduce using rule 6 (var_decl -> vars .)
    PRINT           reduce using rule 6 (var_decl -> vars .)
    SCAN            reduce using rule 6 (var_decl -> vars .)
    RETURN          reduce using rule 6 (var_decl -> vars .)
    FOR             reduce using rule 6 (var_decl -> vars .)
    WHILE           reduce using rule 6 (var_decl -> vars .)
    VAR             reduce using rule 6 (var_decl -> vars .)
    VEC             reduce using rule 6 (var_decl -> vars .)
    MAT             reduce using rule 6 (var_decl -> vars .)


state 38

    (7) var_decl -> vector .

    PUBLIC          reduce using rule 7 (var_decl -> vector .)
    PRIVATE         reduce using rule 7 (var_decl -> vector .)
    ID              reduce using rule 7 (var_decl -> vector .)
    CONSTRUCTOR     reduce using rule 7 (var_decl -> vector .)
    PUBLIC_FUNC     reduce using rule 7 (var_decl -> vector .)
    PRIVATE_FUNC    reduce using rule 7 (var_decl -> vector .)
    }               reduce using rule 7 (var_decl -> vector .)
    CONSTANT        reduce using rule 7 (var_decl -> vector .)
    IF              reduce using rule 7 (var_decl -> vector .)
    PRINT           reduce using rule 7 (var_decl -> vector .)
    SCAN            reduce using rule 7 (var_decl -> vector .)
    RETURN          reduce using rule 7 (var_decl -> vector .)
    FOR             reduce using rule 7 (var_decl -> vector .)
    WHILE           reduce using rule 7 (var_decl -> vector .)
    VAR             reduce using rule 7 (var_decl -> vector .)
    VEC             reduce using rule 7 (var_decl -> vector .)
    MAT             reduce using rule 7 (var_decl -> vector .)


state 39

    (8) var_decl -> matrix .

    PUBLIC          reduce using rule 8 (var_decl -> matrix .)
    PRIVATE         reduce using rule 8 (var_decl -> matrix .)
    ID              reduce using rule 8 (var_decl -> matrix .)
    CONSTRUCTOR     reduce using rule 8 (var_decl -> matrix .)
    PUBLIC_FUNC     reduce using rule 8 (var_decl -> matrix .)
    PRIVATE_FUNC    reduce using rule 8 (var_decl -> matrix .)
    }               reduce using rule 8 (var_decl -> matrix .)
    CONSTANT        reduce using rule 8 (var_decl -> matrix .)
    IF              reduce using rule 8 (var_decl -> matrix .)
    PRINT           reduce using rule 8 (var_decl -> matrix .)
    SCAN            reduce using rule 8 (var_decl -> matrix .)
    RETURN          reduce using rule 8 (var_decl -> matrix .)
    FOR             reduce using rule 8 (var_decl -> matrix .)
    WHILE           reduce using rule 8 (var_decl -> matrix .)
    VAR             reduce using rule 8 (var_decl -> matrix .)
    VEC             reduce using rule 8 (var_decl -> matrix .)
    MAT             reduce using rule 8 (var_decl -> matrix .)


state 40

    (30) vars -> VAR . ids : vars_type ;
    (27) ids -> . ID m_ids

    ID              shift and go to state 68

    ids                            shift and go to state 67

state 41

    (41) vector -> VEC . ids : vec_mat_type [ CONST_I ] vec_assgn ;
    (27) ids -> . ID m_ids

    ID              shift and go to state 68

    ids                            shift and go to state 69

state 42

    (44) matrix -> MAT . ids : vec_mat_type [ CONST_I , CONST_I ] mat_assgn ;
    (27) ids -> . ID m_ids

    ID              shift and go to state 68

    ids                            shift and go to state 70

state 43

    (17) class_func -> method class_func .

    }               reduce using rule 17 (class_func -> method class_func .)


state 44

    (19) access -> acc_scope dependent .

    VAR             reduce using rule 19 (access -> acc_scope dependent .)
    VEC             reduce using rule 19 (access -> acc_scope dependent .)
    MAT             reduce using rule 19 (access -> acc_scope dependent .)


state 45

    (22) dependent -> INDEPENDENT .

    VAR             reduce using rule 22 (dependent -> INDEPENDENT .)
    VEC             reduce using rule 22 (dependent -> INDEPENDENT .)
    MAT             reduce using rule 22 (dependent -> INDEPENDENT .)
    VOID            reduce using rule 22 (dependent -> INDEPENDENT .)
    ID              reduce using rule 22 (dependent -> INDEPENDENT .)
    INT             reduce using rule 22 (dependent -> INDEPENDENT .)
    DOUBLE          reduce using rule 22 (dependent -> INDEPENDENT .)
    CHAR            reduce using rule 22 (dependent -> INDEPENDENT .)
    BOOL            reduce using rule 22 (dependent -> INDEPENDENT .)


state 46

    (23) dependent -> empty .

    VAR             reduce using rule 23 (dependent -> empty .)
    VEC             reduce using rule 23 (dependent -> empty .)
    MAT             reduce using rule 23 (dependent -> empty .)
    VOID            reduce using rule 23 (dependent -> empty .)
    ID              reduce using rule 23 (dependent -> empty .)
    INT             reduce using rule 23 (dependent -> empty .)
    DOUBLE          reduce using rule 23 (dependent -> empty .)
    CHAR            reduce using rule 23 (dependent -> empty .)
    BOOL            reduce using rule 23 (dependent -> empty .)


state 47

    (72) method -> func_spec ( . opt_method_param ) block
    (78) opt_method_param -> . method_param
    (79) opt_method_param -> . empty
    (80) method_param -> . ID : param_type param_mat_vec more_params
    (164) empty -> .

    ID              shift and go to state 74
    )               reduce using rule 164 (empty -> .)

    opt_method_param               shift and go to state 71
    method_param                   shift and go to state 72
    empty                          shift and go to state 73

state 48

    (73) func_spec -> method_access func_type . ID

    ID              shift and go to state 75


state 49

    (77) func_type -> ID .

    ID              reduce using rule 77 (func_type -> ID .)


state 50

    (75) func_type -> VOID .

    ID              reduce using rule 75 (func_type -> VOID .)


state 51

    (76) func_type -> type .

    ID              reduce using rule 76 (func_type -> type .)


state 52

    (146) type -> INT .

    ID              reduce using rule 146 (type -> INT .)
    =               reduce using rule 146 (type -> INT .)
    ;               reduce using rule 146 (type -> INT .)
    [               reduce using rule 146 (type -> INT .)
    ,               reduce using rule 146 (type -> INT .)
    )               reduce using rule 146 (type -> INT .)


state 53

    (147) type -> DOUBLE .

    ID              reduce using rule 147 (type -> DOUBLE .)
    =               reduce using rule 147 (type -> DOUBLE .)
    ;               reduce using rule 147 (type -> DOUBLE .)
    [               reduce using rule 147 (type -> DOUBLE .)
    ,               reduce using rule 147 (type -> DOUBLE .)
    )               reduce using rule 147 (type -> DOUBLE .)


state 54

    (148) type -> CHAR .

    ID              reduce using rule 148 (type -> CHAR .)
    =               reduce using rule 148 (type -> CHAR .)
    ;               reduce using rule 148 (type -> CHAR .)
    [               reduce using rule 148 (type -> CHAR .)
    ,               reduce using rule 148 (type -> CHAR .)
    )               reduce using rule 148 (type -> CHAR .)


state 55

    (149) type -> BOOL .

    ID              reduce using rule 149 (type -> BOOL .)
    =               reduce using rule 149 (type -> BOOL .)
    ;               reduce using rule 149 (type -> BOOL .)
    [               reduce using rule 149 (type -> BOOL .)
    ,               reduce using rule 149 (type -> BOOL .)
    )               reduce using rule 149 (type -> BOOL .)


state 56

    (24) method_access -> met_acc_scope dependent .

    VOID            reduce using rule 24 (method_access -> met_acc_scope dependent .)
    ID              reduce using rule 24 (method_access -> met_acc_scope dependent .)
    INT             reduce using rule 24 (method_access -> met_acc_scope dependent .)
    DOUBLE          reduce using rule 24 (method_access -> met_acc_scope dependent .)
    CHAR            reduce using rule 24 (method_access -> met_acc_scope dependent .)
    BOOL            reduce using rule 24 (method_access -> met_acc_scope dependent .)


state 57

    (10) class_blck_body -> class_vars class_asgs class_func .

    }               reduce using rule 10 (class_blck_body -> class_vars class_asgs class_func .)


state 58

    (15) class_asgs -> assignment class_asgs .

    CONSTRUCTOR     reduce using rule 15 (class_asgs -> assignment class_asgs .)
    PUBLIC_FUNC     reduce using rule 15 (class_asgs -> assignment class_asgs .)
    PRIVATE_FUNC    reduce using rule 15 (class_asgs -> assignment class_asgs .)
    }               reduce using rule 15 (class_asgs -> assignment class_asgs .)


state 59

    (52) assignment -> ID id_access . = ass_value ;

    =               shift and go to state 76


state 60

    (47) id_access -> id_mat_acc . id_var_acc
    (50) id_var_acc -> . . ID id_mat_acc
    (51) id_var_acc -> . empty
    (164) empty -> .

    .               shift and go to state 78
    =               reduce using rule 164 (empty -> .)
    *               reduce using rule 164 (empty -> .)
    /               reduce using rule 164 (empty -> .)
    %               reduce using rule 164 (empty -> .)
    +               reduce using rule 164 (empty -> .)
    -               reduce using rule 164 (empty -> .)
    <               reduce using rule 164 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 164 (empty -> .)
    >               reduce using rule 164 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 164 (empty -> .)
    EQUAL           reduce using rule 164 (empty -> .)
    NOT_EQUAL       reduce using rule 164 (empty -> .)
    AND             reduce using rule 164 (empty -> .)
    OR              reduce using rule 164 (empty -> .)
    XOR             reduce using rule 164 (empty -> .)
    ,               reduce using rule 164 (empty -> .)
    ]               reduce using rule 164 (empty -> .)
    ;               reduce using rule 164 (empty -> .)
    )               reduce using rule 164 (empty -> .)

    id_var_acc                     shift and go to state 77
    empty                          shift and go to state 79

state 61

    (48) id_mat_acc -> mat_vec_access .

    .               reduce using rule 48 (id_mat_acc -> mat_vec_access .)
    =               reduce using rule 48 (id_mat_acc -> mat_vec_access .)
    *               reduce using rule 48 (id_mat_acc -> mat_vec_access .)
    /               reduce using rule 48 (id_mat_acc -> mat_vec_access .)
    %               reduce using rule 48 (id_mat_acc -> mat_vec_access .)
    +               reduce using rule 48 (id_mat_acc -> mat_vec_access .)
    -               reduce using rule 48 (id_mat_acc -> mat_vec_access .)
    <               reduce using rule 48 (id_mat_acc -> mat_vec_access .)
    LESS_EQUAL_THAN reduce using rule 48 (id_mat_acc -> mat_vec_access .)
    >               reduce using rule 48 (id_mat_acc -> mat_vec_access .)
    GREATER_EQUAL_THAN reduce using rule 48 (id_mat_acc -> mat_vec_access .)
    EQUAL           reduce using rule 48 (id_mat_acc -> mat_vec_access .)
    NOT_EQUAL       reduce using rule 48 (id_mat_acc -> mat_vec_access .)
    AND             reduce using rule 48 (id_mat_acc -> mat_vec_access .)
    OR              reduce using rule 48 (id_mat_acc -> mat_vec_access .)
    XOR             reduce using rule 48 (id_mat_acc -> mat_vec_access .)
    ,               reduce using rule 48 (id_mat_acc -> mat_vec_access .)
    ]               reduce using rule 48 (id_mat_acc -> mat_vec_access .)
    ;               reduce using rule 48 (id_mat_acc -> mat_vec_access .)
    )               reduce using rule 48 (id_mat_acc -> mat_vec_access .)


state 62

    (49) id_mat_acc -> empty .

    .               reduce using rule 49 (id_mat_acc -> empty .)
    =               reduce using rule 49 (id_mat_acc -> empty .)
    *               reduce using rule 49 (id_mat_acc -> empty .)
    /               reduce using rule 49 (id_mat_acc -> empty .)
    %               reduce using rule 49 (id_mat_acc -> empty .)
    +               reduce using rule 49 (id_mat_acc -> empty .)
    -               reduce using rule 49 (id_mat_acc -> empty .)
    <               reduce using rule 49 (id_mat_acc -> empty .)
    LESS_EQUAL_THAN reduce using rule 49 (id_mat_acc -> empty .)
    >               reduce using rule 49 (id_mat_acc -> empty .)
    GREATER_EQUAL_THAN reduce using rule 49 (id_mat_acc -> empty .)
    EQUAL           reduce using rule 49 (id_mat_acc -> empty .)
    NOT_EQUAL       reduce using rule 49 (id_mat_acc -> empty .)
    AND             reduce using rule 49 (id_mat_acc -> empty .)
    OR              reduce using rule 49 (id_mat_acc -> empty .)
    XOR             reduce using rule 49 (id_mat_acc -> empty .)
    ,               reduce using rule 49 (id_mat_acc -> empty .)
    ]               reduce using rule 49 (id_mat_acc -> empty .)
    ;               reduce using rule 49 (id_mat_acc -> empty .)
    )               reduce using rule 49 (id_mat_acc -> empty .)


state 63

    (67) mat_vec_access -> [ . mat_vec_index mat_access ]
    (68) mat_vec_index -> . _
    (69) mat_vec_index -> . expression
    (122) expression -> . rel_expression expression_op
    (127) rel_expression -> . rel_expression_1 rel_exp_op
    (131) rel_expression_1 -> . exp rel_exp_1_op
    (137) exp -> . term exp_op
    (141) term -> . factor term_op
    (155) factor -> . fact_neg fact_body
    (156) fact_neg -> . -
    (157) fact_neg -> . ~
    (158) fact_neg -> . empty
    (164) empty -> .

    _               shift and go to state 81
    -               shift and go to state 89
    ~               shift and go to state 90
    (               reduce using rule 164 (empty -> .)
    ID              reduce using rule 164 (empty -> .)
    CONST_I         reduce using rule 164 (empty -> .)
    CONST_F         reduce using rule 164 (empty -> .)
    CONST_CHAR      reduce using rule 164 (empty -> .)
    CONST_STRING    reduce using rule 164 (empty -> .)
    CONST_BOOL      reduce using rule 164 (empty -> .)

    mat_vec_index                  shift and go to state 80
    expression                     shift and go to state 82
    rel_expression                 shift and go to state 83
    rel_expression_1               shift and go to state 84
    exp                            shift and go to state 85
    term                           shift and go to state 86
    factor                         shift and go to state 87
    fact_neg                       shift and go to state 88
    empty                          shift and go to state 91

state 64

    (12) class_vars -> access var_decl more_class_vars .

    ID              reduce using rule 12 (class_vars -> access var_decl more_class_vars .)
    CONSTRUCTOR     reduce using rule 12 (class_vars -> access var_decl more_class_vars .)
    PUBLIC_FUNC     reduce using rule 12 (class_vars -> access var_decl more_class_vars .)
    PRIVATE_FUNC    reduce using rule 12 (class_vars -> access var_decl more_class_vars .)
    }               reduce using rule 12 (class_vars -> access var_decl more_class_vars .)


state 65

    (13) more_class_vars -> class_vars .

    ID              reduce using rule 13 (more_class_vars -> class_vars .)
    CONSTRUCTOR     reduce using rule 13 (more_class_vars -> class_vars .)
    PUBLIC_FUNC     reduce using rule 13 (more_class_vars -> class_vars .)
    PRIVATE_FUNC    reduce using rule 13 (more_class_vars -> class_vars .)
    }               reduce using rule 13 (more_class_vars -> class_vars .)


state 66

    (14) more_class_vars -> empty .

    ID              reduce using rule 14 (more_class_vars -> empty .)
    CONSTRUCTOR     reduce using rule 14 (more_class_vars -> empty .)
    PUBLIC_FUNC     reduce using rule 14 (more_class_vars -> empty .)
    PRIVATE_FUNC    reduce using rule 14 (more_class_vars -> empty .)
    }               reduce using rule 14 (more_class_vars -> empty .)


state 67

    (30) vars -> VAR ids . : vars_type ;

    :               shift and go to state 92


state 68

    (27) ids -> ID . m_ids
    (28) m_ids -> . , ids
    (29) m_ids -> . empty
    (164) empty -> .

    ,               shift and go to state 94
    :               reduce using rule 164 (empty -> .)

    m_ids                          shift and go to state 93
    empty                          shift and go to state 95

state 69

    (41) vector -> VEC ids . : vec_mat_type [ CONST_I ] vec_assgn ;

    :               shift and go to state 96


state 70

    (44) matrix -> MAT ids . : vec_mat_type [ CONST_I , CONST_I ] mat_assgn ;

    :               shift and go to state 97


state 71

    (72) method -> func_spec ( opt_method_param . ) block

    )               shift and go to state 98


state 72

    (78) opt_method_param -> method_param .

    )               reduce using rule 78 (opt_method_param -> method_param .)


state 73

    (79) opt_method_param -> empty .

    )               reduce using rule 79 (opt_method_param -> empty .)


state 74

    (80) method_param -> ID . : param_type param_mat_vec more_params

    :               shift and go to state 99


state 75

    (73) func_spec -> method_access func_type ID .

    (               reduce using rule 73 (func_spec -> method_access func_type ID .)


state 76

    (52) assignment -> ID id_access = . ass_value ;
    (53) ass_value -> . create_obj
    (54) ass_value -> . expression
    (55) ass_value -> . matrix_exp
    (56) ass_value -> . vector_exp
    (89) create_obj -> . NEW func_call
    (122) expression -> . rel_expression expression_op
    (63) matrix_exp -> . { mat_elem }
    (57) vector_exp -> . [ vec_elem ]
    (127) rel_expression -> . rel_expression_1 rel_exp_op
    (131) rel_expression_1 -> . exp rel_exp_1_op
    (137) exp -> . term exp_op
    (141) term -> . factor term_op
    (155) factor -> . fact_neg fact_body
    (156) fact_neg -> . -
    (157) fact_neg -> . ~
    (158) fact_neg -> . empty
    (164) empty -> .

    NEW             shift and go to state 105
    {               shift and go to state 106
    [               shift and go to state 107
    -               shift and go to state 89
    ~               shift and go to state 90
    (               reduce using rule 164 (empty -> .)
    ID              reduce using rule 164 (empty -> .)
    CONST_I         reduce using rule 164 (empty -> .)
    CONST_F         reduce using rule 164 (empty -> .)
    CONST_CHAR      reduce using rule 164 (empty -> .)
    CONST_STRING    reduce using rule 164 (empty -> .)
    CONST_BOOL      reduce using rule 164 (empty -> .)

    ass_value                      shift and go to state 100
    create_obj                     shift and go to state 101
    expression                     shift and go to state 102
    matrix_exp                     shift and go to state 103
    vector_exp                     shift and go to state 104
    rel_expression                 shift and go to state 83
    rel_expression_1               shift and go to state 84
    exp                            shift and go to state 85
    term                           shift and go to state 86
    factor                         shift and go to state 87
    fact_neg                       shift and go to state 88
    empty                          shift and go to state 91

state 77

    (47) id_access -> id_mat_acc id_var_acc .

    =               reduce using rule 47 (id_access -> id_mat_acc id_var_acc .)
    *               reduce using rule 47 (id_access -> id_mat_acc id_var_acc .)
    /               reduce using rule 47 (id_access -> id_mat_acc id_var_acc .)
    %               reduce using rule 47 (id_access -> id_mat_acc id_var_acc .)
    +               reduce using rule 47 (id_access -> id_mat_acc id_var_acc .)
    -               reduce using rule 47 (id_access -> id_mat_acc id_var_acc .)
    <               reduce using rule 47 (id_access -> id_mat_acc id_var_acc .)
    LESS_EQUAL_THAN reduce using rule 47 (id_access -> id_mat_acc id_var_acc .)
    >               reduce using rule 47 (id_access -> id_mat_acc id_var_acc .)
    GREATER_EQUAL_THAN reduce using rule 47 (id_access -> id_mat_acc id_var_acc .)
    EQUAL           reduce using rule 47 (id_access -> id_mat_acc id_var_acc .)
    NOT_EQUAL       reduce using rule 47 (id_access -> id_mat_acc id_var_acc .)
    AND             reduce using rule 47 (id_access -> id_mat_acc id_var_acc .)
    OR              reduce using rule 47 (id_access -> id_mat_acc id_var_acc .)
    XOR             reduce using rule 47 (id_access -> id_mat_acc id_var_acc .)
    ,               reduce using rule 47 (id_access -> id_mat_acc id_var_acc .)
    ]               reduce using rule 47 (id_access -> id_mat_acc id_var_acc .)
    ;               reduce using rule 47 (id_access -> id_mat_acc id_var_acc .)
    )               reduce using rule 47 (id_access -> id_mat_acc id_var_acc .)


state 78

    (50) id_var_acc -> . . ID id_mat_acc

    ID              shift and go to state 108


state 79

    (51) id_var_acc -> empty .

    =               reduce using rule 51 (id_var_acc -> empty .)
    *               reduce using rule 51 (id_var_acc -> empty .)
    /               reduce using rule 51 (id_var_acc -> empty .)
    %               reduce using rule 51 (id_var_acc -> empty .)
    +               reduce using rule 51 (id_var_acc -> empty .)
    -               reduce using rule 51 (id_var_acc -> empty .)
    <               reduce using rule 51 (id_var_acc -> empty .)
    LESS_EQUAL_THAN reduce using rule 51 (id_var_acc -> empty .)
    >               reduce using rule 51 (id_var_acc -> empty .)
    GREATER_EQUAL_THAN reduce using rule 51 (id_var_acc -> empty .)
    EQUAL           reduce using rule 51 (id_var_acc -> empty .)
    NOT_EQUAL       reduce using rule 51 (id_var_acc -> empty .)
    AND             reduce using rule 51 (id_var_acc -> empty .)
    OR              reduce using rule 51 (id_var_acc -> empty .)
    XOR             reduce using rule 51 (id_var_acc -> empty .)
    ,               reduce using rule 51 (id_var_acc -> empty .)
    ]               reduce using rule 51 (id_var_acc -> empty .)
    ;               reduce using rule 51 (id_var_acc -> empty .)
    )               reduce using rule 51 (id_var_acc -> empty .)


state 80

    (67) mat_vec_access -> [ mat_vec_index . mat_access ]
    (70) mat_access -> . , mat_vec_index
    (71) mat_access -> . empty
    (164) empty -> .

    ,               shift and go to state 110
    ]               reduce using rule 164 (empty -> .)

    mat_access                     shift and go to state 109
    empty                          shift and go to state 111

state 81

    (68) mat_vec_index -> _ .

    ,               reduce using rule 68 (mat_vec_index -> _ .)
    ]               reduce using rule 68 (mat_vec_index -> _ .)


state 82

    (69) mat_vec_index -> expression .

    ,               reduce using rule 69 (mat_vec_index -> expression .)
    ]               reduce using rule 69 (mat_vec_index -> expression .)


state 83

    (122) expression -> rel_expression . expression_op
    (123) expression_op -> . AND expression
    (124) expression_op -> . OR expression
    (125) expression_op -> . XOR expression
    (126) expression_op -> . empty
    (164) empty -> .

    AND             shift and go to state 113
    OR              shift and go to state 114
    XOR             shift and go to state 115
    ,               reduce using rule 164 (empty -> .)
    ]               reduce using rule 164 (empty -> .)
    ;               reduce using rule 164 (empty -> .)
    )               reduce using rule 164 (empty -> .)

    expression_op                  shift and go to state 112
    empty                          shift and go to state 116

state 84

    (127) rel_expression -> rel_expression_1 . rel_exp_op
    (128) rel_exp_op -> . EQUAL rel_expression
    (129) rel_exp_op -> . NOT_EQUAL rel_expression
    (130) rel_exp_op -> . empty
    (164) empty -> .

    EQUAL           shift and go to state 118
    NOT_EQUAL       shift and go to state 119
    AND             reduce using rule 164 (empty -> .)
    OR              reduce using rule 164 (empty -> .)
    XOR             reduce using rule 164 (empty -> .)
    ,               reduce using rule 164 (empty -> .)
    ]               reduce using rule 164 (empty -> .)
    ;               reduce using rule 164 (empty -> .)
    )               reduce using rule 164 (empty -> .)

    rel_exp_op                     shift and go to state 117
    empty                          shift and go to state 120

state 85

    (131) rel_expression_1 -> exp . rel_exp_1_op
    (132) rel_exp_1_op -> . < rel_expression_1
    (133) rel_exp_1_op -> . LESS_EQUAL_THAN rel_expression_1
    (134) rel_exp_1_op -> . > rel_expression_1
    (135) rel_exp_1_op -> . GREATER_EQUAL_THAN rel_expression_1
    (136) rel_exp_1_op -> . empty
    (164) empty -> .

    <               shift and go to state 122
    LESS_EQUAL_THAN shift and go to state 123
    >               shift and go to state 124
    GREATER_EQUAL_THAN shift and go to state 125
    EQUAL           reduce using rule 164 (empty -> .)
    NOT_EQUAL       reduce using rule 164 (empty -> .)
    AND             reduce using rule 164 (empty -> .)
    OR              reduce using rule 164 (empty -> .)
    XOR             reduce using rule 164 (empty -> .)
    ,               reduce using rule 164 (empty -> .)
    ]               reduce using rule 164 (empty -> .)
    ;               reduce using rule 164 (empty -> .)
    )               reduce using rule 164 (empty -> .)

    rel_exp_1_op                   shift and go to state 121
    empty                          shift and go to state 126

state 86

    (137) exp -> term . exp_op
    (138) exp_op -> . + exp
    (139) exp_op -> . - exp
    (140) exp_op -> . empty
    (164) empty -> .

    +               shift and go to state 128
    -               shift and go to state 129
    <               reduce using rule 164 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 164 (empty -> .)
    >               reduce using rule 164 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 164 (empty -> .)
    EQUAL           reduce using rule 164 (empty -> .)
    NOT_EQUAL       reduce using rule 164 (empty -> .)
    AND             reduce using rule 164 (empty -> .)
    OR              reduce using rule 164 (empty -> .)
    XOR             reduce using rule 164 (empty -> .)
    ,               reduce using rule 164 (empty -> .)
    ]               reduce using rule 164 (empty -> .)
    ;               reduce using rule 164 (empty -> .)
    )               reduce using rule 164 (empty -> .)

    exp_op                         shift and go to state 127
    empty                          shift and go to state 130

state 87

    (141) term -> factor . term_op
    (142) term_op -> . * term
    (143) term_op -> . / term
    (144) term_op -> . % term
    (145) term_op -> . empty
    (164) empty -> .

    *               shift and go to state 132
    /               shift and go to state 133
    %               shift and go to state 134
    +               reduce using rule 164 (empty -> .)
    -               reduce using rule 164 (empty -> .)
    <               reduce using rule 164 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 164 (empty -> .)
    >               reduce using rule 164 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 164 (empty -> .)
    EQUAL           reduce using rule 164 (empty -> .)
    NOT_EQUAL       reduce using rule 164 (empty -> .)
    AND             reduce using rule 164 (empty -> .)
    OR              reduce using rule 164 (empty -> .)
    XOR             reduce using rule 164 (empty -> .)
    ,               reduce using rule 164 (empty -> .)
    ]               reduce using rule 164 (empty -> .)
    ;               reduce using rule 164 (empty -> .)
    )               reduce using rule 164 (empty -> .)

    term_op                        shift and go to state 131
    empty                          shift and go to state 135

state 88

    (155) factor -> fact_neg . fact_body
    (159) fact_body -> . ( expression )
    (160) fact_body -> . var_cte
    (161) fact_body -> . ID fact_id
    (150) var_cte -> . CONST_I
    (151) var_cte -> . CONST_F
    (152) var_cte -> . CONST_CHAR
    (153) var_cte -> . CONST_STRING
    (154) var_cte -> . CONST_BOOL

    (               shift and go to state 137
    ID              shift and go to state 139
    CONST_I         shift and go to state 140
    CONST_F         shift and go to state 141
    CONST_CHAR      shift and go to state 142
    CONST_STRING    shift and go to state 143
    CONST_BOOL      shift and go to state 144

    fact_body                      shift and go to state 136
    var_cte                        shift and go to state 138

state 89

    (156) fact_neg -> - .

    (               reduce using rule 156 (fact_neg -> - .)
    ID              reduce using rule 156 (fact_neg -> - .)
    CONST_I         reduce using rule 156 (fact_neg -> - .)
    CONST_F         reduce using rule 156 (fact_neg -> - .)
    CONST_CHAR      reduce using rule 156 (fact_neg -> - .)
    CONST_STRING    reduce using rule 156 (fact_neg -> - .)
    CONST_BOOL      reduce using rule 156 (fact_neg -> - .)


state 90

    (157) fact_neg -> ~ .

    (               reduce using rule 157 (fact_neg -> ~ .)
    ID              reduce using rule 157 (fact_neg -> ~ .)
    CONST_I         reduce using rule 157 (fact_neg -> ~ .)
    CONST_F         reduce using rule 157 (fact_neg -> ~ .)
    CONST_CHAR      reduce using rule 157 (fact_neg -> ~ .)
    CONST_STRING    reduce using rule 157 (fact_neg -> ~ .)
    CONST_BOOL      reduce using rule 157 (fact_neg -> ~ .)


state 91

    (158) fact_neg -> empty .

    (               reduce using rule 158 (fact_neg -> empty .)
    ID              reduce using rule 158 (fact_neg -> empty .)
    CONST_I         reduce using rule 158 (fact_neg -> empty .)
    CONST_F         reduce using rule 158 (fact_neg -> empty .)
    CONST_CHAR      reduce using rule 158 (fact_neg -> empty .)
    CONST_STRING    reduce using rule 158 (fact_neg -> empty .)
    CONST_BOOL      reduce using rule 158 (fact_neg -> empty .)


state 92

    (30) vars -> VAR ids : . vars_type ;
    (31) vars_type -> . type vars_tp_a
    (32) vars_type -> . ID vars_tp_b
    (146) type -> . INT
    (147) type -> . DOUBLE
    (148) type -> . CHAR
    (149) type -> . BOOL

    ID              shift and go to state 147
    INT             shift and go to state 52
    DOUBLE          shift and go to state 53
    CHAR            shift and go to state 54
    BOOL            shift and go to state 55

    vars_type                      shift and go to state 145
    type                           shift and go to state 146

state 93

    (27) ids -> ID m_ids .

    :               reduce using rule 27 (ids -> ID m_ids .)


state 94

    (28) m_ids -> , . ids
    (27) ids -> . ID m_ids

    ID              shift and go to state 68

    ids                            shift and go to state 148

state 95

    (29) m_ids -> empty .

    :               reduce using rule 29 (m_ids -> empty .)


state 96

    (41) vector -> VEC ids : . vec_mat_type [ CONST_I ] vec_assgn ;
    (39) vec_mat_type -> . type
    (40) vec_mat_type -> . ID
    (146) type -> . INT
    (147) type -> . DOUBLE
    (148) type -> . CHAR
    (149) type -> . BOOL

    ID              shift and go to state 151
    INT             shift and go to state 52
    DOUBLE          shift and go to state 53
    CHAR            shift and go to state 54
    BOOL            shift and go to state 55

    vec_mat_type                   shift and go to state 149
    type                           shift and go to state 150

state 97

    (44) matrix -> MAT ids : . vec_mat_type [ CONST_I , CONST_I ] mat_assgn ;
    (39) vec_mat_type -> . type
    (40) vec_mat_type -> . ID
    (146) type -> . INT
    (147) type -> . DOUBLE
    (148) type -> . CHAR
    (149) type -> . BOOL

    ID              shift and go to state 151
    INT             shift and go to state 52
    DOUBLE          shift and go to state 53
    CHAR            shift and go to state 54
    BOOL            shift and go to state 55

    vec_mat_type                   shift and go to state 152
    type                           shift and go to state 150

state 98

    (72) method -> func_spec ( opt_method_param ) . block
    (94) block -> . { bstmt }

    {               shift and go to state 154

    block                          shift and go to state 153

state 99

    (80) method_param -> ID : . param_type param_mat_vec more_params
    (83) param_type -> . type
    (84) param_type -> . ID
    (146) type -> . INT
    (147) type -> . DOUBLE
    (148) type -> . CHAR
    (149) type -> . BOOL

    ID              shift and go to state 155
    INT             shift and go to state 52
    DOUBLE          shift and go to state 53
    CHAR            shift and go to state 54
    BOOL            shift and go to state 55

    param_type                     shift and go to state 156
    type                           shift and go to state 157

state 100

    (52) assignment -> ID id_access = ass_value . ;

    ;               shift and go to state 158


state 101

    (53) ass_value -> create_obj .

    ;               reduce using rule 53 (ass_value -> create_obj .)


state 102

    (54) ass_value -> expression .

    ;               reduce using rule 54 (ass_value -> expression .)


state 103

    (55) ass_value -> matrix_exp .

    ;               reduce using rule 55 (ass_value -> matrix_exp .)


state 104

    (56) ass_value -> vector_exp .

    ;               reduce using rule 56 (ass_value -> vector_exp .)


state 105

    (89) create_obj -> NEW . func_call
    (90) func_call -> . ( func_param )

    (               shift and go to state 160

    func_call                      shift and go to state 159

state 106

    (63) matrix_exp -> { . mat_elem }
    (64) mat_elem -> . vector_exp mat_more
    (57) vector_exp -> . [ vec_elem ]

    [               shift and go to state 107

    mat_elem                       shift and go to state 161
    vector_exp                     shift and go to state 162

state 107

    (57) vector_exp -> [ . vec_elem ]
    (58) vec_elem -> . vec_object vec_more
    (59) vec_object -> . create_obj
    (60) vec_object -> . expression
    (89) create_obj -> . NEW func_call
    (122) expression -> . rel_expression expression_op
    (127) rel_expression -> . rel_expression_1 rel_exp_op
    (131) rel_expression_1 -> . exp rel_exp_1_op
    (137) exp -> . term exp_op
    (141) term -> . factor term_op
    (155) factor -> . fact_neg fact_body
    (156) fact_neg -> . -
    (157) fact_neg -> . ~
    (158) fact_neg -> . empty
    (164) empty -> .

    NEW             shift and go to state 105
    -               shift and go to state 89
    ~               shift and go to state 90
    (               reduce using rule 164 (empty -> .)
    ID              reduce using rule 164 (empty -> .)
    CONST_I         reduce using rule 164 (empty -> .)
    CONST_F         reduce using rule 164 (empty -> .)
    CONST_CHAR      reduce using rule 164 (empty -> .)
    CONST_STRING    reduce using rule 164 (empty -> .)
    CONST_BOOL      reduce using rule 164 (empty -> .)

    vec_elem                       shift and go to state 163
    vec_object                     shift and go to state 164
    create_obj                     shift and go to state 165
    expression                     shift and go to state 166
    rel_expression                 shift and go to state 83
    rel_expression_1               shift and go to state 84
    exp                            shift and go to state 85
    term                           shift and go to state 86
    factor                         shift and go to state 87
    fact_neg                       shift and go to state 88
    empty                          shift and go to state 91

state 108

    (50) id_var_acc -> . ID . id_mat_acc
    (48) id_mat_acc -> . mat_vec_access
    (49) id_mat_acc -> . empty
    (67) mat_vec_access -> . [ mat_vec_index mat_access ]
    (164) empty -> .

    [               shift and go to state 63
    =               reduce using rule 164 (empty -> .)
    *               reduce using rule 164 (empty -> .)
    /               reduce using rule 164 (empty -> .)
    %               reduce using rule 164 (empty -> .)
    +               reduce using rule 164 (empty -> .)
    -               reduce using rule 164 (empty -> .)
    <               reduce using rule 164 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 164 (empty -> .)
    >               reduce using rule 164 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 164 (empty -> .)
    EQUAL           reduce using rule 164 (empty -> .)
    NOT_EQUAL       reduce using rule 164 (empty -> .)
    AND             reduce using rule 164 (empty -> .)
    OR              reduce using rule 164 (empty -> .)
    XOR             reduce using rule 164 (empty -> .)
    ,               reduce using rule 164 (empty -> .)
    ]               reduce using rule 164 (empty -> .)
    ;               reduce using rule 164 (empty -> .)
    )               reduce using rule 164 (empty -> .)

    id_mat_acc                     shift and go to state 167
    mat_vec_access                 shift and go to state 61
    empty                          shift and go to state 62

state 109

    (67) mat_vec_access -> [ mat_vec_index mat_access . ]

    ]               shift and go to state 168


state 110

    (70) mat_access -> , . mat_vec_index
    (68) mat_vec_index -> . _
    (69) mat_vec_index -> . expression
    (122) expression -> . rel_expression expression_op
    (127) rel_expression -> . rel_expression_1 rel_exp_op
    (131) rel_expression_1 -> . exp rel_exp_1_op
    (137) exp -> . term exp_op
    (141) term -> . factor term_op
    (155) factor -> . fact_neg fact_body
    (156) fact_neg -> . -
    (157) fact_neg -> . ~
    (158) fact_neg -> . empty
    (164) empty -> .

    _               shift and go to state 81
    -               shift and go to state 89
    ~               shift and go to state 90
    (               reduce using rule 164 (empty -> .)
    ID              reduce using rule 164 (empty -> .)
    CONST_I         reduce using rule 164 (empty -> .)
    CONST_F         reduce using rule 164 (empty -> .)
    CONST_CHAR      reduce using rule 164 (empty -> .)
    CONST_STRING    reduce using rule 164 (empty -> .)
    CONST_BOOL      reduce using rule 164 (empty -> .)

    mat_vec_index                  shift and go to state 169
    expression                     shift and go to state 82
    rel_expression                 shift and go to state 83
    rel_expression_1               shift and go to state 84
    exp                            shift and go to state 85
    term                           shift and go to state 86
    factor                         shift and go to state 87
    fact_neg                       shift and go to state 88
    empty                          shift and go to state 91

state 111

    (71) mat_access -> empty .

    ]               reduce using rule 71 (mat_access -> empty .)


state 112

    (122) expression -> rel_expression expression_op .

    ,               reduce using rule 122 (expression -> rel_expression expression_op .)
    ]               reduce using rule 122 (expression -> rel_expression expression_op .)
    ;               reduce using rule 122 (expression -> rel_expression expression_op .)
    )               reduce using rule 122 (expression -> rel_expression expression_op .)


state 113

    (123) expression_op -> AND . expression
    (122) expression -> . rel_expression expression_op
    (127) rel_expression -> . rel_expression_1 rel_exp_op
    (131) rel_expression_1 -> . exp rel_exp_1_op
    (137) exp -> . term exp_op
    (141) term -> . factor term_op
    (155) factor -> . fact_neg fact_body
    (156) fact_neg -> . -
    (157) fact_neg -> . ~
    (158) fact_neg -> . empty
    (164) empty -> .

    -               shift and go to state 89
    ~               shift and go to state 90
    (               reduce using rule 164 (empty -> .)
    ID              reduce using rule 164 (empty -> .)
    CONST_I         reduce using rule 164 (empty -> .)
    CONST_F         reduce using rule 164 (empty -> .)
    CONST_CHAR      reduce using rule 164 (empty -> .)
    CONST_STRING    reduce using rule 164 (empty -> .)
    CONST_BOOL      reduce using rule 164 (empty -> .)

    expression                     shift and go to state 170
    rel_expression                 shift and go to state 83
    rel_expression_1               shift and go to state 84
    exp                            shift and go to state 85
    term                           shift and go to state 86
    factor                         shift and go to state 87
    fact_neg                       shift and go to state 88
    empty                          shift and go to state 91

state 114

    (124) expression_op -> OR . expression
    (122) expression -> . rel_expression expression_op
    (127) rel_expression -> . rel_expression_1 rel_exp_op
    (131) rel_expression_1 -> . exp rel_exp_1_op
    (137) exp -> . term exp_op
    (141) term -> . factor term_op
    (155) factor -> . fact_neg fact_body
    (156) fact_neg -> . -
    (157) fact_neg -> . ~
    (158) fact_neg -> . empty
    (164) empty -> .

    -               shift and go to state 89
    ~               shift and go to state 90
    (               reduce using rule 164 (empty -> .)
    ID              reduce using rule 164 (empty -> .)
    CONST_I         reduce using rule 164 (empty -> .)
    CONST_F         reduce using rule 164 (empty -> .)
    CONST_CHAR      reduce using rule 164 (empty -> .)
    CONST_STRING    reduce using rule 164 (empty -> .)
    CONST_BOOL      reduce using rule 164 (empty -> .)

    expression                     shift and go to state 171
    rel_expression                 shift and go to state 83
    rel_expression_1               shift and go to state 84
    exp                            shift and go to state 85
    term                           shift and go to state 86
    factor                         shift and go to state 87
    fact_neg                       shift and go to state 88
    empty                          shift and go to state 91

state 115

    (125) expression_op -> XOR . expression
    (122) expression -> . rel_expression expression_op
    (127) rel_expression -> . rel_expression_1 rel_exp_op
    (131) rel_expression_1 -> . exp rel_exp_1_op
    (137) exp -> . term exp_op
    (141) term -> . factor term_op
    (155) factor -> . fact_neg fact_body
    (156) fact_neg -> . -
    (157) fact_neg -> . ~
    (158) fact_neg -> . empty
    (164) empty -> .

    -               shift and go to state 89
    ~               shift and go to state 90
    (               reduce using rule 164 (empty -> .)
    ID              reduce using rule 164 (empty -> .)
    CONST_I         reduce using rule 164 (empty -> .)
    CONST_F         reduce using rule 164 (empty -> .)
    CONST_CHAR      reduce using rule 164 (empty -> .)
    CONST_STRING    reduce using rule 164 (empty -> .)
    CONST_BOOL      reduce using rule 164 (empty -> .)

    expression                     shift and go to state 172
    rel_expression                 shift and go to state 83
    rel_expression_1               shift and go to state 84
    exp                            shift and go to state 85
    term                           shift and go to state 86
    factor                         shift and go to state 87
    fact_neg                       shift and go to state 88
    empty                          shift and go to state 91

state 116

    (126) expression_op -> empty .

    ,               reduce using rule 126 (expression_op -> empty .)
    ]               reduce using rule 126 (expression_op -> empty .)
    ;               reduce using rule 126 (expression_op -> empty .)
    )               reduce using rule 126 (expression_op -> empty .)


state 117

    (127) rel_expression -> rel_expression_1 rel_exp_op .

    AND             reduce using rule 127 (rel_expression -> rel_expression_1 rel_exp_op .)
    OR              reduce using rule 127 (rel_expression -> rel_expression_1 rel_exp_op .)
    XOR             reduce using rule 127 (rel_expression -> rel_expression_1 rel_exp_op .)
    ,               reduce using rule 127 (rel_expression -> rel_expression_1 rel_exp_op .)
    ]               reduce using rule 127 (rel_expression -> rel_expression_1 rel_exp_op .)
    ;               reduce using rule 127 (rel_expression -> rel_expression_1 rel_exp_op .)
    )               reduce using rule 127 (rel_expression -> rel_expression_1 rel_exp_op .)


state 118

    (128) rel_exp_op -> EQUAL . rel_expression
    (127) rel_expression -> . rel_expression_1 rel_exp_op
    (131) rel_expression_1 -> . exp rel_exp_1_op
    (137) exp -> . term exp_op
    (141) term -> . factor term_op
    (155) factor -> . fact_neg fact_body
    (156) fact_neg -> . -
    (157) fact_neg -> . ~
    (158) fact_neg -> . empty
    (164) empty -> .

    -               shift and go to state 89
    ~               shift and go to state 90
    (               reduce using rule 164 (empty -> .)
    ID              reduce using rule 164 (empty -> .)
    CONST_I         reduce using rule 164 (empty -> .)
    CONST_F         reduce using rule 164 (empty -> .)
    CONST_CHAR      reduce using rule 164 (empty -> .)
    CONST_STRING    reduce using rule 164 (empty -> .)
    CONST_BOOL      reduce using rule 164 (empty -> .)

    rel_expression                 shift and go to state 173
    rel_expression_1               shift and go to state 84
    exp                            shift and go to state 85
    term                           shift and go to state 86
    factor                         shift and go to state 87
    fact_neg                       shift and go to state 88
    empty                          shift and go to state 91

state 119

    (129) rel_exp_op -> NOT_EQUAL . rel_expression
    (127) rel_expression -> . rel_expression_1 rel_exp_op
    (131) rel_expression_1 -> . exp rel_exp_1_op
    (137) exp -> . term exp_op
    (141) term -> . factor term_op
    (155) factor -> . fact_neg fact_body
    (156) fact_neg -> . -
    (157) fact_neg -> . ~
    (158) fact_neg -> . empty
    (164) empty -> .

    -               shift and go to state 89
    ~               shift and go to state 90
    (               reduce using rule 164 (empty -> .)
    ID              reduce using rule 164 (empty -> .)
    CONST_I         reduce using rule 164 (empty -> .)
    CONST_F         reduce using rule 164 (empty -> .)
    CONST_CHAR      reduce using rule 164 (empty -> .)
    CONST_STRING    reduce using rule 164 (empty -> .)
    CONST_BOOL      reduce using rule 164 (empty -> .)

    rel_expression                 shift and go to state 174
    rel_expression_1               shift and go to state 84
    exp                            shift and go to state 85
    term                           shift and go to state 86
    factor                         shift and go to state 87
    fact_neg                       shift and go to state 88
    empty                          shift and go to state 91

state 120

    (130) rel_exp_op -> empty .

    AND             reduce using rule 130 (rel_exp_op -> empty .)
    OR              reduce using rule 130 (rel_exp_op -> empty .)
    XOR             reduce using rule 130 (rel_exp_op -> empty .)
    ,               reduce using rule 130 (rel_exp_op -> empty .)
    ]               reduce using rule 130 (rel_exp_op -> empty .)
    ;               reduce using rule 130 (rel_exp_op -> empty .)
    )               reduce using rule 130 (rel_exp_op -> empty .)


state 121

    (131) rel_expression_1 -> exp rel_exp_1_op .

    EQUAL           reduce using rule 131 (rel_expression_1 -> exp rel_exp_1_op .)
    NOT_EQUAL       reduce using rule 131 (rel_expression_1 -> exp rel_exp_1_op .)
    AND             reduce using rule 131 (rel_expression_1 -> exp rel_exp_1_op .)
    OR              reduce using rule 131 (rel_expression_1 -> exp rel_exp_1_op .)
    XOR             reduce using rule 131 (rel_expression_1 -> exp rel_exp_1_op .)
    ,               reduce using rule 131 (rel_expression_1 -> exp rel_exp_1_op .)
    ]               reduce using rule 131 (rel_expression_1 -> exp rel_exp_1_op .)
    ;               reduce using rule 131 (rel_expression_1 -> exp rel_exp_1_op .)
    )               reduce using rule 131 (rel_expression_1 -> exp rel_exp_1_op .)


state 122

    (132) rel_exp_1_op -> < . rel_expression_1
    (131) rel_expression_1 -> . exp rel_exp_1_op
    (137) exp -> . term exp_op
    (141) term -> . factor term_op
    (155) factor -> . fact_neg fact_body
    (156) fact_neg -> . -
    (157) fact_neg -> . ~
    (158) fact_neg -> . empty
    (164) empty -> .

    -               shift and go to state 89
    ~               shift and go to state 90
    (               reduce using rule 164 (empty -> .)
    ID              reduce using rule 164 (empty -> .)
    CONST_I         reduce using rule 164 (empty -> .)
    CONST_F         reduce using rule 164 (empty -> .)
    CONST_CHAR      reduce using rule 164 (empty -> .)
    CONST_STRING    reduce using rule 164 (empty -> .)
    CONST_BOOL      reduce using rule 164 (empty -> .)

    rel_expression_1               shift and go to state 175
    exp                            shift and go to state 85
    term                           shift and go to state 86
    factor                         shift and go to state 87
    fact_neg                       shift and go to state 88
    empty                          shift and go to state 91

state 123

    (133) rel_exp_1_op -> LESS_EQUAL_THAN . rel_expression_1
    (131) rel_expression_1 -> . exp rel_exp_1_op
    (137) exp -> . term exp_op
    (141) term -> . factor term_op
    (155) factor -> . fact_neg fact_body
    (156) fact_neg -> . -
    (157) fact_neg -> . ~
    (158) fact_neg -> . empty
    (164) empty -> .

    -               shift and go to state 89
    ~               shift and go to state 90
    (               reduce using rule 164 (empty -> .)
    ID              reduce using rule 164 (empty -> .)
    CONST_I         reduce using rule 164 (empty -> .)
    CONST_F         reduce using rule 164 (empty -> .)
    CONST_CHAR      reduce using rule 164 (empty -> .)
    CONST_STRING    reduce using rule 164 (empty -> .)
    CONST_BOOL      reduce using rule 164 (empty -> .)

    rel_expression_1               shift and go to state 176
    exp                            shift and go to state 85
    term                           shift and go to state 86
    factor                         shift and go to state 87
    fact_neg                       shift and go to state 88
    empty                          shift and go to state 91

state 124

    (134) rel_exp_1_op -> > . rel_expression_1
    (131) rel_expression_1 -> . exp rel_exp_1_op
    (137) exp -> . term exp_op
    (141) term -> . factor term_op
    (155) factor -> . fact_neg fact_body
    (156) fact_neg -> . -
    (157) fact_neg -> . ~
    (158) fact_neg -> . empty
    (164) empty -> .

    -               shift and go to state 89
    ~               shift and go to state 90
    (               reduce using rule 164 (empty -> .)
    ID              reduce using rule 164 (empty -> .)
    CONST_I         reduce using rule 164 (empty -> .)
    CONST_F         reduce using rule 164 (empty -> .)
    CONST_CHAR      reduce using rule 164 (empty -> .)
    CONST_STRING    reduce using rule 164 (empty -> .)
    CONST_BOOL      reduce using rule 164 (empty -> .)

    rel_expression_1               shift and go to state 177
    exp                            shift and go to state 85
    term                           shift and go to state 86
    factor                         shift and go to state 87
    fact_neg                       shift and go to state 88
    empty                          shift and go to state 91

state 125

    (135) rel_exp_1_op -> GREATER_EQUAL_THAN . rel_expression_1
    (131) rel_expression_1 -> . exp rel_exp_1_op
    (137) exp -> . term exp_op
    (141) term -> . factor term_op
    (155) factor -> . fact_neg fact_body
    (156) fact_neg -> . -
    (157) fact_neg -> . ~
    (158) fact_neg -> . empty
    (164) empty -> .

    -               shift and go to state 89
    ~               shift and go to state 90
    (               reduce using rule 164 (empty -> .)
    ID              reduce using rule 164 (empty -> .)
    CONST_I         reduce using rule 164 (empty -> .)
    CONST_F         reduce using rule 164 (empty -> .)
    CONST_CHAR      reduce using rule 164 (empty -> .)
    CONST_STRING    reduce using rule 164 (empty -> .)
    CONST_BOOL      reduce using rule 164 (empty -> .)

    rel_expression_1               shift and go to state 178
    exp                            shift and go to state 85
    term                           shift and go to state 86
    factor                         shift and go to state 87
    fact_neg                       shift and go to state 88
    empty                          shift and go to state 91

state 126

    (136) rel_exp_1_op -> empty .

    EQUAL           reduce using rule 136 (rel_exp_1_op -> empty .)
    NOT_EQUAL       reduce using rule 136 (rel_exp_1_op -> empty .)
    AND             reduce using rule 136 (rel_exp_1_op -> empty .)
    OR              reduce using rule 136 (rel_exp_1_op -> empty .)
    XOR             reduce using rule 136 (rel_exp_1_op -> empty .)
    ,               reduce using rule 136 (rel_exp_1_op -> empty .)
    ]               reduce using rule 136 (rel_exp_1_op -> empty .)
    ;               reduce using rule 136 (rel_exp_1_op -> empty .)
    )               reduce using rule 136 (rel_exp_1_op -> empty .)


state 127

    (137) exp -> term exp_op .

    <               reduce using rule 137 (exp -> term exp_op .)
    LESS_EQUAL_THAN reduce using rule 137 (exp -> term exp_op .)
    >               reduce using rule 137 (exp -> term exp_op .)
    GREATER_EQUAL_THAN reduce using rule 137 (exp -> term exp_op .)
    EQUAL           reduce using rule 137 (exp -> term exp_op .)
    NOT_EQUAL       reduce using rule 137 (exp -> term exp_op .)
    AND             reduce using rule 137 (exp -> term exp_op .)
    OR              reduce using rule 137 (exp -> term exp_op .)
    XOR             reduce using rule 137 (exp -> term exp_op .)
    ,               reduce using rule 137 (exp -> term exp_op .)
    ]               reduce using rule 137 (exp -> term exp_op .)
    ;               reduce using rule 137 (exp -> term exp_op .)
    )               reduce using rule 137 (exp -> term exp_op .)


state 128

    (138) exp_op -> + . exp
    (137) exp -> . term exp_op
    (141) term -> . factor term_op
    (155) factor -> . fact_neg fact_body
    (156) fact_neg -> . -
    (157) fact_neg -> . ~
    (158) fact_neg -> . empty
    (164) empty -> .

    -               shift and go to state 89
    ~               shift and go to state 90
    (               reduce using rule 164 (empty -> .)
    ID              reduce using rule 164 (empty -> .)
    CONST_I         reduce using rule 164 (empty -> .)
    CONST_F         reduce using rule 164 (empty -> .)
    CONST_CHAR      reduce using rule 164 (empty -> .)
    CONST_STRING    reduce using rule 164 (empty -> .)
    CONST_BOOL      reduce using rule 164 (empty -> .)

    exp                            shift and go to state 179
    term                           shift and go to state 86
    factor                         shift and go to state 87
    fact_neg                       shift and go to state 88
    empty                          shift and go to state 91

state 129

    (139) exp_op -> - . exp
    (137) exp -> . term exp_op
    (141) term -> . factor term_op
    (155) factor -> . fact_neg fact_body
    (156) fact_neg -> . -
    (157) fact_neg -> . ~
    (158) fact_neg -> . empty
    (164) empty -> .

    -               shift and go to state 89
    ~               shift and go to state 90
    (               reduce using rule 164 (empty -> .)
    ID              reduce using rule 164 (empty -> .)
    CONST_I         reduce using rule 164 (empty -> .)
    CONST_F         reduce using rule 164 (empty -> .)
    CONST_CHAR      reduce using rule 164 (empty -> .)
    CONST_STRING    reduce using rule 164 (empty -> .)
    CONST_BOOL      reduce using rule 164 (empty -> .)

    exp                            shift and go to state 180
    term                           shift and go to state 86
    factor                         shift and go to state 87
    fact_neg                       shift and go to state 88
    empty                          shift and go to state 91

state 130

    (140) exp_op -> empty .

    <               reduce using rule 140 (exp_op -> empty .)
    LESS_EQUAL_THAN reduce using rule 140 (exp_op -> empty .)
    >               reduce using rule 140 (exp_op -> empty .)
    GREATER_EQUAL_THAN reduce using rule 140 (exp_op -> empty .)
    EQUAL           reduce using rule 140 (exp_op -> empty .)
    NOT_EQUAL       reduce using rule 140 (exp_op -> empty .)
    AND             reduce using rule 140 (exp_op -> empty .)
    OR              reduce using rule 140 (exp_op -> empty .)
    XOR             reduce using rule 140 (exp_op -> empty .)
    ,               reduce using rule 140 (exp_op -> empty .)
    ]               reduce using rule 140 (exp_op -> empty .)
    ;               reduce using rule 140 (exp_op -> empty .)
    )               reduce using rule 140 (exp_op -> empty .)


state 131

    (141) term -> factor term_op .

    +               reduce using rule 141 (term -> factor term_op .)
    -               reduce using rule 141 (term -> factor term_op .)
    <               reduce using rule 141 (term -> factor term_op .)
    LESS_EQUAL_THAN reduce using rule 141 (term -> factor term_op .)
    >               reduce using rule 141 (term -> factor term_op .)
    GREATER_EQUAL_THAN reduce using rule 141 (term -> factor term_op .)
    EQUAL           reduce using rule 141 (term -> factor term_op .)
    NOT_EQUAL       reduce using rule 141 (term -> factor term_op .)
    AND             reduce using rule 141 (term -> factor term_op .)
    OR              reduce using rule 141 (term -> factor term_op .)
    XOR             reduce using rule 141 (term -> factor term_op .)
    ,               reduce using rule 141 (term -> factor term_op .)
    ]               reduce using rule 141 (term -> factor term_op .)
    ;               reduce using rule 141 (term -> factor term_op .)
    )               reduce using rule 141 (term -> factor term_op .)


state 132

    (142) term_op -> * . term
    (141) term -> . factor term_op
    (155) factor -> . fact_neg fact_body
    (156) fact_neg -> . -
    (157) fact_neg -> . ~
    (158) fact_neg -> . empty
    (164) empty -> .

    -               shift and go to state 89
    ~               shift and go to state 90
    (               reduce using rule 164 (empty -> .)
    ID              reduce using rule 164 (empty -> .)
    CONST_I         reduce using rule 164 (empty -> .)
    CONST_F         reduce using rule 164 (empty -> .)
    CONST_CHAR      reduce using rule 164 (empty -> .)
    CONST_STRING    reduce using rule 164 (empty -> .)
    CONST_BOOL      reduce using rule 164 (empty -> .)

    term                           shift and go to state 181
    factor                         shift and go to state 87
    fact_neg                       shift and go to state 88
    empty                          shift and go to state 91

state 133

    (143) term_op -> / . term
    (141) term -> . factor term_op
    (155) factor -> . fact_neg fact_body
    (156) fact_neg -> . -
    (157) fact_neg -> . ~
    (158) fact_neg -> . empty
    (164) empty -> .

    -               shift and go to state 89
    ~               shift and go to state 90
    (               reduce using rule 164 (empty -> .)
    ID              reduce using rule 164 (empty -> .)
    CONST_I         reduce using rule 164 (empty -> .)
    CONST_F         reduce using rule 164 (empty -> .)
    CONST_CHAR      reduce using rule 164 (empty -> .)
    CONST_STRING    reduce using rule 164 (empty -> .)
    CONST_BOOL      reduce using rule 164 (empty -> .)

    term                           shift and go to state 182
    factor                         shift and go to state 87
    fact_neg                       shift and go to state 88
    empty                          shift and go to state 91

state 134

    (144) term_op -> % . term
    (141) term -> . factor term_op
    (155) factor -> . fact_neg fact_body
    (156) fact_neg -> . -
    (157) fact_neg -> . ~
    (158) fact_neg -> . empty
    (164) empty -> .

    -               shift and go to state 89
    ~               shift and go to state 90
    (               reduce using rule 164 (empty -> .)
    ID              reduce using rule 164 (empty -> .)
    CONST_I         reduce using rule 164 (empty -> .)
    CONST_F         reduce using rule 164 (empty -> .)
    CONST_CHAR      reduce using rule 164 (empty -> .)
    CONST_STRING    reduce using rule 164 (empty -> .)
    CONST_BOOL      reduce using rule 164 (empty -> .)

    term                           shift and go to state 183
    factor                         shift and go to state 87
    fact_neg                       shift and go to state 88
    empty                          shift and go to state 91

state 135

    (145) term_op -> empty .

    +               reduce using rule 145 (term_op -> empty .)
    -               reduce using rule 145 (term_op -> empty .)
    <               reduce using rule 145 (term_op -> empty .)
    LESS_EQUAL_THAN reduce using rule 145 (term_op -> empty .)
    >               reduce using rule 145 (term_op -> empty .)
    GREATER_EQUAL_THAN reduce using rule 145 (term_op -> empty .)
    EQUAL           reduce using rule 145 (term_op -> empty .)
    NOT_EQUAL       reduce using rule 145 (term_op -> empty .)
    AND             reduce using rule 145 (term_op -> empty .)
    OR              reduce using rule 145 (term_op -> empty .)
    XOR             reduce using rule 145 (term_op -> empty .)
    ,               reduce using rule 145 (term_op -> empty .)
    ]               reduce using rule 145 (term_op -> empty .)
    ;               reduce using rule 145 (term_op -> empty .)
    )               reduce using rule 145 (term_op -> empty .)


state 136

    (155) factor -> fact_neg fact_body .

    *               reduce using rule 155 (factor -> fact_neg fact_body .)
    /               reduce using rule 155 (factor -> fact_neg fact_body .)
    %               reduce using rule 155 (factor -> fact_neg fact_body .)
    +               reduce using rule 155 (factor -> fact_neg fact_body .)
    -               reduce using rule 155 (factor -> fact_neg fact_body .)
    <               reduce using rule 155 (factor -> fact_neg fact_body .)
    LESS_EQUAL_THAN reduce using rule 155 (factor -> fact_neg fact_body .)
    >               reduce using rule 155 (factor -> fact_neg fact_body .)
    GREATER_EQUAL_THAN reduce using rule 155 (factor -> fact_neg fact_body .)
    EQUAL           reduce using rule 155 (factor -> fact_neg fact_body .)
    NOT_EQUAL       reduce using rule 155 (factor -> fact_neg fact_body .)
    AND             reduce using rule 155 (factor -> fact_neg fact_body .)
    OR              reduce using rule 155 (factor -> fact_neg fact_body .)
    XOR             reduce using rule 155 (factor -> fact_neg fact_body .)
    ,               reduce using rule 155 (factor -> fact_neg fact_body .)
    ]               reduce using rule 155 (factor -> fact_neg fact_body .)
    ;               reduce using rule 155 (factor -> fact_neg fact_body .)
    )               reduce using rule 155 (factor -> fact_neg fact_body .)


state 137

    (159) fact_body -> ( . expression )
    (122) expression -> . rel_expression expression_op
    (127) rel_expression -> . rel_expression_1 rel_exp_op
    (131) rel_expression_1 -> . exp rel_exp_1_op
    (137) exp -> . term exp_op
    (141) term -> . factor term_op
    (155) factor -> . fact_neg fact_body
    (156) fact_neg -> . -
    (157) fact_neg -> . ~
    (158) fact_neg -> . empty
    (164) empty -> .

    -               shift and go to state 89
    ~               shift and go to state 90
    (               reduce using rule 164 (empty -> .)
    ID              reduce using rule 164 (empty -> .)
    CONST_I         reduce using rule 164 (empty -> .)
    CONST_F         reduce using rule 164 (empty -> .)
    CONST_CHAR      reduce using rule 164 (empty -> .)
    CONST_STRING    reduce using rule 164 (empty -> .)
    CONST_BOOL      reduce using rule 164 (empty -> .)

    expression                     shift and go to state 184
    rel_expression                 shift and go to state 83
    rel_expression_1               shift and go to state 84
    exp                            shift and go to state 85
    term                           shift and go to state 86
    factor                         shift and go to state 87
    fact_neg                       shift and go to state 88
    empty                          shift and go to state 91

state 138

    (160) fact_body -> var_cte .

    *               reduce using rule 160 (fact_body -> var_cte .)
    /               reduce using rule 160 (fact_body -> var_cte .)
    %               reduce using rule 160 (fact_body -> var_cte .)
    +               reduce using rule 160 (fact_body -> var_cte .)
    -               reduce using rule 160 (fact_body -> var_cte .)
    <               reduce using rule 160 (fact_body -> var_cte .)
    LESS_EQUAL_THAN reduce using rule 160 (fact_body -> var_cte .)
    >               reduce using rule 160 (fact_body -> var_cte .)
    GREATER_EQUAL_THAN reduce using rule 160 (fact_body -> var_cte .)
    EQUAL           reduce using rule 160 (fact_body -> var_cte .)
    NOT_EQUAL       reduce using rule 160 (fact_body -> var_cte .)
    AND             reduce using rule 160 (fact_body -> var_cte .)
    OR              reduce using rule 160 (fact_body -> var_cte .)
    XOR             reduce using rule 160 (fact_body -> var_cte .)
    ,               reduce using rule 160 (fact_body -> var_cte .)
    ]               reduce using rule 160 (fact_body -> var_cte .)
    ;               reduce using rule 160 (fact_body -> var_cte .)
    )               reduce using rule 160 (fact_body -> var_cte .)


state 139

    (161) fact_body -> ID . fact_id
    (162) fact_id -> . func_call
    (163) fact_id -> . id_access
    (90) func_call -> . ( func_param )
    (47) id_access -> . id_mat_acc id_var_acc
    (48) id_mat_acc -> . mat_vec_access
    (49) id_mat_acc -> . empty
    (67) mat_vec_access -> . [ mat_vec_index mat_access ]
    (164) empty -> .

    (               shift and go to state 160
    [               shift and go to state 63
    .               reduce using rule 164 (empty -> .)
    *               reduce using rule 164 (empty -> .)
    /               reduce using rule 164 (empty -> .)
    %               reduce using rule 164 (empty -> .)
    +               reduce using rule 164 (empty -> .)
    -               reduce using rule 164 (empty -> .)
    <               reduce using rule 164 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 164 (empty -> .)
    >               reduce using rule 164 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 164 (empty -> .)
    EQUAL           reduce using rule 164 (empty -> .)
    NOT_EQUAL       reduce using rule 164 (empty -> .)
    AND             reduce using rule 164 (empty -> .)
    OR              reduce using rule 164 (empty -> .)
    XOR             reduce using rule 164 (empty -> .)
    ,               reduce using rule 164 (empty -> .)
    ]               reduce using rule 164 (empty -> .)
    ;               reduce using rule 164 (empty -> .)
    )               reduce using rule 164 (empty -> .)

    fact_id                        shift and go to state 185
    func_call                      shift and go to state 186
    id_access                      shift and go to state 187
    id_mat_acc                     shift and go to state 60
    mat_vec_access                 shift and go to state 61
    empty                          shift and go to state 62

state 140

    (150) var_cte -> CONST_I .

    *               reduce using rule 150 (var_cte -> CONST_I .)
    /               reduce using rule 150 (var_cte -> CONST_I .)
    %               reduce using rule 150 (var_cte -> CONST_I .)
    +               reduce using rule 150 (var_cte -> CONST_I .)
    -               reduce using rule 150 (var_cte -> CONST_I .)
    <               reduce using rule 150 (var_cte -> CONST_I .)
    LESS_EQUAL_THAN reduce using rule 150 (var_cte -> CONST_I .)
    >               reduce using rule 150 (var_cte -> CONST_I .)
    GREATER_EQUAL_THAN reduce using rule 150 (var_cte -> CONST_I .)
    EQUAL           reduce using rule 150 (var_cte -> CONST_I .)
    NOT_EQUAL       reduce using rule 150 (var_cte -> CONST_I .)
    AND             reduce using rule 150 (var_cte -> CONST_I .)
    OR              reduce using rule 150 (var_cte -> CONST_I .)
    XOR             reduce using rule 150 (var_cte -> CONST_I .)
    ,               reduce using rule 150 (var_cte -> CONST_I .)
    ]               reduce using rule 150 (var_cte -> CONST_I .)
    ;               reduce using rule 150 (var_cte -> CONST_I .)
    )               reduce using rule 150 (var_cte -> CONST_I .)


state 141

    (151) var_cte -> CONST_F .

    *               reduce using rule 151 (var_cte -> CONST_F .)
    /               reduce using rule 151 (var_cte -> CONST_F .)
    %               reduce using rule 151 (var_cte -> CONST_F .)
    +               reduce using rule 151 (var_cte -> CONST_F .)
    -               reduce using rule 151 (var_cte -> CONST_F .)
    <               reduce using rule 151 (var_cte -> CONST_F .)
    LESS_EQUAL_THAN reduce using rule 151 (var_cte -> CONST_F .)
    >               reduce using rule 151 (var_cte -> CONST_F .)
    GREATER_EQUAL_THAN reduce using rule 151 (var_cte -> CONST_F .)
    EQUAL           reduce using rule 151 (var_cte -> CONST_F .)
    NOT_EQUAL       reduce using rule 151 (var_cte -> CONST_F .)
    AND             reduce using rule 151 (var_cte -> CONST_F .)
    OR              reduce using rule 151 (var_cte -> CONST_F .)
    XOR             reduce using rule 151 (var_cte -> CONST_F .)
    ,               reduce using rule 151 (var_cte -> CONST_F .)
    ]               reduce using rule 151 (var_cte -> CONST_F .)
    ;               reduce using rule 151 (var_cte -> CONST_F .)
    )               reduce using rule 151 (var_cte -> CONST_F .)


state 142

    (152) var_cte -> CONST_CHAR .

    *               reduce using rule 152 (var_cte -> CONST_CHAR .)
    /               reduce using rule 152 (var_cte -> CONST_CHAR .)
    %               reduce using rule 152 (var_cte -> CONST_CHAR .)
    +               reduce using rule 152 (var_cte -> CONST_CHAR .)
    -               reduce using rule 152 (var_cte -> CONST_CHAR .)
    <               reduce using rule 152 (var_cte -> CONST_CHAR .)
    LESS_EQUAL_THAN reduce using rule 152 (var_cte -> CONST_CHAR .)
    >               reduce using rule 152 (var_cte -> CONST_CHAR .)
    GREATER_EQUAL_THAN reduce using rule 152 (var_cte -> CONST_CHAR .)
    EQUAL           reduce using rule 152 (var_cte -> CONST_CHAR .)
    NOT_EQUAL       reduce using rule 152 (var_cte -> CONST_CHAR .)
    AND             reduce using rule 152 (var_cte -> CONST_CHAR .)
    OR              reduce using rule 152 (var_cte -> CONST_CHAR .)
    XOR             reduce using rule 152 (var_cte -> CONST_CHAR .)
    ,               reduce using rule 152 (var_cte -> CONST_CHAR .)
    ]               reduce using rule 152 (var_cte -> CONST_CHAR .)
    ;               reduce using rule 152 (var_cte -> CONST_CHAR .)
    )               reduce using rule 152 (var_cte -> CONST_CHAR .)


state 143

    (153) var_cte -> CONST_STRING .

    *               reduce using rule 153 (var_cte -> CONST_STRING .)
    /               reduce using rule 153 (var_cte -> CONST_STRING .)
    %               reduce using rule 153 (var_cte -> CONST_STRING .)
    +               reduce using rule 153 (var_cte -> CONST_STRING .)
    -               reduce using rule 153 (var_cte -> CONST_STRING .)
    <               reduce using rule 153 (var_cte -> CONST_STRING .)
    LESS_EQUAL_THAN reduce using rule 153 (var_cte -> CONST_STRING .)
    >               reduce using rule 153 (var_cte -> CONST_STRING .)
    GREATER_EQUAL_THAN reduce using rule 153 (var_cte -> CONST_STRING .)
    EQUAL           reduce using rule 153 (var_cte -> CONST_STRING .)
    NOT_EQUAL       reduce using rule 153 (var_cte -> CONST_STRING .)
    AND             reduce using rule 153 (var_cte -> CONST_STRING .)
    OR              reduce using rule 153 (var_cte -> CONST_STRING .)
    XOR             reduce using rule 153 (var_cte -> CONST_STRING .)
    ,               reduce using rule 153 (var_cte -> CONST_STRING .)
    ]               reduce using rule 153 (var_cte -> CONST_STRING .)
    ;               reduce using rule 153 (var_cte -> CONST_STRING .)
    )               reduce using rule 153 (var_cte -> CONST_STRING .)


state 144

    (154) var_cte -> CONST_BOOL .

    *               reduce using rule 154 (var_cte -> CONST_BOOL .)
    /               reduce using rule 154 (var_cte -> CONST_BOOL .)
    %               reduce using rule 154 (var_cte -> CONST_BOOL .)
    +               reduce using rule 154 (var_cte -> CONST_BOOL .)
    -               reduce using rule 154 (var_cte -> CONST_BOOL .)
    <               reduce using rule 154 (var_cte -> CONST_BOOL .)
    LESS_EQUAL_THAN reduce using rule 154 (var_cte -> CONST_BOOL .)
    >               reduce using rule 154 (var_cte -> CONST_BOOL .)
    GREATER_EQUAL_THAN reduce using rule 154 (var_cte -> CONST_BOOL .)
    EQUAL           reduce using rule 154 (var_cte -> CONST_BOOL .)
    NOT_EQUAL       reduce using rule 154 (var_cte -> CONST_BOOL .)
    AND             reduce using rule 154 (var_cte -> CONST_BOOL .)
    OR              reduce using rule 154 (var_cte -> CONST_BOOL .)
    XOR             reduce using rule 154 (var_cte -> CONST_BOOL .)
    ,               reduce using rule 154 (var_cte -> CONST_BOOL .)
    ]               reduce using rule 154 (var_cte -> CONST_BOOL .)
    ;               reduce using rule 154 (var_cte -> CONST_BOOL .)
    )               reduce using rule 154 (var_cte -> CONST_BOOL .)


state 145

    (30) vars -> VAR ids : vars_type . ;

    ;               shift and go to state 188


state 146

    (31) vars_type -> type . vars_tp_a
    (33) vars_tp_a -> . = expression
    (34) vars_tp_a -> . empty
    (164) empty -> .

    =               shift and go to state 190
    ;               reduce using rule 164 (empty -> .)

    vars_tp_a                      shift and go to state 189
    empty                          shift and go to state 191

state 147

    (32) vars_type -> ID . vars_tp_b
    (35) vars_tp_b -> . = vars_assgn
    (36) vars_tp_b -> . empty
    (164) empty -> .

    =               shift and go to state 193
    ;               reduce using rule 164 (empty -> .)

    vars_tp_b                      shift and go to state 192
    empty                          shift and go to state 194

state 148

    (28) m_ids -> , ids .

    :               reduce using rule 28 (m_ids -> , ids .)


state 149

    (41) vector -> VEC ids : vec_mat_type . [ CONST_I ] vec_assgn ;

    [               shift and go to state 195


state 150

    (39) vec_mat_type -> type .

    [               reduce using rule 39 (vec_mat_type -> type .)


state 151

    (40) vec_mat_type -> ID .

    [               reduce using rule 40 (vec_mat_type -> ID .)


state 152

    (44) matrix -> MAT ids : vec_mat_type . [ CONST_I , CONST_I ] mat_assgn ;

    [               shift and go to state 196


state 153

    (72) method -> func_spec ( opt_method_param ) block .

    CONSTRUCTOR     reduce using rule 72 (method -> func_spec ( opt_method_param ) block .)
    PUBLIC_FUNC     reduce using rule 72 (method -> func_spec ( opt_method_param ) block .)
    PRIVATE_FUNC    reduce using rule 72 (method -> func_spec ( opt_method_param ) block .)
    }               reduce using rule 72 (method -> func_spec ( opt_method_param ) block .)


state 154

    (94) block -> { . bstmt }
    (95) bstmt -> . statement bstmt
    (96) bstmt -> . empty
    (97) statement -> . assignment
    (98) statement -> . condition
    (99) statement -> . loop
    (100) statement -> . in_out
    (101) statement -> . return
    (102) statement -> . var_decl
    (103) statement -> . CONSTANT var_decl
    (164) empty -> .
    (52) assignment -> . ID id_access = ass_value ;
    (104) condition -> . IF cond_body
    (109) loop -> . for_loop
    (110) loop -> . while_loop
    (113) in_out -> . PRINT ( print_exp ) ;
    (114) in_out -> . SCAN ( ID id_access ) ;
    (119) return -> . RETURN ret_val ;
    (6) var_decl -> . vars
    (7) var_decl -> . vector
    (8) var_decl -> . matrix
    (111) for_loop -> . FOR ( assignment expression ; ID = expression ) block
    (112) while_loop -> . WHILE ( expression ) block
    (30) vars -> . VAR ids : vars_type ;
    (41) vector -> . VEC ids : vec_mat_type [ CONST_I ] vec_assgn ;
    (44) matrix -> . MAT ids : vec_mat_type [ CONST_I , CONST_I ] mat_assgn ;

    CONSTANT        shift and go to state 206
    }               reduce using rule 164 (empty -> .)
    ID              shift and go to state 35
    IF              shift and go to state 207
    PRINT           shift and go to state 210
    SCAN            shift and go to state 211
    RETURN          shift and go to state 212
    FOR             shift and go to state 213
    WHILE           shift and go to state 214
    VAR             shift and go to state 40
    VEC             shift and go to state 41
    MAT             shift and go to state 42

    bstmt                          shift and go to state 197
    statement                      shift and go to state 198
    empty                          shift and go to state 199
    assignment                     shift and go to state 200
    condition                      shift and go to state 201
    loop                           shift and go to state 202
    in_out                         shift and go to state 203
    return                         shift and go to state 204
    var_decl                       shift and go to state 205
    for_loop                       shift and go to state 208
    while_loop                     shift and go to state 209
    vars                           shift and go to state 37
    vector                         shift and go to state 38
    matrix                         shift and go to state 39

state 155

    (84) param_type -> ID .

    [               reduce using rule 84 (param_type -> ID .)
    ,               reduce using rule 84 (param_type -> ID .)
    )               reduce using rule 84 (param_type -> ID .)


state 156

    (80) method_param -> ID : param_type . param_mat_vec more_params
    (85) param_mat_vec -> . [ param_mat ]
    (86) param_mat_vec -> . empty
    (164) empty -> .

    [               shift and go to state 216
    ,               reduce using rule 164 (empty -> .)
    )               reduce using rule 164 (empty -> .)

    param_mat_vec                  shift and go to state 215
    empty                          shift and go to state 217

state 157

    (83) param_type -> type .

    [               reduce using rule 83 (param_type -> type .)
    ,               reduce using rule 83 (param_type -> type .)
    )               reduce using rule 83 (param_type -> type .)


state 158

    (52) assignment -> ID id_access = ass_value ; .

    ID              reduce using rule 52 (assignment -> ID id_access = ass_value ; .)
    CONSTRUCTOR     reduce using rule 52 (assignment -> ID id_access = ass_value ; .)
    PUBLIC_FUNC     reduce using rule 52 (assignment -> ID id_access = ass_value ; .)
    PRIVATE_FUNC    reduce using rule 52 (assignment -> ID id_access = ass_value ; .)
    }               reduce using rule 52 (assignment -> ID id_access = ass_value ; .)
    CONSTANT        reduce using rule 52 (assignment -> ID id_access = ass_value ; .)
    IF              reduce using rule 52 (assignment -> ID id_access = ass_value ; .)
    PRINT           reduce using rule 52 (assignment -> ID id_access = ass_value ; .)
    SCAN            reduce using rule 52 (assignment -> ID id_access = ass_value ; .)
    RETURN          reduce using rule 52 (assignment -> ID id_access = ass_value ; .)
    FOR             reduce using rule 52 (assignment -> ID id_access = ass_value ; .)
    WHILE           reduce using rule 52 (assignment -> ID id_access = ass_value ; .)
    VAR             reduce using rule 52 (assignment -> ID id_access = ass_value ; .)
    VEC             reduce using rule 52 (assignment -> ID id_access = ass_value ; .)
    MAT             reduce using rule 52 (assignment -> ID id_access = ass_value ; .)
    -               reduce using rule 52 (assignment -> ID id_access = ass_value ; .)
    ~               reduce using rule 52 (assignment -> ID id_access = ass_value ; .)
    (               reduce using rule 52 (assignment -> ID id_access = ass_value ; .)
    CONST_I         reduce using rule 52 (assignment -> ID id_access = ass_value ; .)
    CONST_F         reduce using rule 52 (assignment -> ID id_access = ass_value ; .)
    CONST_CHAR      reduce using rule 52 (assignment -> ID id_access = ass_value ; .)
    CONST_STRING    reduce using rule 52 (assignment -> ID id_access = ass_value ; .)
    CONST_BOOL      reduce using rule 52 (assignment -> ID id_access = ass_value ; .)


state 159

    (89) create_obj -> NEW func_call .

    ;               reduce using rule 89 (create_obj -> NEW func_call .)
    ,               reduce using rule 89 (create_obj -> NEW func_call .)
    ]               reduce using rule 89 (create_obj -> NEW func_call .)


state 160

    (90) func_call -> ( . func_param )
    (91) func_param -> . expression more_fpar
    (122) expression -> . rel_expression expression_op
    (127) rel_expression -> . rel_expression_1 rel_exp_op
    (131) rel_expression_1 -> . exp rel_exp_1_op
    (137) exp -> . term exp_op
    (141) term -> . factor term_op
    (155) factor -> . fact_neg fact_body
    (156) fact_neg -> . -
    (157) fact_neg -> . ~
    (158) fact_neg -> . empty
    (164) empty -> .

    -               shift and go to state 89
    ~               shift and go to state 90
    (               reduce using rule 164 (empty -> .)
    ID              reduce using rule 164 (empty -> .)
    CONST_I         reduce using rule 164 (empty -> .)
    CONST_F         reduce using rule 164 (empty -> .)
    CONST_CHAR      reduce using rule 164 (empty -> .)
    CONST_STRING    reduce using rule 164 (empty -> .)
    CONST_BOOL      reduce using rule 164 (empty -> .)

    func_param                     shift and go to state 218
    expression                     shift and go to state 219
    rel_expression                 shift and go to state 83
    rel_expression_1               shift and go to state 84
    exp                            shift and go to state 85
    term                           shift and go to state 86
    factor                         shift and go to state 87
    fact_neg                       shift and go to state 88
    empty                          shift and go to state 91

state 161

    (63) matrix_exp -> { mat_elem . }

    }               shift and go to state 220


state 162

    (64) mat_elem -> vector_exp . mat_more
    (65) mat_more -> . , mat_elem
    (66) mat_more -> . empty
    (164) empty -> .

    ,               shift and go to state 222
    }               reduce using rule 164 (empty -> .)

    mat_more                       shift and go to state 221
    empty                          shift and go to state 223

state 163

    (57) vector_exp -> [ vec_elem . ]

    ]               shift and go to state 224


state 164

    (58) vec_elem -> vec_object . vec_more
    (61) vec_more -> . , vec_elem
    (62) vec_more -> . empty
    (164) empty -> .

    ,               shift and go to state 226
    ]               reduce using rule 164 (empty -> .)

    vec_more                       shift and go to state 225
    empty                          shift and go to state 227

state 165

    (59) vec_object -> create_obj .

    ,               reduce using rule 59 (vec_object -> create_obj .)
    ]               reduce using rule 59 (vec_object -> create_obj .)


state 166

    (60) vec_object -> expression .

    ,               reduce using rule 60 (vec_object -> expression .)
    ]               reduce using rule 60 (vec_object -> expression .)


state 167

    (50) id_var_acc -> . ID id_mat_acc .

    =               reduce using rule 50 (id_var_acc -> . ID id_mat_acc .)
    *               reduce using rule 50 (id_var_acc -> . ID id_mat_acc .)
    /               reduce using rule 50 (id_var_acc -> . ID id_mat_acc .)
    %               reduce using rule 50 (id_var_acc -> . ID id_mat_acc .)
    +               reduce using rule 50 (id_var_acc -> . ID id_mat_acc .)
    -               reduce using rule 50 (id_var_acc -> . ID id_mat_acc .)
    <               reduce using rule 50 (id_var_acc -> . ID id_mat_acc .)
    LESS_EQUAL_THAN reduce using rule 50 (id_var_acc -> . ID id_mat_acc .)
    >               reduce using rule 50 (id_var_acc -> . ID id_mat_acc .)
    GREATER_EQUAL_THAN reduce using rule 50 (id_var_acc -> . ID id_mat_acc .)
    EQUAL           reduce using rule 50 (id_var_acc -> . ID id_mat_acc .)
    NOT_EQUAL       reduce using rule 50 (id_var_acc -> . ID id_mat_acc .)
    AND             reduce using rule 50 (id_var_acc -> . ID id_mat_acc .)
    OR              reduce using rule 50 (id_var_acc -> . ID id_mat_acc .)
    XOR             reduce using rule 50 (id_var_acc -> . ID id_mat_acc .)
    ,               reduce using rule 50 (id_var_acc -> . ID id_mat_acc .)
    ]               reduce using rule 50 (id_var_acc -> . ID id_mat_acc .)
    ;               reduce using rule 50 (id_var_acc -> . ID id_mat_acc .)
    )               reduce using rule 50 (id_var_acc -> . ID id_mat_acc .)


state 168

    (67) mat_vec_access -> [ mat_vec_index mat_access ] .

    .               reduce using rule 67 (mat_vec_access -> [ mat_vec_index mat_access ] .)
    =               reduce using rule 67 (mat_vec_access -> [ mat_vec_index mat_access ] .)
    *               reduce using rule 67 (mat_vec_access -> [ mat_vec_index mat_access ] .)
    /               reduce using rule 67 (mat_vec_access -> [ mat_vec_index mat_access ] .)
    %               reduce using rule 67 (mat_vec_access -> [ mat_vec_index mat_access ] .)
    +               reduce using rule 67 (mat_vec_access -> [ mat_vec_index mat_access ] .)
    -               reduce using rule 67 (mat_vec_access -> [ mat_vec_index mat_access ] .)
    <               reduce using rule 67 (mat_vec_access -> [ mat_vec_index mat_access ] .)
    LESS_EQUAL_THAN reduce using rule 67 (mat_vec_access -> [ mat_vec_index mat_access ] .)
    >               reduce using rule 67 (mat_vec_access -> [ mat_vec_index mat_access ] .)
    GREATER_EQUAL_THAN reduce using rule 67 (mat_vec_access -> [ mat_vec_index mat_access ] .)
    EQUAL           reduce using rule 67 (mat_vec_access -> [ mat_vec_index mat_access ] .)
    NOT_EQUAL       reduce using rule 67 (mat_vec_access -> [ mat_vec_index mat_access ] .)
    AND             reduce using rule 67 (mat_vec_access -> [ mat_vec_index mat_access ] .)
    OR              reduce using rule 67 (mat_vec_access -> [ mat_vec_index mat_access ] .)
    XOR             reduce using rule 67 (mat_vec_access -> [ mat_vec_index mat_access ] .)
    ,               reduce using rule 67 (mat_vec_access -> [ mat_vec_index mat_access ] .)
    ]               reduce using rule 67 (mat_vec_access -> [ mat_vec_index mat_access ] .)
    ;               reduce using rule 67 (mat_vec_access -> [ mat_vec_index mat_access ] .)
    )               reduce using rule 67 (mat_vec_access -> [ mat_vec_index mat_access ] .)


state 169

    (70) mat_access -> , mat_vec_index .

    ]               reduce using rule 70 (mat_access -> , mat_vec_index .)


state 170

    (123) expression_op -> AND expression .

    ,               reduce using rule 123 (expression_op -> AND expression .)
    ]               reduce using rule 123 (expression_op -> AND expression .)
    ;               reduce using rule 123 (expression_op -> AND expression .)
    )               reduce using rule 123 (expression_op -> AND expression .)


state 171

    (124) expression_op -> OR expression .

    ,               reduce using rule 124 (expression_op -> OR expression .)
    ]               reduce using rule 124 (expression_op -> OR expression .)
    ;               reduce using rule 124 (expression_op -> OR expression .)
    )               reduce using rule 124 (expression_op -> OR expression .)


state 172

    (125) expression_op -> XOR expression .

    ,               reduce using rule 125 (expression_op -> XOR expression .)
    ]               reduce using rule 125 (expression_op -> XOR expression .)
    ;               reduce using rule 125 (expression_op -> XOR expression .)
    )               reduce using rule 125 (expression_op -> XOR expression .)


state 173

    (128) rel_exp_op -> EQUAL rel_expression .

    AND             reduce using rule 128 (rel_exp_op -> EQUAL rel_expression .)
    OR              reduce using rule 128 (rel_exp_op -> EQUAL rel_expression .)
    XOR             reduce using rule 128 (rel_exp_op -> EQUAL rel_expression .)
    ,               reduce using rule 128 (rel_exp_op -> EQUAL rel_expression .)
    ]               reduce using rule 128 (rel_exp_op -> EQUAL rel_expression .)
    ;               reduce using rule 128 (rel_exp_op -> EQUAL rel_expression .)
    )               reduce using rule 128 (rel_exp_op -> EQUAL rel_expression .)


state 174

    (129) rel_exp_op -> NOT_EQUAL rel_expression .

    AND             reduce using rule 129 (rel_exp_op -> NOT_EQUAL rel_expression .)
    OR              reduce using rule 129 (rel_exp_op -> NOT_EQUAL rel_expression .)
    XOR             reduce using rule 129 (rel_exp_op -> NOT_EQUAL rel_expression .)
    ,               reduce using rule 129 (rel_exp_op -> NOT_EQUAL rel_expression .)
    ]               reduce using rule 129 (rel_exp_op -> NOT_EQUAL rel_expression .)
    ;               reduce using rule 129 (rel_exp_op -> NOT_EQUAL rel_expression .)
    )               reduce using rule 129 (rel_exp_op -> NOT_EQUAL rel_expression .)


state 175

    (132) rel_exp_1_op -> < rel_expression_1 .

    EQUAL           reduce using rule 132 (rel_exp_1_op -> < rel_expression_1 .)
    NOT_EQUAL       reduce using rule 132 (rel_exp_1_op -> < rel_expression_1 .)
    AND             reduce using rule 132 (rel_exp_1_op -> < rel_expression_1 .)
    OR              reduce using rule 132 (rel_exp_1_op -> < rel_expression_1 .)
    XOR             reduce using rule 132 (rel_exp_1_op -> < rel_expression_1 .)
    ,               reduce using rule 132 (rel_exp_1_op -> < rel_expression_1 .)
    ]               reduce using rule 132 (rel_exp_1_op -> < rel_expression_1 .)
    ;               reduce using rule 132 (rel_exp_1_op -> < rel_expression_1 .)
    )               reduce using rule 132 (rel_exp_1_op -> < rel_expression_1 .)


state 176

    (133) rel_exp_1_op -> LESS_EQUAL_THAN rel_expression_1 .

    EQUAL           reduce using rule 133 (rel_exp_1_op -> LESS_EQUAL_THAN rel_expression_1 .)
    NOT_EQUAL       reduce using rule 133 (rel_exp_1_op -> LESS_EQUAL_THAN rel_expression_1 .)
    AND             reduce using rule 133 (rel_exp_1_op -> LESS_EQUAL_THAN rel_expression_1 .)
    OR              reduce using rule 133 (rel_exp_1_op -> LESS_EQUAL_THAN rel_expression_1 .)
    XOR             reduce using rule 133 (rel_exp_1_op -> LESS_EQUAL_THAN rel_expression_1 .)
    ,               reduce using rule 133 (rel_exp_1_op -> LESS_EQUAL_THAN rel_expression_1 .)
    ]               reduce using rule 133 (rel_exp_1_op -> LESS_EQUAL_THAN rel_expression_1 .)
    ;               reduce using rule 133 (rel_exp_1_op -> LESS_EQUAL_THAN rel_expression_1 .)
    )               reduce using rule 133 (rel_exp_1_op -> LESS_EQUAL_THAN rel_expression_1 .)


state 177

    (134) rel_exp_1_op -> > rel_expression_1 .

    EQUAL           reduce using rule 134 (rel_exp_1_op -> > rel_expression_1 .)
    NOT_EQUAL       reduce using rule 134 (rel_exp_1_op -> > rel_expression_1 .)
    AND             reduce using rule 134 (rel_exp_1_op -> > rel_expression_1 .)
    OR              reduce using rule 134 (rel_exp_1_op -> > rel_expression_1 .)
    XOR             reduce using rule 134 (rel_exp_1_op -> > rel_expression_1 .)
    ,               reduce using rule 134 (rel_exp_1_op -> > rel_expression_1 .)
    ]               reduce using rule 134 (rel_exp_1_op -> > rel_expression_1 .)
    ;               reduce using rule 134 (rel_exp_1_op -> > rel_expression_1 .)
    )               reduce using rule 134 (rel_exp_1_op -> > rel_expression_1 .)


state 178

    (135) rel_exp_1_op -> GREATER_EQUAL_THAN rel_expression_1 .

    EQUAL           reduce using rule 135 (rel_exp_1_op -> GREATER_EQUAL_THAN rel_expression_1 .)
    NOT_EQUAL       reduce using rule 135 (rel_exp_1_op -> GREATER_EQUAL_THAN rel_expression_1 .)
    AND             reduce using rule 135 (rel_exp_1_op -> GREATER_EQUAL_THAN rel_expression_1 .)
    OR              reduce using rule 135 (rel_exp_1_op -> GREATER_EQUAL_THAN rel_expression_1 .)
    XOR             reduce using rule 135 (rel_exp_1_op -> GREATER_EQUAL_THAN rel_expression_1 .)
    ,               reduce using rule 135 (rel_exp_1_op -> GREATER_EQUAL_THAN rel_expression_1 .)
    ]               reduce using rule 135 (rel_exp_1_op -> GREATER_EQUAL_THAN rel_expression_1 .)
    ;               reduce using rule 135 (rel_exp_1_op -> GREATER_EQUAL_THAN rel_expression_1 .)
    )               reduce using rule 135 (rel_exp_1_op -> GREATER_EQUAL_THAN rel_expression_1 .)


state 179

    (138) exp_op -> + exp .

    <               reduce using rule 138 (exp_op -> + exp .)
    LESS_EQUAL_THAN reduce using rule 138 (exp_op -> + exp .)
    >               reduce using rule 138 (exp_op -> + exp .)
    GREATER_EQUAL_THAN reduce using rule 138 (exp_op -> + exp .)
    EQUAL           reduce using rule 138 (exp_op -> + exp .)
    NOT_EQUAL       reduce using rule 138 (exp_op -> + exp .)
    AND             reduce using rule 138 (exp_op -> + exp .)
    OR              reduce using rule 138 (exp_op -> + exp .)
    XOR             reduce using rule 138 (exp_op -> + exp .)
    ,               reduce using rule 138 (exp_op -> + exp .)
    ]               reduce using rule 138 (exp_op -> + exp .)
    ;               reduce using rule 138 (exp_op -> + exp .)
    )               reduce using rule 138 (exp_op -> + exp .)


state 180

    (139) exp_op -> - exp .

    <               reduce using rule 139 (exp_op -> - exp .)
    LESS_EQUAL_THAN reduce using rule 139 (exp_op -> - exp .)
    >               reduce using rule 139 (exp_op -> - exp .)
    GREATER_EQUAL_THAN reduce using rule 139 (exp_op -> - exp .)
    EQUAL           reduce using rule 139 (exp_op -> - exp .)
    NOT_EQUAL       reduce using rule 139 (exp_op -> - exp .)
    AND             reduce using rule 139 (exp_op -> - exp .)
    OR              reduce using rule 139 (exp_op -> - exp .)
    XOR             reduce using rule 139 (exp_op -> - exp .)
    ,               reduce using rule 139 (exp_op -> - exp .)
    ]               reduce using rule 139 (exp_op -> - exp .)
    ;               reduce using rule 139 (exp_op -> - exp .)
    )               reduce using rule 139 (exp_op -> - exp .)


state 181

    (142) term_op -> * term .

    +               reduce using rule 142 (term_op -> * term .)
    -               reduce using rule 142 (term_op -> * term .)
    <               reduce using rule 142 (term_op -> * term .)
    LESS_EQUAL_THAN reduce using rule 142 (term_op -> * term .)
    >               reduce using rule 142 (term_op -> * term .)
    GREATER_EQUAL_THAN reduce using rule 142 (term_op -> * term .)
    EQUAL           reduce using rule 142 (term_op -> * term .)
    NOT_EQUAL       reduce using rule 142 (term_op -> * term .)
    AND             reduce using rule 142 (term_op -> * term .)
    OR              reduce using rule 142 (term_op -> * term .)
    XOR             reduce using rule 142 (term_op -> * term .)
    ,               reduce using rule 142 (term_op -> * term .)
    ]               reduce using rule 142 (term_op -> * term .)
    ;               reduce using rule 142 (term_op -> * term .)
    )               reduce using rule 142 (term_op -> * term .)


state 182

    (143) term_op -> / term .

    +               reduce using rule 143 (term_op -> / term .)
    -               reduce using rule 143 (term_op -> / term .)
    <               reduce using rule 143 (term_op -> / term .)
    LESS_EQUAL_THAN reduce using rule 143 (term_op -> / term .)
    >               reduce using rule 143 (term_op -> / term .)
    GREATER_EQUAL_THAN reduce using rule 143 (term_op -> / term .)
    EQUAL           reduce using rule 143 (term_op -> / term .)
    NOT_EQUAL       reduce using rule 143 (term_op -> / term .)
    AND             reduce using rule 143 (term_op -> / term .)
    OR              reduce using rule 143 (term_op -> / term .)
    XOR             reduce using rule 143 (term_op -> / term .)
    ,               reduce using rule 143 (term_op -> / term .)
    ]               reduce using rule 143 (term_op -> / term .)
    ;               reduce using rule 143 (term_op -> / term .)
    )               reduce using rule 143 (term_op -> / term .)


state 183

    (144) term_op -> % term .

    +               reduce using rule 144 (term_op -> % term .)
    -               reduce using rule 144 (term_op -> % term .)
    <               reduce using rule 144 (term_op -> % term .)
    LESS_EQUAL_THAN reduce using rule 144 (term_op -> % term .)
    >               reduce using rule 144 (term_op -> % term .)
    GREATER_EQUAL_THAN reduce using rule 144 (term_op -> % term .)
    EQUAL           reduce using rule 144 (term_op -> % term .)
    NOT_EQUAL       reduce using rule 144 (term_op -> % term .)
    AND             reduce using rule 144 (term_op -> % term .)
    OR              reduce using rule 144 (term_op -> % term .)
    XOR             reduce using rule 144 (term_op -> % term .)
    ,               reduce using rule 144 (term_op -> % term .)
    ]               reduce using rule 144 (term_op -> % term .)
    ;               reduce using rule 144 (term_op -> % term .)
    )               reduce using rule 144 (term_op -> % term .)


state 184

    (159) fact_body -> ( expression . )

    )               shift and go to state 228


state 185

    (161) fact_body -> ID fact_id .

    *               reduce using rule 161 (fact_body -> ID fact_id .)
    /               reduce using rule 161 (fact_body -> ID fact_id .)
    %               reduce using rule 161 (fact_body -> ID fact_id .)
    +               reduce using rule 161 (fact_body -> ID fact_id .)
    -               reduce using rule 161 (fact_body -> ID fact_id .)
    <               reduce using rule 161 (fact_body -> ID fact_id .)
    LESS_EQUAL_THAN reduce using rule 161 (fact_body -> ID fact_id .)
    >               reduce using rule 161 (fact_body -> ID fact_id .)
    GREATER_EQUAL_THAN reduce using rule 161 (fact_body -> ID fact_id .)
    EQUAL           reduce using rule 161 (fact_body -> ID fact_id .)
    NOT_EQUAL       reduce using rule 161 (fact_body -> ID fact_id .)
    AND             reduce using rule 161 (fact_body -> ID fact_id .)
    OR              reduce using rule 161 (fact_body -> ID fact_id .)
    XOR             reduce using rule 161 (fact_body -> ID fact_id .)
    ,               reduce using rule 161 (fact_body -> ID fact_id .)
    ]               reduce using rule 161 (fact_body -> ID fact_id .)
    ;               reduce using rule 161 (fact_body -> ID fact_id .)
    )               reduce using rule 161 (fact_body -> ID fact_id .)


state 186

    (162) fact_id -> func_call .

    *               reduce using rule 162 (fact_id -> func_call .)
    /               reduce using rule 162 (fact_id -> func_call .)
    %               reduce using rule 162 (fact_id -> func_call .)
    +               reduce using rule 162 (fact_id -> func_call .)
    -               reduce using rule 162 (fact_id -> func_call .)
    <               reduce using rule 162 (fact_id -> func_call .)
    LESS_EQUAL_THAN reduce using rule 162 (fact_id -> func_call .)
    >               reduce using rule 162 (fact_id -> func_call .)
    GREATER_EQUAL_THAN reduce using rule 162 (fact_id -> func_call .)
    EQUAL           reduce using rule 162 (fact_id -> func_call .)
    NOT_EQUAL       reduce using rule 162 (fact_id -> func_call .)
    AND             reduce using rule 162 (fact_id -> func_call .)
    OR              reduce using rule 162 (fact_id -> func_call .)
    XOR             reduce using rule 162 (fact_id -> func_call .)
    ,               reduce using rule 162 (fact_id -> func_call .)
    ]               reduce using rule 162 (fact_id -> func_call .)
    ;               reduce using rule 162 (fact_id -> func_call .)
    )               reduce using rule 162 (fact_id -> func_call .)


state 187

    (163) fact_id -> id_access .

    *               reduce using rule 163 (fact_id -> id_access .)
    /               reduce using rule 163 (fact_id -> id_access .)
    %               reduce using rule 163 (fact_id -> id_access .)
    +               reduce using rule 163 (fact_id -> id_access .)
    -               reduce using rule 163 (fact_id -> id_access .)
    <               reduce using rule 163 (fact_id -> id_access .)
    LESS_EQUAL_THAN reduce using rule 163 (fact_id -> id_access .)
    >               reduce using rule 163 (fact_id -> id_access .)
    GREATER_EQUAL_THAN reduce using rule 163 (fact_id -> id_access .)
    EQUAL           reduce using rule 163 (fact_id -> id_access .)
    NOT_EQUAL       reduce using rule 163 (fact_id -> id_access .)
    AND             reduce using rule 163 (fact_id -> id_access .)
    OR              reduce using rule 163 (fact_id -> id_access .)
    XOR             reduce using rule 163 (fact_id -> id_access .)
    ,               reduce using rule 163 (fact_id -> id_access .)
    ]               reduce using rule 163 (fact_id -> id_access .)
    ;               reduce using rule 163 (fact_id -> id_access .)
    )               reduce using rule 163 (fact_id -> id_access .)


state 188

    (30) vars -> VAR ids : vars_type ; .

    PUBLIC          reduce using rule 30 (vars -> VAR ids : vars_type ; .)
    PRIVATE         reduce using rule 30 (vars -> VAR ids : vars_type ; .)
    ID              reduce using rule 30 (vars -> VAR ids : vars_type ; .)
    CONSTRUCTOR     reduce using rule 30 (vars -> VAR ids : vars_type ; .)
    PUBLIC_FUNC     reduce using rule 30 (vars -> VAR ids : vars_type ; .)
    PRIVATE_FUNC    reduce using rule 30 (vars -> VAR ids : vars_type ; .)
    }               reduce using rule 30 (vars -> VAR ids : vars_type ; .)
    CONSTANT        reduce using rule 30 (vars -> VAR ids : vars_type ; .)
    IF              reduce using rule 30 (vars -> VAR ids : vars_type ; .)
    PRINT           reduce using rule 30 (vars -> VAR ids : vars_type ; .)
    SCAN            reduce using rule 30 (vars -> VAR ids : vars_type ; .)
    RETURN          reduce using rule 30 (vars -> VAR ids : vars_type ; .)
    FOR             reduce using rule 30 (vars -> VAR ids : vars_type ; .)
    WHILE           reduce using rule 30 (vars -> VAR ids : vars_type ; .)
    VAR             reduce using rule 30 (vars -> VAR ids : vars_type ; .)
    VEC             reduce using rule 30 (vars -> VAR ids : vars_type ; .)
    MAT             reduce using rule 30 (vars -> VAR ids : vars_type ; .)


state 189

    (31) vars_type -> type vars_tp_a .

    ;               reduce using rule 31 (vars_type -> type vars_tp_a .)


state 190

    (33) vars_tp_a -> = . expression
    (122) expression -> . rel_expression expression_op
    (127) rel_expression -> . rel_expression_1 rel_exp_op
    (131) rel_expression_1 -> . exp rel_exp_1_op
    (137) exp -> . term exp_op
    (141) term -> . factor term_op
    (155) factor -> . fact_neg fact_body
    (156) fact_neg -> . -
    (157) fact_neg -> . ~
    (158) fact_neg -> . empty
    (164) empty -> .

    -               shift and go to state 89
    ~               shift and go to state 90
    (               reduce using rule 164 (empty -> .)
    ID              reduce using rule 164 (empty -> .)
    CONST_I         reduce using rule 164 (empty -> .)
    CONST_F         reduce using rule 164 (empty -> .)
    CONST_CHAR      reduce using rule 164 (empty -> .)
    CONST_STRING    reduce using rule 164 (empty -> .)
    CONST_BOOL      reduce using rule 164 (empty -> .)

    expression                     shift and go to state 229
    rel_expression                 shift and go to state 83
    rel_expression_1               shift and go to state 84
    exp                            shift and go to state 85
    term                           shift and go to state 86
    factor                         shift and go to state 87
    fact_neg                       shift and go to state 88
    empty                          shift and go to state 91

state 191

    (34) vars_tp_a -> empty .

    ;               reduce using rule 34 (vars_tp_a -> empty .)


state 192

    (32) vars_type -> ID vars_tp_b .

    ;               reduce using rule 32 (vars_type -> ID vars_tp_b .)


state 193

    (35) vars_tp_b -> = . vars_assgn
    (37) vars_assgn -> . create_obj
    (38) vars_assgn -> . expression
    (89) create_obj -> . NEW func_call
    (122) expression -> . rel_expression expression_op
    (127) rel_expression -> . rel_expression_1 rel_exp_op
    (131) rel_expression_1 -> . exp rel_exp_1_op
    (137) exp -> . term exp_op
    (141) term -> . factor term_op
    (155) factor -> . fact_neg fact_body
    (156) fact_neg -> . -
    (157) fact_neg -> . ~
    (158) fact_neg -> . empty
    (164) empty -> .

    NEW             shift and go to state 105
    -               shift and go to state 89
    ~               shift and go to state 90
    (               reduce using rule 164 (empty -> .)
    ID              reduce using rule 164 (empty -> .)
    CONST_I         reduce using rule 164 (empty -> .)
    CONST_F         reduce using rule 164 (empty -> .)
    CONST_CHAR      reduce using rule 164 (empty -> .)
    CONST_STRING    reduce using rule 164 (empty -> .)
    CONST_BOOL      reduce using rule 164 (empty -> .)

    vars_assgn                     shift and go to state 230
    create_obj                     shift and go to state 231
    expression                     shift and go to state 232
    rel_expression                 shift and go to state 83
    rel_expression_1               shift and go to state 84
    exp                            shift and go to state 85
    term                           shift and go to state 86
    factor                         shift and go to state 87
    fact_neg                       shift and go to state 88
    empty                          shift and go to state 91

state 194

    (36) vars_tp_b -> empty .

    ;               reduce using rule 36 (vars_tp_b -> empty .)


state 195

    (41) vector -> VEC ids : vec_mat_type [ . CONST_I ] vec_assgn ;

    CONST_I         shift and go to state 233


state 196

    (44) matrix -> MAT ids : vec_mat_type [ . CONST_I , CONST_I ] mat_assgn ;

    CONST_I         shift and go to state 234


state 197

    (94) block -> { bstmt . }

    }               shift and go to state 235


state 198

    (95) bstmt -> statement . bstmt
    (95) bstmt -> . statement bstmt
    (96) bstmt -> . empty
    (97) statement -> . assignment
    (98) statement -> . condition
    (99) statement -> . loop
    (100) statement -> . in_out
    (101) statement -> . return
    (102) statement -> . var_decl
    (103) statement -> . CONSTANT var_decl
    (164) empty -> .
    (52) assignment -> . ID id_access = ass_value ;
    (104) condition -> . IF cond_body
    (109) loop -> . for_loop
    (110) loop -> . while_loop
    (113) in_out -> . PRINT ( print_exp ) ;
    (114) in_out -> . SCAN ( ID id_access ) ;
    (119) return -> . RETURN ret_val ;
    (6) var_decl -> . vars
    (7) var_decl -> . vector
    (8) var_decl -> . matrix
    (111) for_loop -> . FOR ( assignment expression ; ID = expression ) block
    (112) while_loop -> . WHILE ( expression ) block
    (30) vars -> . VAR ids : vars_type ;
    (41) vector -> . VEC ids : vec_mat_type [ CONST_I ] vec_assgn ;
    (44) matrix -> . MAT ids : vec_mat_type [ CONST_I , CONST_I ] mat_assgn ;

    CONSTANT        shift and go to state 206
    }               reduce using rule 164 (empty -> .)
    ID              shift and go to state 35
    IF              shift and go to state 207
    PRINT           shift and go to state 210
    SCAN            shift and go to state 211
    RETURN          shift and go to state 212
    FOR             shift and go to state 213
    WHILE           shift and go to state 214
    VAR             shift and go to state 40
    VEC             shift and go to state 41
    MAT             shift and go to state 42

    statement                      shift and go to state 198
    bstmt                          shift and go to state 236
    empty                          shift and go to state 199
    assignment                     shift and go to state 200
    condition                      shift and go to state 201
    loop                           shift and go to state 202
    in_out                         shift and go to state 203
    return                         shift and go to state 204
    var_decl                       shift and go to state 205
    for_loop                       shift and go to state 208
    while_loop                     shift and go to state 209
    vars                           shift and go to state 37
    vector                         shift and go to state 38
    matrix                         shift and go to state 39

state 199

    (96) bstmt -> empty .

    }               reduce using rule 96 (bstmt -> empty .)


state 200

    (97) statement -> assignment .

    CONSTANT        reduce using rule 97 (statement -> assignment .)
    ID              reduce using rule 97 (statement -> assignment .)
    IF              reduce using rule 97 (statement -> assignment .)
    PRINT           reduce using rule 97 (statement -> assignment .)
    SCAN            reduce using rule 97 (statement -> assignment .)
    RETURN          reduce using rule 97 (statement -> assignment .)
    FOR             reduce using rule 97 (statement -> assignment .)
    WHILE           reduce using rule 97 (statement -> assignment .)
    VAR             reduce using rule 97 (statement -> assignment .)
    VEC             reduce using rule 97 (statement -> assignment .)
    MAT             reduce using rule 97 (statement -> assignment .)
    }               reduce using rule 97 (statement -> assignment .)


state 201

    (98) statement -> condition .

    CONSTANT        reduce using rule 98 (statement -> condition .)
    ID              reduce using rule 98 (statement -> condition .)
    IF              reduce using rule 98 (statement -> condition .)
    PRINT           reduce using rule 98 (statement -> condition .)
    SCAN            reduce using rule 98 (statement -> condition .)
    RETURN          reduce using rule 98 (statement -> condition .)
    FOR             reduce using rule 98 (statement -> condition .)
    WHILE           reduce using rule 98 (statement -> condition .)
    VAR             reduce using rule 98 (statement -> condition .)
    VEC             reduce using rule 98 (statement -> condition .)
    MAT             reduce using rule 98 (statement -> condition .)
    }               reduce using rule 98 (statement -> condition .)


state 202

    (99) statement -> loop .

    CONSTANT        reduce using rule 99 (statement -> loop .)
    ID              reduce using rule 99 (statement -> loop .)
    IF              reduce using rule 99 (statement -> loop .)
    PRINT           reduce using rule 99 (statement -> loop .)
    SCAN            reduce using rule 99 (statement -> loop .)
    RETURN          reduce using rule 99 (statement -> loop .)
    FOR             reduce using rule 99 (statement -> loop .)
    WHILE           reduce using rule 99 (statement -> loop .)
    VAR             reduce using rule 99 (statement -> loop .)
    VEC             reduce using rule 99 (statement -> loop .)
    MAT             reduce using rule 99 (statement -> loop .)
    }               reduce using rule 99 (statement -> loop .)


state 203

    (100) statement -> in_out .

    CONSTANT        reduce using rule 100 (statement -> in_out .)
    ID              reduce using rule 100 (statement -> in_out .)
    IF              reduce using rule 100 (statement -> in_out .)
    PRINT           reduce using rule 100 (statement -> in_out .)
    SCAN            reduce using rule 100 (statement -> in_out .)
    RETURN          reduce using rule 100 (statement -> in_out .)
    FOR             reduce using rule 100 (statement -> in_out .)
    WHILE           reduce using rule 100 (statement -> in_out .)
    VAR             reduce using rule 100 (statement -> in_out .)
    VEC             reduce using rule 100 (statement -> in_out .)
    MAT             reduce using rule 100 (statement -> in_out .)
    }               reduce using rule 100 (statement -> in_out .)


state 204

    (101) statement -> return .

    CONSTANT        reduce using rule 101 (statement -> return .)
    ID              reduce using rule 101 (statement -> return .)
    IF              reduce using rule 101 (statement -> return .)
    PRINT           reduce using rule 101 (statement -> return .)
    SCAN            reduce using rule 101 (statement -> return .)
    RETURN          reduce using rule 101 (statement -> return .)
    FOR             reduce using rule 101 (statement -> return .)
    WHILE           reduce using rule 101 (statement -> return .)
    VAR             reduce using rule 101 (statement -> return .)
    VEC             reduce using rule 101 (statement -> return .)
    MAT             reduce using rule 101 (statement -> return .)
    }               reduce using rule 101 (statement -> return .)


state 205

    (102) statement -> var_decl .

    CONSTANT        reduce using rule 102 (statement -> var_decl .)
    ID              reduce using rule 102 (statement -> var_decl .)
    IF              reduce using rule 102 (statement -> var_decl .)
    PRINT           reduce using rule 102 (statement -> var_decl .)
    SCAN            reduce using rule 102 (statement -> var_decl .)
    RETURN          reduce using rule 102 (statement -> var_decl .)
    FOR             reduce using rule 102 (statement -> var_decl .)
    WHILE           reduce using rule 102 (statement -> var_decl .)
    VAR             reduce using rule 102 (statement -> var_decl .)
    VEC             reduce using rule 102 (statement -> var_decl .)
    MAT             reduce using rule 102 (statement -> var_decl .)
    }               reduce using rule 102 (statement -> var_decl .)


state 206

    (103) statement -> CONSTANT . var_decl
    (6) var_decl -> . vars
    (7) var_decl -> . vector
    (8) var_decl -> . matrix
    (30) vars -> . VAR ids : vars_type ;
    (41) vector -> . VEC ids : vec_mat_type [ CONST_I ] vec_assgn ;
    (44) matrix -> . MAT ids : vec_mat_type [ CONST_I , CONST_I ] mat_assgn ;

    VAR             shift and go to state 40
    VEC             shift and go to state 41
    MAT             shift and go to state 42

    var_decl                       shift and go to state 237
    vars                           shift and go to state 37
    vector                         shift and go to state 38
    matrix                         shift and go to state 39

state 207

    (104) condition -> IF . cond_body
    (105) cond_body -> . ( expression ) block cond_else

    (               shift and go to state 239

    cond_body                      shift and go to state 238

state 208

    (109) loop -> for_loop .

    CONSTANT        reduce using rule 109 (loop -> for_loop .)
    ID              reduce using rule 109 (loop -> for_loop .)
    IF              reduce using rule 109 (loop -> for_loop .)
    PRINT           reduce using rule 109 (loop -> for_loop .)
    SCAN            reduce using rule 109 (loop -> for_loop .)
    RETURN          reduce using rule 109 (loop -> for_loop .)
    FOR             reduce using rule 109 (loop -> for_loop .)
    WHILE           reduce using rule 109 (loop -> for_loop .)
    VAR             reduce using rule 109 (loop -> for_loop .)
    VEC             reduce using rule 109 (loop -> for_loop .)
    MAT             reduce using rule 109 (loop -> for_loop .)
    }               reduce using rule 109 (loop -> for_loop .)


state 209

    (110) loop -> while_loop .

    CONSTANT        reduce using rule 110 (loop -> while_loop .)
    ID              reduce using rule 110 (loop -> while_loop .)
    IF              reduce using rule 110 (loop -> while_loop .)
    PRINT           reduce using rule 110 (loop -> while_loop .)
    SCAN            reduce using rule 110 (loop -> while_loop .)
    RETURN          reduce using rule 110 (loop -> while_loop .)
    FOR             reduce using rule 110 (loop -> while_loop .)
    WHILE           reduce using rule 110 (loop -> while_loop .)
    VAR             reduce using rule 110 (loop -> while_loop .)
    VEC             reduce using rule 110 (loop -> while_loop .)
    MAT             reduce using rule 110 (loop -> while_loop .)
    }               reduce using rule 110 (loop -> while_loop .)


state 210

    (113) in_out -> PRINT . ( print_exp ) ;

    (               shift and go to state 240


state 211

    (114) in_out -> SCAN . ( ID id_access ) ;

    (               shift and go to state 241


state 212

    (119) return -> RETURN . ret_val ;
    (120) ret_val -> . expression
    (121) ret_val -> . empty
    (122) expression -> . rel_expression expression_op
    (164) empty -> .
    (127) rel_expression -> . rel_expression_1 rel_exp_op
    (131) rel_expression_1 -> . exp rel_exp_1_op
    (137) exp -> . term exp_op
    (141) term -> . factor term_op
    (155) factor -> . fact_neg fact_body
    (156) fact_neg -> . -
    (157) fact_neg -> . ~
    (158) fact_neg -> . empty

    ;               reduce using rule 164 (empty -> .)
    (               reduce using rule 164 (empty -> .)
    ID              reduce using rule 164 (empty -> .)
    CONST_I         reduce using rule 164 (empty -> .)
    CONST_F         reduce using rule 164 (empty -> .)
    CONST_CHAR      reduce using rule 164 (empty -> .)
    CONST_STRING    reduce using rule 164 (empty -> .)
    CONST_BOOL      reduce using rule 164 (empty -> .)
    -               shift and go to state 89
    ~               shift and go to state 90

    ret_val                        shift and go to state 242
    expression                     shift and go to state 243
    empty                          shift and go to state 244
    rel_expression                 shift and go to state 83
    rel_expression_1               shift and go to state 84
    exp                            shift and go to state 85
    term                           shift and go to state 86
    factor                         shift and go to state 87
    fact_neg                       shift and go to state 88

state 213

    (111) for_loop -> FOR . ( assignment expression ; ID = expression ) block

    (               shift and go to state 245


state 214

    (112) while_loop -> WHILE . ( expression ) block

    (               shift and go to state 246


state 215

    (80) method_param -> ID : param_type param_mat_vec . more_params
    (81) more_params -> . , method_param
    (82) more_params -> . empty
    (164) empty -> .

    ,               shift and go to state 248
    )               reduce using rule 164 (empty -> .)

    more_params                    shift and go to state 247
    empty                          shift and go to state 249

state 216

    (85) param_mat_vec -> [ . param_mat ]
    (87) param_mat -> . ,
    (88) param_mat -> . empty
    (164) empty -> .

    ,               shift and go to state 251
    ]               reduce using rule 164 (empty -> .)

    param_mat                      shift and go to state 250
    empty                          shift and go to state 252

state 217

    (86) param_mat_vec -> empty .

    ,               reduce using rule 86 (param_mat_vec -> empty .)
    )               reduce using rule 86 (param_mat_vec -> empty .)


state 218

    (90) func_call -> ( func_param . )

    )               shift and go to state 253


state 219

    (91) func_param -> expression . more_fpar
    (92) more_fpar -> . , func_param
    (93) more_fpar -> . empty
    (164) empty -> .

    ,               shift and go to state 255
    )               reduce using rule 164 (empty -> .)

    more_fpar                      shift and go to state 254
    empty                          shift and go to state 256

state 220

    (63) matrix_exp -> { mat_elem } .

    ;               reduce using rule 63 (matrix_exp -> { mat_elem } .)


state 221

    (64) mat_elem -> vector_exp mat_more .

    }               reduce using rule 64 (mat_elem -> vector_exp mat_more .)


state 222

    (65) mat_more -> , . mat_elem
    (64) mat_elem -> . vector_exp mat_more
    (57) vector_exp -> . [ vec_elem ]

    [               shift and go to state 107

    mat_elem                       shift and go to state 257
    vector_exp                     shift and go to state 162

state 223

    (66) mat_more -> empty .

    }               reduce using rule 66 (mat_more -> empty .)


state 224

    (57) vector_exp -> [ vec_elem ] .

    ;               reduce using rule 57 (vector_exp -> [ vec_elem ] .)
    ,               reduce using rule 57 (vector_exp -> [ vec_elem ] .)
    }               reduce using rule 57 (vector_exp -> [ vec_elem ] .)


state 225

    (58) vec_elem -> vec_object vec_more .

    ]               reduce using rule 58 (vec_elem -> vec_object vec_more .)


state 226

    (61) vec_more -> , . vec_elem
    (58) vec_elem -> . vec_object vec_more
    (59) vec_object -> . create_obj
    (60) vec_object -> . expression
    (89) create_obj -> . NEW func_call
    (122) expression -> . rel_expression expression_op
    (127) rel_expression -> . rel_expression_1 rel_exp_op
    (131) rel_expression_1 -> . exp rel_exp_1_op
    (137) exp -> . term exp_op
    (141) term -> . factor term_op
    (155) factor -> . fact_neg fact_body
    (156) fact_neg -> . -
    (157) fact_neg -> . ~
    (158) fact_neg -> . empty
    (164) empty -> .

    NEW             shift and go to state 105
    -               shift and go to state 89
    ~               shift and go to state 90
    (               reduce using rule 164 (empty -> .)
    ID              reduce using rule 164 (empty -> .)
    CONST_I         reduce using rule 164 (empty -> .)
    CONST_F         reduce using rule 164 (empty -> .)
    CONST_CHAR      reduce using rule 164 (empty -> .)
    CONST_STRING    reduce using rule 164 (empty -> .)
    CONST_BOOL      reduce using rule 164 (empty -> .)

    vec_elem                       shift and go to state 258
    vec_object                     shift and go to state 164
    create_obj                     shift and go to state 165
    expression                     shift and go to state 166
    rel_expression                 shift and go to state 83
    rel_expression_1               shift and go to state 84
    exp                            shift and go to state 85
    term                           shift and go to state 86
    factor                         shift and go to state 87
    fact_neg                       shift and go to state 88
    empty                          shift and go to state 91

state 227

    (62) vec_more -> empty .

    ]               reduce using rule 62 (vec_more -> empty .)


state 228

    (159) fact_body -> ( expression ) .

    *               reduce using rule 159 (fact_body -> ( expression ) .)
    /               reduce using rule 159 (fact_body -> ( expression ) .)
    %               reduce using rule 159 (fact_body -> ( expression ) .)
    +               reduce using rule 159 (fact_body -> ( expression ) .)
    -               reduce using rule 159 (fact_body -> ( expression ) .)
    <               reduce using rule 159 (fact_body -> ( expression ) .)
    LESS_EQUAL_THAN reduce using rule 159 (fact_body -> ( expression ) .)
    >               reduce using rule 159 (fact_body -> ( expression ) .)
    GREATER_EQUAL_THAN reduce using rule 159 (fact_body -> ( expression ) .)
    EQUAL           reduce using rule 159 (fact_body -> ( expression ) .)
    NOT_EQUAL       reduce using rule 159 (fact_body -> ( expression ) .)
    AND             reduce using rule 159 (fact_body -> ( expression ) .)
    OR              reduce using rule 159 (fact_body -> ( expression ) .)
    XOR             reduce using rule 159 (fact_body -> ( expression ) .)
    ,               reduce using rule 159 (fact_body -> ( expression ) .)
    ]               reduce using rule 159 (fact_body -> ( expression ) .)
    ;               reduce using rule 159 (fact_body -> ( expression ) .)
    )               reduce using rule 159 (fact_body -> ( expression ) .)


state 229

    (33) vars_tp_a -> = expression .

    ;               reduce using rule 33 (vars_tp_a -> = expression .)


state 230

    (35) vars_tp_b -> = vars_assgn .

    ;               reduce using rule 35 (vars_tp_b -> = vars_assgn .)


state 231

    (37) vars_assgn -> create_obj .

    ;               reduce using rule 37 (vars_assgn -> create_obj .)


state 232

    (38) vars_assgn -> expression .

    ;               reduce using rule 38 (vars_assgn -> expression .)


state 233

    (41) vector -> VEC ids : vec_mat_type [ CONST_I . ] vec_assgn ;

    ]               shift and go to state 259


state 234

    (44) matrix -> MAT ids : vec_mat_type [ CONST_I . , CONST_I ] mat_assgn ;

    ,               shift and go to state 260


state 235

    (94) block -> { bstmt } .

    CONSTRUCTOR     reduce using rule 94 (block -> { bstmt } .)
    PUBLIC_FUNC     reduce using rule 94 (block -> { bstmt } .)
    PRIVATE_FUNC    reduce using rule 94 (block -> { bstmt } .)
    }               reduce using rule 94 (block -> { bstmt } .)
    ELSE            reduce using rule 94 (block -> { bstmt } .)
    ELSEIF          reduce using rule 94 (block -> { bstmt } .)
    CONSTANT        reduce using rule 94 (block -> { bstmt } .)
    ID              reduce using rule 94 (block -> { bstmt } .)
    IF              reduce using rule 94 (block -> { bstmt } .)
    PRINT           reduce using rule 94 (block -> { bstmt } .)
    SCAN            reduce using rule 94 (block -> { bstmt } .)
    RETURN          reduce using rule 94 (block -> { bstmt } .)
    FOR             reduce using rule 94 (block -> { bstmt } .)
    WHILE           reduce using rule 94 (block -> { bstmt } .)
    VAR             reduce using rule 94 (block -> { bstmt } .)
    VEC             reduce using rule 94 (block -> { bstmt } .)
    MAT             reduce using rule 94 (block -> { bstmt } .)


state 236

    (95) bstmt -> statement bstmt .

    }               reduce using rule 95 (bstmt -> statement bstmt .)


state 237

    (103) statement -> CONSTANT var_decl .

    CONSTANT        reduce using rule 103 (statement -> CONSTANT var_decl .)
    ID              reduce using rule 103 (statement -> CONSTANT var_decl .)
    IF              reduce using rule 103 (statement -> CONSTANT var_decl .)
    PRINT           reduce using rule 103 (statement -> CONSTANT var_decl .)
    SCAN            reduce using rule 103 (statement -> CONSTANT var_decl .)
    RETURN          reduce using rule 103 (statement -> CONSTANT var_decl .)
    FOR             reduce using rule 103 (statement -> CONSTANT var_decl .)
    WHILE           reduce using rule 103 (statement -> CONSTANT var_decl .)
    VAR             reduce using rule 103 (statement -> CONSTANT var_decl .)
    VEC             reduce using rule 103 (statement -> CONSTANT var_decl .)
    MAT             reduce using rule 103 (statement -> CONSTANT var_decl .)
    }               reduce using rule 103 (statement -> CONSTANT var_decl .)


state 238

    (104) condition -> IF cond_body .

    CONSTANT        reduce using rule 104 (condition -> IF cond_body .)
    ID              reduce using rule 104 (condition -> IF cond_body .)
    IF              reduce using rule 104 (condition -> IF cond_body .)
    PRINT           reduce using rule 104 (condition -> IF cond_body .)
    SCAN            reduce using rule 104 (condition -> IF cond_body .)
    RETURN          reduce using rule 104 (condition -> IF cond_body .)
    FOR             reduce using rule 104 (condition -> IF cond_body .)
    WHILE           reduce using rule 104 (condition -> IF cond_body .)
    VAR             reduce using rule 104 (condition -> IF cond_body .)
    VEC             reduce using rule 104 (condition -> IF cond_body .)
    MAT             reduce using rule 104 (condition -> IF cond_body .)
    }               reduce using rule 104 (condition -> IF cond_body .)


state 239

    (105) cond_body -> ( . expression ) block cond_else
    (122) expression -> . rel_expression expression_op
    (127) rel_expression -> . rel_expression_1 rel_exp_op
    (131) rel_expression_1 -> . exp rel_exp_1_op
    (137) exp -> . term exp_op
    (141) term -> . factor term_op
    (155) factor -> . fact_neg fact_body
    (156) fact_neg -> . -
    (157) fact_neg -> . ~
    (158) fact_neg -> . empty
    (164) empty -> .

    -               shift and go to state 89
    ~               shift and go to state 90
    (               reduce using rule 164 (empty -> .)
    ID              reduce using rule 164 (empty -> .)
    CONST_I         reduce using rule 164 (empty -> .)
    CONST_F         reduce using rule 164 (empty -> .)
    CONST_CHAR      reduce using rule 164 (empty -> .)
    CONST_STRING    reduce using rule 164 (empty -> .)
    CONST_BOOL      reduce using rule 164 (empty -> .)

    expression                     shift and go to state 261
    rel_expression                 shift and go to state 83
    rel_expression_1               shift and go to state 84
    exp                            shift and go to state 85
    term                           shift and go to state 86
    factor                         shift and go to state 87
    fact_neg                       shift and go to state 88
    empty                          shift and go to state 91

state 240

    (113) in_out -> PRINT ( . print_exp ) ;
    (115) print_exp -> . print_val print_more
    (116) print_val -> . expression
    (122) expression -> . rel_expression expression_op
    (127) rel_expression -> . rel_expression_1 rel_exp_op
    (131) rel_expression_1 -> . exp rel_exp_1_op
    (137) exp -> . term exp_op
    (141) term -> . factor term_op
    (155) factor -> . fact_neg fact_body
    (156) fact_neg -> . -
    (157) fact_neg -> . ~
    (158) fact_neg -> . empty
    (164) empty -> .

    -               shift and go to state 89
    ~               shift and go to state 90
    (               reduce using rule 164 (empty -> .)
    ID              reduce using rule 164 (empty -> .)
    CONST_I         reduce using rule 164 (empty -> .)
    CONST_F         reduce using rule 164 (empty -> .)
    CONST_CHAR      reduce using rule 164 (empty -> .)
    CONST_STRING    reduce using rule 164 (empty -> .)
    CONST_BOOL      reduce using rule 164 (empty -> .)

    print_exp                      shift and go to state 262
    print_val                      shift and go to state 263
    expression                     shift and go to state 264
    rel_expression                 shift and go to state 83
    rel_expression_1               shift and go to state 84
    exp                            shift and go to state 85
    term                           shift and go to state 86
    factor                         shift and go to state 87
    fact_neg                       shift and go to state 88
    empty                          shift and go to state 91

state 241

    (114) in_out -> SCAN ( . ID id_access ) ;

    ID              shift and go to state 265


state 242

    (119) return -> RETURN ret_val . ;

    ;               shift and go to state 266


state 243

    (120) ret_val -> expression .

    ;               reduce using rule 120 (ret_val -> expression .)


state 244

    (121) ret_val -> empty .
    (158) fact_neg -> empty .

    ;               reduce using rule 121 (ret_val -> empty .)
    (               reduce using rule 158 (fact_neg -> empty .)
    ID              reduce using rule 158 (fact_neg -> empty .)
    CONST_I         reduce using rule 158 (fact_neg -> empty .)
    CONST_F         reduce using rule 158 (fact_neg -> empty .)
    CONST_CHAR      reduce using rule 158 (fact_neg -> empty .)
    CONST_STRING    reduce using rule 158 (fact_neg -> empty .)
    CONST_BOOL      reduce using rule 158 (fact_neg -> empty .)


state 245

    (111) for_loop -> FOR ( . assignment expression ; ID = expression ) block
    (52) assignment -> . ID id_access = ass_value ;

    ID              shift and go to state 35

    assignment                     shift and go to state 267

state 246

    (112) while_loop -> WHILE ( . expression ) block
    (122) expression -> . rel_expression expression_op
    (127) rel_expression -> . rel_expression_1 rel_exp_op
    (131) rel_expression_1 -> . exp rel_exp_1_op
    (137) exp -> . term exp_op
    (141) term -> . factor term_op
    (155) factor -> . fact_neg fact_body
    (156) fact_neg -> . -
    (157) fact_neg -> . ~
    (158) fact_neg -> . empty
    (164) empty -> .

    -               shift and go to state 89
    ~               shift and go to state 90
    (               reduce using rule 164 (empty -> .)
    ID              reduce using rule 164 (empty -> .)
    CONST_I         reduce using rule 164 (empty -> .)
    CONST_F         reduce using rule 164 (empty -> .)
    CONST_CHAR      reduce using rule 164 (empty -> .)
    CONST_STRING    reduce using rule 164 (empty -> .)
    CONST_BOOL      reduce using rule 164 (empty -> .)

    expression                     shift and go to state 268
    rel_expression                 shift and go to state 83
    rel_expression_1               shift and go to state 84
    exp                            shift and go to state 85
    term                           shift and go to state 86
    factor                         shift and go to state 87
    fact_neg                       shift and go to state 88
    empty                          shift and go to state 91

state 247

    (80) method_param -> ID : param_type param_mat_vec more_params .

    )               reduce using rule 80 (method_param -> ID : param_type param_mat_vec more_params .)


state 248

    (81) more_params -> , . method_param
    (80) method_param -> . ID : param_type param_mat_vec more_params

    ID              shift and go to state 74

    method_param                   shift and go to state 269

state 249

    (82) more_params -> empty .

    )               reduce using rule 82 (more_params -> empty .)


state 250

    (85) param_mat_vec -> [ param_mat . ]

    ]               shift and go to state 270


state 251

    (87) param_mat -> , .

    ]               reduce using rule 87 (param_mat -> , .)


state 252

    (88) param_mat -> empty .

    ]               reduce using rule 88 (param_mat -> empty .)


state 253

    (90) func_call -> ( func_param ) .

    ;               reduce using rule 90 (func_call -> ( func_param ) .)
    ,               reduce using rule 90 (func_call -> ( func_param ) .)
    ]               reduce using rule 90 (func_call -> ( func_param ) .)
    *               reduce using rule 90 (func_call -> ( func_param ) .)
    /               reduce using rule 90 (func_call -> ( func_param ) .)
    %               reduce using rule 90 (func_call -> ( func_param ) .)
    +               reduce using rule 90 (func_call -> ( func_param ) .)
    -               reduce using rule 90 (func_call -> ( func_param ) .)
    <               reduce using rule 90 (func_call -> ( func_param ) .)
    LESS_EQUAL_THAN reduce using rule 90 (func_call -> ( func_param ) .)
    >               reduce using rule 90 (func_call -> ( func_param ) .)
    GREATER_EQUAL_THAN reduce using rule 90 (func_call -> ( func_param ) .)
    EQUAL           reduce using rule 90 (func_call -> ( func_param ) .)
    NOT_EQUAL       reduce using rule 90 (func_call -> ( func_param ) .)
    AND             reduce using rule 90 (func_call -> ( func_param ) .)
    OR              reduce using rule 90 (func_call -> ( func_param ) .)
    XOR             reduce using rule 90 (func_call -> ( func_param ) .)
    )               reduce using rule 90 (func_call -> ( func_param ) .)


state 254

    (91) func_param -> expression more_fpar .

    )               reduce using rule 91 (func_param -> expression more_fpar .)


state 255

    (92) more_fpar -> , . func_param
    (91) func_param -> . expression more_fpar
    (122) expression -> . rel_expression expression_op
    (127) rel_expression -> . rel_expression_1 rel_exp_op
    (131) rel_expression_1 -> . exp rel_exp_1_op
    (137) exp -> . term exp_op
    (141) term -> . factor term_op
    (155) factor -> . fact_neg fact_body
    (156) fact_neg -> . -
    (157) fact_neg -> . ~
    (158) fact_neg -> . empty
    (164) empty -> .

    -               shift and go to state 89
    ~               shift and go to state 90
    (               reduce using rule 164 (empty -> .)
    ID              reduce using rule 164 (empty -> .)
    CONST_I         reduce using rule 164 (empty -> .)
    CONST_F         reduce using rule 164 (empty -> .)
    CONST_CHAR      reduce using rule 164 (empty -> .)
    CONST_STRING    reduce using rule 164 (empty -> .)
    CONST_BOOL      reduce using rule 164 (empty -> .)

    func_param                     shift and go to state 271
    expression                     shift and go to state 219
    rel_expression                 shift and go to state 83
    rel_expression_1               shift and go to state 84
    exp                            shift and go to state 85
    term                           shift and go to state 86
    factor                         shift and go to state 87
    fact_neg                       shift and go to state 88
    empty                          shift and go to state 91

state 256

    (93) more_fpar -> empty .

    )               reduce using rule 93 (more_fpar -> empty .)


state 257

    (65) mat_more -> , mat_elem .

    }               reduce using rule 65 (mat_more -> , mat_elem .)


state 258

    (61) vec_more -> , vec_elem .

    ]               reduce using rule 61 (vec_more -> , vec_elem .)


state 259

    (41) vector -> VEC ids : vec_mat_type [ CONST_I ] . vec_assgn ;
    (42) vec_assgn -> . = vector_exp
    (43) vec_assgn -> . empty
    (164) empty -> .

    =               shift and go to state 273
    ;               reduce using rule 164 (empty -> .)

    vec_assgn                      shift and go to state 272
    empty                          shift and go to state 274

state 260

    (44) matrix -> MAT ids : vec_mat_type [ CONST_I , . CONST_I ] mat_assgn ;

    CONST_I         shift and go to state 275


state 261

    (105) cond_body -> ( expression . ) block cond_else

    )               shift and go to state 276


state 262

    (113) in_out -> PRINT ( print_exp . ) ;

    )               shift and go to state 277


state 263

    (115) print_exp -> print_val . print_more
    (117) print_more -> . , print_exp
    (118) print_more -> . empty
    (164) empty -> .

    ,               shift and go to state 279
    )               reduce using rule 164 (empty -> .)

    print_more                     shift and go to state 278
    empty                          shift and go to state 280

state 264

    (116) print_val -> expression .

    ,               reduce using rule 116 (print_val -> expression .)
    )               reduce using rule 116 (print_val -> expression .)


state 265

    (114) in_out -> SCAN ( ID . id_access ) ;
    (47) id_access -> . id_mat_acc id_var_acc
    (48) id_mat_acc -> . mat_vec_access
    (49) id_mat_acc -> . empty
    (67) mat_vec_access -> . [ mat_vec_index mat_access ]
    (164) empty -> .

    [               shift and go to state 63
    .               reduce using rule 164 (empty -> .)
    )               reduce using rule 164 (empty -> .)

    id_access                      shift and go to state 281
    id_mat_acc                     shift and go to state 60
    mat_vec_access                 shift and go to state 61
    empty                          shift and go to state 62

state 266

    (119) return -> RETURN ret_val ; .

    CONSTANT        reduce using rule 119 (return -> RETURN ret_val ; .)
    ID              reduce using rule 119 (return -> RETURN ret_val ; .)
    IF              reduce using rule 119 (return -> RETURN ret_val ; .)
    PRINT           reduce using rule 119 (return -> RETURN ret_val ; .)
    SCAN            reduce using rule 119 (return -> RETURN ret_val ; .)
    RETURN          reduce using rule 119 (return -> RETURN ret_val ; .)
    FOR             reduce using rule 119 (return -> RETURN ret_val ; .)
    WHILE           reduce using rule 119 (return -> RETURN ret_val ; .)
    VAR             reduce using rule 119 (return -> RETURN ret_val ; .)
    VEC             reduce using rule 119 (return -> RETURN ret_val ; .)
    MAT             reduce using rule 119 (return -> RETURN ret_val ; .)
    }               reduce using rule 119 (return -> RETURN ret_val ; .)


state 267

    (111) for_loop -> FOR ( assignment . expression ; ID = expression ) block
    (122) expression -> . rel_expression expression_op
    (127) rel_expression -> . rel_expression_1 rel_exp_op
    (131) rel_expression_1 -> . exp rel_exp_1_op
    (137) exp -> . term exp_op
    (141) term -> . factor term_op
    (155) factor -> . fact_neg fact_body
    (156) fact_neg -> . -
    (157) fact_neg -> . ~
    (158) fact_neg -> . empty
    (164) empty -> .

    -               shift and go to state 89
    ~               shift and go to state 90
    (               reduce using rule 164 (empty -> .)
    ID              reduce using rule 164 (empty -> .)
    CONST_I         reduce using rule 164 (empty -> .)
    CONST_F         reduce using rule 164 (empty -> .)
    CONST_CHAR      reduce using rule 164 (empty -> .)
    CONST_STRING    reduce using rule 164 (empty -> .)
    CONST_BOOL      reduce using rule 164 (empty -> .)

    expression                     shift and go to state 282
    rel_expression                 shift and go to state 83
    rel_expression_1               shift and go to state 84
    exp                            shift and go to state 85
    term                           shift and go to state 86
    factor                         shift and go to state 87
    fact_neg                       shift and go to state 88
    empty                          shift and go to state 91

state 268

    (112) while_loop -> WHILE ( expression . ) block

    )               shift and go to state 283


state 269

    (81) more_params -> , method_param .

    )               reduce using rule 81 (more_params -> , method_param .)


state 270

    (85) param_mat_vec -> [ param_mat ] .

    ,               reduce using rule 85 (param_mat_vec -> [ param_mat ] .)
    )               reduce using rule 85 (param_mat_vec -> [ param_mat ] .)


state 271

    (92) more_fpar -> , func_param .

    )               reduce using rule 92 (more_fpar -> , func_param .)


state 272

    (41) vector -> VEC ids : vec_mat_type [ CONST_I ] vec_assgn . ;

    ;               shift and go to state 284


state 273

    (42) vec_assgn -> = . vector_exp
    (57) vector_exp -> . [ vec_elem ]

    [               shift and go to state 107

    vector_exp                     shift and go to state 285

state 274

    (43) vec_assgn -> empty .

    ;               reduce using rule 43 (vec_assgn -> empty .)


state 275

    (44) matrix -> MAT ids : vec_mat_type [ CONST_I , CONST_I . ] mat_assgn ;

    ]               shift and go to state 286


state 276

    (105) cond_body -> ( expression ) . block cond_else
    (94) block -> . { bstmt }

    {               shift and go to state 154

    block                          shift and go to state 287

state 277

    (113) in_out -> PRINT ( print_exp ) . ;

    ;               shift and go to state 288


state 278

    (115) print_exp -> print_val print_more .

    )               reduce using rule 115 (print_exp -> print_val print_more .)


state 279

    (117) print_more -> , . print_exp
    (115) print_exp -> . print_val print_more
    (116) print_val -> . expression
    (122) expression -> . rel_expression expression_op
    (127) rel_expression -> . rel_expression_1 rel_exp_op
    (131) rel_expression_1 -> . exp rel_exp_1_op
    (137) exp -> . term exp_op
    (141) term -> . factor term_op
    (155) factor -> . fact_neg fact_body
    (156) fact_neg -> . -
    (157) fact_neg -> . ~
    (158) fact_neg -> . empty
    (164) empty -> .

    -               shift and go to state 89
    ~               shift and go to state 90
    (               reduce using rule 164 (empty -> .)
    ID              reduce using rule 164 (empty -> .)
    CONST_I         reduce using rule 164 (empty -> .)
    CONST_F         reduce using rule 164 (empty -> .)
    CONST_CHAR      reduce using rule 164 (empty -> .)
    CONST_STRING    reduce using rule 164 (empty -> .)
    CONST_BOOL      reduce using rule 164 (empty -> .)

    print_exp                      shift and go to state 289
    print_val                      shift and go to state 263
    expression                     shift and go to state 264
    rel_expression                 shift and go to state 83
    rel_expression_1               shift and go to state 84
    exp                            shift and go to state 85
    term                           shift and go to state 86
    factor                         shift and go to state 87
    fact_neg                       shift and go to state 88
    empty                          shift and go to state 91

state 280

    (118) print_more -> empty .

    )               reduce using rule 118 (print_more -> empty .)


state 281

    (114) in_out -> SCAN ( ID id_access . ) ;

    )               shift and go to state 290


state 282

    (111) for_loop -> FOR ( assignment expression . ; ID = expression ) block

    ;               shift and go to state 291


state 283

    (112) while_loop -> WHILE ( expression ) . block
    (94) block -> . { bstmt }

    {               shift and go to state 154

    block                          shift and go to state 292

state 284

    (41) vector -> VEC ids : vec_mat_type [ CONST_I ] vec_assgn ; .

    PUBLIC          reduce using rule 41 (vector -> VEC ids : vec_mat_type [ CONST_I ] vec_assgn ; .)
    PRIVATE         reduce using rule 41 (vector -> VEC ids : vec_mat_type [ CONST_I ] vec_assgn ; .)
    ID              reduce using rule 41 (vector -> VEC ids : vec_mat_type [ CONST_I ] vec_assgn ; .)
    CONSTRUCTOR     reduce using rule 41 (vector -> VEC ids : vec_mat_type [ CONST_I ] vec_assgn ; .)
    PUBLIC_FUNC     reduce using rule 41 (vector -> VEC ids : vec_mat_type [ CONST_I ] vec_assgn ; .)
    PRIVATE_FUNC    reduce using rule 41 (vector -> VEC ids : vec_mat_type [ CONST_I ] vec_assgn ; .)
    }               reduce using rule 41 (vector -> VEC ids : vec_mat_type [ CONST_I ] vec_assgn ; .)
    CONSTANT        reduce using rule 41 (vector -> VEC ids : vec_mat_type [ CONST_I ] vec_assgn ; .)
    IF              reduce using rule 41 (vector -> VEC ids : vec_mat_type [ CONST_I ] vec_assgn ; .)
    PRINT           reduce using rule 41 (vector -> VEC ids : vec_mat_type [ CONST_I ] vec_assgn ; .)
    SCAN            reduce using rule 41 (vector -> VEC ids : vec_mat_type [ CONST_I ] vec_assgn ; .)
    RETURN          reduce using rule 41 (vector -> VEC ids : vec_mat_type [ CONST_I ] vec_assgn ; .)
    FOR             reduce using rule 41 (vector -> VEC ids : vec_mat_type [ CONST_I ] vec_assgn ; .)
    WHILE           reduce using rule 41 (vector -> VEC ids : vec_mat_type [ CONST_I ] vec_assgn ; .)
    VAR             reduce using rule 41 (vector -> VEC ids : vec_mat_type [ CONST_I ] vec_assgn ; .)
    VEC             reduce using rule 41 (vector -> VEC ids : vec_mat_type [ CONST_I ] vec_assgn ; .)
    MAT             reduce using rule 41 (vector -> VEC ids : vec_mat_type [ CONST_I ] vec_assgn ; .)


state 285

    (42) vec_assgn -> = vector_exp .

    ;               reduce using rule 42 (vec_assgn -> = vector_exp .)


state 286

    (44) matrix -> MAT ids : vec_mat_type [ CONST_I , CONST_I ] . mat_assgn ;
    (45) mat_assgn -> . = matrix_exp
    (46) mat_assgn -> . empty
    (164) empty -> .

    =               shift and go to state 294
    ;               reduce using rule 164 (empty -> .)

    mat_assgn                      shift and go to state 293
    empty                          shift and go to state 295

state 287

    (105) cond_body -> ( expression ) block . cond_else
    (106) cond_else -> . ELSE block
    (107) cond_else -> . ELSEIF cond_body
    (108) cond_else -> . empty
    (164) empty -> .

    ELSE            shift and go to state 297
    ELSEIF          shift and go to state 298
    CONSTANT        reduce using rule 164 (empty -> .)
    ID              reduce using rule 164 (empty -> .)
    IF              reduce using rule 164 (empty -> .)
    PRINT           reduce using rule 164 (empty -> .)
    SCAN            reduce using rule 164 (empty -> .)
    RETURN          reduce using rule 164 (empty -> .)
    FOR             reduce using rule 164 (empty -> .)
    WHILE           reduce using rule 164 (empty -> .)
    VAR             reduce using rule 164 (empty -> .)
    VEC             reduce using rule 164 (empty -> .)
    MAT             reduce using rule 164 (empty -> .)
    }               reduce using rule 164 (empty -> .)

    cond_else                      shift and go to state 296
    empty                          shift and go to state 299

state 288

    (113) in_out -> PRINT ( print_exp ) ; .

    CONSTANT        reduce using rule 113 (in_out -> PRINT ( print_exp ) ; .)
    ID              reduce using rule 113 (in_out -> PRINT ( print_exp ) ; .)
    IF              reduce using rule 113 (in_out -> PRINT ( print_exp ) ; .)
    PRINT           reduce using rule 113 (in_out -> PRINT ( print_exp ) ; .)
    SCAN            reduce using rule 113 (in_out -> PRINT ( print_exp ) ; .)
    RETURN          reduce using rule 113 (in_out -> PRINT ( print_exp ) ; .)
    FOR             reduce using rule 113 (in_out -> PRINT ( print_exp ) ; .)
    WHILE           reduce using rule 113 (in_out -> PRINT ( print_exp ) ; .)
    VAR             reduce using rule 113 (in_out -> PRINT ( print_exp ) ; .)
    VEC             reduce using rule 113 (in_out -> PRINT ( print_exp ) ; .)
    MAT             reduce using rule 113 (in_out -> PRINT ( print_exp ) ; .)
    }               reduce using rule 113 (in_out -> PRINT ( print_exp ) ; .)


state 289

    (117) print_more -> , print_exp .

    )               reduce using rule 117 (print_more -> , print_exp .)


state 290

    (114) in_out -> SCAN ( ID id_access ) . ;

    ;               shift and go to state 300


state 291

    (111) for_loop -> FOR ( assignment expression ; . ID = expression ) block

    ID              shift and go to state 301


state 292

    (112) while_loop -> WHILE ( expression ) block .

    CONSTANT        reduce using rule 112 (while_loop -> WHILE ( expression ) block .)
    ID              reduce using rule 112 (while_loop -> WHILE ( expression ) block .)
    IF              reduce using rule 112 (while_loop -> WHILE ( expression ) block .)
    PRINT           reduce using rule 112 (while_loop -> WHILE ( expression ) block .)
    SCAN            reduce using rule 112 (while_loop -> WHILE ( expression ) block .)
    RETURN          reduce using rule 112 (while_loop -> WHILE ( expression ) block .)
    FOR             reduce using rule 112 (while_loop -> WHILE ( expression ) block .)
    WHILE           reduce using rule 112 (while_loop -> WHILE ( expression ) block .)
    VAR             reduce using rule 112 (while_loop -> WHILE ( expression ) block .)
    VEC             reduce using rule 112 (while_loop -> WHILE ( expression ) block .)
    MAT             reduce using rule 112 (while_loop -> WHILE ( expression ) block .)
    }               reduce using rule 112 (while_loop -> WHILE ( expression ) block .)


state 293

    (44) matrix -> MAT ids : vec_mat_type [ CONST_I , CONST_I ] mat_assgn . ;

    ;               shift and go to state 302


state 294

    (45) mat_assgn -> = . matrix_exp
    (63) matrix_exp -> . { mat_elem }

    {               shift and go to state 106

    matrix_exp                     shift and go to state 303

state 295

    (46) mat_assgn -> empty .

    ;               reduce using rule 46 (mat_assgn -> empty .)


state 296

    (105) cond_body -> ( expression ) block cond_else .

    CONSTANT        reduce using rule 105 (cond_body -> ( expression ) block cond_else .)
    ID              reduce using rule 105 (cond_body -> ( expression ) block cond_else .)
    IF              reduce using rule 105 (cond_body -> ( expression ) block cond_else .)
    PRINT           reduce using rule 105 (cond_body -> ( expression ) block cond_else .)
    SCAN            reduce using rule 105 (cond_body -> ( expression ) block cond_else .)
    RETURN          reduce using rule 105 (cond_body -> ( expression ) block cond_else .)
    FOR             reduce using rule 105 (cond_body -> ( expression ) block cond_else .)
    WHILE           reduce using rule 105 (cond_body -> ( expression ) block cond_else .)
    VAR             reduce using rule 105 (cond_body -> ( expression ) block cond_else .)
    VEC             reduce using rule 105 (cond_body -> ( expression ) block cond_else .)
    MAT             reduce using rule 105 (cond_body -> ( expression ) block cond_else .)
    }               reduce using rule 105 (cond_body -> ( expression ) block cond_else .)


state 297

    (106) cond_else -> ELSE . block
    (94) block -> . { bstmt }

    {               shift and go to state 154

    block                          shift and go to state 304

state 298

    (107) cond_else -> ELSEIF . cond_body
    (105) cond_body -> . ( expression ) block cond_else

    (               shift and go to state 239

    cond_body                      shift and go to state 305

state 299

    (108) cond_else -> empty .

    CONSTANT        reduce using rule 108 (cond_else -> empty .)
    ID              reduce using rule 108 (cond_else -> empty .)
    IF              reduce using rule 108 (cond_else -> empty .)
    PRINT           reduce using rule 108 (cond_else -> empty .)
    SCAN            reduce using rule 108 (cond_else -> empty .)
    RETURN          reduce using rule 108 (cond_else -> empty .)
    FOR             reduce using rule 108 (cond_else -> empty .)
    WHILE           reduce using rule 108 (cond_else -> empty .)
    VAR             reduce using rule 108 (cond_else -> empty .)
    VEC             reduce using rule 108 (cond_else -> empty .)
    MAT             reduce using rule 108 (cond_else -> empty .)
    }               reduce using rule 108 (cond_else -> empty .)


state 300

    (114) in_out -> SCAN ( ID id_access ) ; .

    CONSTANT        reduce using rule 114 (in_out -> SCAN ( ID id_access ) ; .)
    ID              reduce using rule 114 (in_out -> SCAN ( ID id_access ) ; .)
    IF              reduce using rule 114 (in_out -> SCAN ( ID id_access ) ; .)
    PRINT           reduce using rule 114 (in_out -> SCAN ( ID id_access ) ; .)
    SCAN            reduce using rule 114 (in_out -> SCAN ( ID id_access ) ; .)
    RETURN          reduce using rule 114 (in_out -> SCAN ( ID id_access ) ; .)
    FOR             reduce using rule 114 (in_out -> SCAN ( ID id_access ) ; .)
    WHILE           reduce using rule 114 (in_out -> SCAN ( ID id_access ) ; .)
    VAR             reduce using rule 114 (in_out -> SCAN ( ID id_access ) ; .)
    VEC             reduce using rule 114 (in_out -> SCAN ( ID id_access ) ; .)
    MAT             reduce using rule 114 (in_out -> SCAN ( ID id_access ) ; .)
    }               reduce using rule 114 (in_out -> SCAN ( ID id_access ) ; .)


state 301

    (111) for_loop -> FOR ( assignment expression ; ID . = expression ) block

    =               shift and go to state 306


state 302

    (44) matrix -> MAT ids : vec_mat_type [ CONST_I , CONST_I ] mat_assgn ; .

    PUBLIC          reduce using rule 44 (matrix -> MAT ids : vec_mat_type [ CONST_I , CONST_I ] mat_assgn ; .)
    PRIVATE         reduce using rule 44 (matrix -> MAT ids : vec_mat_type [ CONST_I , CONST_I ] mat_assgn ; .)
    ID              reduce using rule 44 (matrix -> MAT ids : vec_mat_type [ CONST_I , CONST_I ] mat_assgn ; .)
    CONSTRUCTOR     reduce using rule 44 (matrix -> MAT ids : vec_mat_type [ CONST_I , CONST_I ] mat_assgn ; .)
    PUBLIC_FUNC     reduce using rule 44 (matrix -> MAT ids : vec_mat_type [ CONST_I , CONST_I ] mat_assgn ; .)
    PRIVATE_FUNC    reduce using rule 44 (matrix -> MAT ids : vec_mat_type [ CONST_I , CONST_I ] mat_assgn ; .)
    }               reduce using rule 44 (matrix -> MAT ids : vec_mat_type [ CONST_I , CONST_I ] mat_assgn ; .)
    CONSTANT        reduce using rule 44 (matrix -> MAT ids : vec_mat_type [ CONST_I , CONST_I ] mat_assgn ; .)
    IF              reduce using rule 44 (matrix -> MAT ids : vec_mat_type [ CONST_I , CONST_I ] mat_assgn ; .)
    PRINT           reduce using rule 44 (matrix -> MAT ids : vec_mat_type [ CONST_I , CONST_I ] mat_assgn ; .)
    SCAN            reduce using rule 44 (matrix -> MAT ids : vec_mat_type [ CONST_I , CONST_I ] mat_assgn ; .)
    RETURN          reduce using rule 44 (matrix -> MAT ids : vec_mat_type [ CONST_I , CONST_I ] mat_assgn ; .)
    FOR             reduce using rule 44 (matrix -> MAT ids : vec_mat_type [ CONST_I , CONST_I ] mat_assgn ; .)
    WHILE           reduce using rule 44 (matrix -> MAT ids : vec_mat_type [ CONST_I , CONST_I ] mat_assgn ; .)
    VAR             reduce using rule 44 (matrix -> MAT ids : vec_mat_type [ CONST_I , CONST_I ] mat_assgn ; .)
    VEC             reduce using rule 44 (matrix -> MAT ids : vec_mat_type [ CONST_I , CONST_I ] mat_assgn ; .)
    MAT             reduce using rule 44 (matrix -> MAT ids : vec_mat_type [ CONST_I , CONST_I ] mat_assgn ; .)


state 303

    (45) mat_assgn -> = matrix_exp .

    ;               reduce using rule 45 (mat_assgn -> = matrix_exp .)


state 304

    (106) cond_else -> ELSE block .

    CONSTANT        reduce using rule 106 (cond_else -> ELSE block .)
    ID              reduce using rule 106 (cond_else -> ELSE block .)
    IF              reduce using rule 106 (cond_else -> ELSE block .)
    PRINT           reduce using rule 106 (cond_else -> ELSE block .)
    SCAN            reduce using rule 106 (cond_else -> ELSE block .)
    RETURN          reduce using rule 106 (cond_else -> ELSE block .)
    FOR             reduce using rule 106 (cond_else -> ELSE block .)
    WHILE           reduce using rule 106 (cond_else -> ELSE block .)
    VAR             reduce using rule 106 (cond_else -> ELSE block .)
    VEC             reduce using rule 106 (cond_else -> ELSE block .)
    MAT             reduce using rule 106 (cond_else -> ELSE block .)
    }               reduce using rule 106 (cond_else -> ELSE block .)


state 305

    (107) cond_else -> ELSEIF cond_body .

    CONSTANT        reduce using rule 107 (cond_else -> ELSEIF cond_body .)
    ID              reduce using rule 107 (cond_else -> ELSEIF cond_body .)
    IF              reduce using rule 107 (cond_else -> ELSEIF cond_body .)
    PRINT           reduce using rule 107 (cond_else -> ELSEIF cond_body .)
    SCAN            reduce using rule 107 (cond_else -> ELSEIF cond_body .)
    RETURN          reduce using rule 107 (cond_else -> ELSEIF cond_body .)
    FOR             reduce using rule 107 (cond_else -> ELSEIF cond_body .)
    WHILE           reduce using rule 107 (cond_else -> ELSEIF cond_body .)
    VAR             reduce using rule 107 (cond_else -> ELSEIF cond_body .)
    VEC             reduce using rule 107 (cond_else -> ELSEIF cond_body .)
    MAT             reduce using rule 107 (cond_else -> ELSEIF cond_body .)
    }               reduce using rule 107 (cond_else -> ELSEIF cond_body .)


state 306

    (111) for_loop -> FOR ( assignment expression ; ID = . expression ) block
    (122) expression -> . rel_expression expression_op
    (127) rel_expression -> . rel_expression_1 rel_exp_op
    (131) rel_expression_1 -> . exp rel_exp_1_op
    (137) exp -> . term exp_op
    (141) term -> . factor term_op
    (155) factor -> . fact_neg fact_body
    (156) fact_neg -> . -
    (157) fact_neg -> . ~
    (158) fact_neg -> . empty
    (164) empty -> .

    -               shift and go to state 89
    ~               shift and go to state 90
    (               reduce using rule 164 (empty -> .)
    ID              reduce using rule 164 (empty -> .)
    CONST_I         reduce using rule 164 (empty -> .)
    CONST_F         reduce using rule 164 (empty -> .)
    CONST_CHAR      reduce using rule 164 (empty -> .)
    CONST_STRING    reduce using rule 164 (empty -> .)
    CONST_BOOL      reduce using rule 164 (empty -> .)

    expression                     shift and go to state 307
    rel_expression                 shift and go to state 83
    rel_expression_1               shift and go to state 84
    exp                            shift and go to state 85
    term                           shift and go to state 86
    factor                         shift and go to state 87
    fact_neg                       shift and go to state 88
    empty                          shift and go to state 91

state 307

    (111) for_loop -> FOR ( assignment expression ; ID = expression . ) block

    )               shift and go to state 308


state 308

    (111) for_loop -> FOR ( assignment expression ; ID = expression ) . block
    (94) block -> . { bstmt }

    {               shift and go to state 154

    block                          shift and go to state 309

state 309

    (111) for_loop -> FOR ( assignment expression ; ID = expression ) block .

    CONSTANT        reduce using rule 111 (for_loop -> FOR ( assignment expression ; ID = expression ) block .)
    ID              reduce using rule 111 (for_loop -> FOR ( assignment expression ; ID = expression ) block .)
    IF              reduce using rule 111 (for_loop -> FOR ( assignment expression ; ID = expression ) block .)
    PRINT           reduce using rule 111 (for_loop -> FOR ( assignment expression ; ID = expression ) block .)
    SCAN            reduce using rule 111 (for_loop -> FOR ( assignment expression ; ID = expression ) block .)
    RETURN          reduce using rule 111 (for_loop -> FOR ( assignment expression ; ID = expression ) block .)
    FOR             reduce using rule 111 (for_loop -> FOR ( assignment expression ; ID = expression ) block .)
    WHILE           reduce using rule 111 (for_loop -> FOR ( assignment expression ; ID = expression ) block .)
    VAR             reduce using rule 111 (for_loop -> FOR ( assignment expression ; ID = expression ) block .)
    VEC             reduce using rule 111 (for_loop -> FOR ( assignment expression ; ID = expression ) block .)
    MAT             reduce using rule 111 (for_loop -> FOR ( assignment expression ; ID = expression ) block .)
    }               reduce using rule 111 (for_loop -> FOR ( assignment expression ; ID = expression ) block .)

